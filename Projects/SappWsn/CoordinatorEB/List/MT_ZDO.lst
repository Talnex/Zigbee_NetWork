###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               14/Jul/2019  17:09:47
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Components\mt\MT_ZDO.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWFB90.tmp
#        ("C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Components\mt\MT_ZDO.c" -D ZTOOL_P1 -D MT_TASK
#        -D MT_SYS_FUNC -D MT_ZDO_FUNC -D SAPP_ZSTACK -lC
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List" -lA
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -f "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x4545
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\Source\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\ZMain\TI2530DB\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\include\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\include\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\high_level\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mt\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\osal\include\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\saddr\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\sdata\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\af\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\nwk\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sapi\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sec\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sys\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\zdo\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List\MT_ZDO.lst
#    Object file        =  
#        C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\Obj\MT_ZDO.r51
#
###############################################################################

C:\Users\Administrator\Desktop\111 - ¸±±¾\ZStack-CC2530-r200\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2011-06-07 14:34:55 -0700 (Tue, 07 Jun 2011) $
      4            Revision:       $Revision: 26241 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8          
      9            Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef MT_ZDO_FUNC
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "MT.h"
     49          #include "MT_ZDO.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          
     56          #if !defined( WIN32 )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #if defined ( MT_SYS_KEY_MANAGEMENT )
     61            #include "ZDSecMgr.h"
     62          #endif
     63          
     64          #include "nwk_util.h"
     65          
     66          /**************************************************************************************************
     67           * CONSTANTS
     68           **************************************************************************************************/
     69          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     70          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     71          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     72          #define MT_ZDO_BEACON_IND_LEN             21
     73          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     74          #define MT_ZDO_JOIN_CNF_LEN               5
     75          
     76          // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
     77          // sizeof(zdoConcentratorInd_t) is not usable.
     78          #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
     79          
     80          #define MTZDO_RESPONSE_BUFFER_LEN   100
     81          
     82          #define MTZDO_MAX_MATCH_CLUSTERS    16
     83          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     84          
     85          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     86          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     87          
     88          #define MT_ZDO_STATUS_LEN   1
     89          
     90          /**************************************************************************************************
     91           * GLOBAL VARIABLES
     92           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 *pBeaconIndBuf = NULL;
   \                     pBeaconIndBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     95          
     96          /**************************************************************************************************
     97           * LOCAL VARIABLES
     98           **************************************************************************************************/
     99          
    100          /**************************************************************************************************
    101           * LOCAL FUNCTIONS
    102           **************************************************************************************************/
    103          #if defined (MT_ZDO_FUNC)
    104          void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    105          void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    106          void MT_ZdoNodeDescRequest(uint8 *pBuf);
    107          void MT_ZdoPowerDescRequest(uint8 *pBuf);
    108          void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    109          void MT_ZdoActiveEpRequest(uint8 *pBuf);
    110          void MT_ZdoMatchDescRequest(uint8 *pBuf);
    111          void MT_ZdoComplexDescRequest(uint8 *pBuf);
    112          void MT_ZdoUserDescRequest(uint8 *pBuf);
    113          void MT_ZdoEndDevAnnce(uint8 *pBuf);
    114          void MT_ZdoUserDescSet(uint8 *pBuf);
    115          void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    116          void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    117          void MT_ZdoBindRequest(uint8 *pBuf);
    118          void MT_ZdoUnbindRequest(uint8 *pBuf);
    119          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    120          #if defined ( MT_SYS_KEY_MANAGEMENT )
    121          void MT_ZdoSetLinkKey(uint8 *pBuf);
    122          void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    123          void MT_ZdoGetLinkKey(uint8 *pBuf);
    124          #endif /* MT_SYS_KEY_MANAGEMENT */
    125          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    126          void MT_ZdoJoinReq(uint8 *pBuf);
    127          /* Call back function */
    128          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    129          void *MT_ZdoBeaconIndCB ( void *pStr );
    130          void *MT_ZdoJoinCnfCB ( void *pStr );
    131          #if defined (MT_ZDO_MGMT)
    132          void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    133          void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    134          void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    135          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    136          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    137          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    138          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    139          #endif /* MT_ZDO_MGMT */
    140          void MT_ZdoStartupFromApp(uint8 *pBuf);
    141          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    142          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    143          #endif /* MT_ZDO_FUNC */
    144          
    145          #if defined (MT_ZDO_CB_FUNC)
    146          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    147          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    148          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    149          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    150          void* MT_ZdoSrcRtgCB( void *pStr );
    151          static void *MT_ZdoConcentratorIndCB(void *pStr);
    152          #endif /* MT_ZDO_CB_FUNC */
    153          
    154          #if defined (MT_ZDO_FUNC)
    155          /***************************************************************************************************
    156           * @fn      MT_ZdoInit
    157           *
    158           * @brief   MT ZDO initialization
    159           *
    160           * @param   none
    161           *
    162           * @return  none
    163           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    165          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    166          #ifdef MT_ZDO_CB_FUNC
    167            /* Register with ZDO for indication callbacks */
    168            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
    169            ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
    170          #endif
    171          }
   \   000000   02....       LJMP      ?BRET
    172          
    173          /***************************************************************************************************
    174           * @fn      MT_ZdoCommandProcessing
    175           *
    176           * @brief
    177           *
    178           *   Process all the ZDO commands that are issued by test tool
    179           *
    180           * @param   pBuf - pointer to the msg buffer
    181           *
    182           *          | LEN  | CMD0  | CMD1  |  DATA  |
    183           *          |  1   |   1   |   1   |  0-255 |
    184           *
    185           * @return  status
    186           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    187          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    188          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    189            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV       R6,#0x0
    190          
    191            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   603F         JZ        ??MT_ZdoCommandProcessing_0
   \   000010   14           DEC       A
   \   000011   6041         JZ        ??MT_ZdoCommandProcessing_1
   \   000013   14           DEC       A
   \   000014   6043         JZ        ??MT_ZdoCommandProcessing_2
   \   000016   14           DEC       A
   \   000017   6045         JZ        ??MT_ZdoCommandProcessing_3
   \   000019   14           DEC       A
   \   00001A   6047         JZ        ??MT_ZdoCommandProcessing_4
   \   00001C   14           DEC       A
   \   00001D   6049         JZ        ??MT_ZdoCommandProcessing_5
   \   00001F   14           DEC       A
   \   000020   604B         JZ        ??MT_ZdoCommandProcessing_6
   \   000022   14           DEC       A
   \   000023   604D         JZ        ??MT_ZdoCommandProcessing_7
   \   000025   14           DEC       A
   \   000026   604F         JZ        ??MT_ZdoCommandProcessing_8
   \   000028   24FE         ADD       A,#-0x2
   \   00002A   6050         JZ        ??MT_ZdoCommandProcessing_9
   \   00002C   14           DEC       A
   \   00002D   6052         JZ        ??MT_ZdoCommandProcessing_10
   \   00002F   14           DEC       A
   \   000030   6054         JZ        ??MT_ZdoCommandProcessing_11
   \   000032   24EC         ADD       A,#-0x14
   \   000034   6055         JZ        ??MT_ZdoCommandProcessing_12
   \   000036   14           DEC       A
   \   000037   6057         JZ        ??MT_ZdoCommandProcessing_13
   \   000039   14           DEC       A
   \   00003A   6059         JZ        ??MT_ZdoCommandProcessing_14
   \   00003C   24FC         ADD       A,#-0x4
   \   00003E   605A         JZ        ??MT_ZdoCommandProcessing_15
   \   000040   14           DEC       A
   \   000041   605C         JZ        ??MT_ZdoCommandProcessing_16
   \   000043   24E9         ADD       A,#-0x17
   \   000045   6062         JZ        ??MT_ZdoCommandProcessing_17
   \   000047   14           DEC       A
   \   000048   6064         JZ        ??MT_ZdoCommandProcessing_18
   \   00004A   14           DEC       A
   \   00004B   6057         JZ        ??MT_ZdoCommandProcessing_19
   \   00004D   8064         SJMP      ??MT_ZdoCommandProcessing_20
    192            {
    193          #if defined ( ZDO_NWKADDR_REQUEST )
    194              case MT_ZDO_NWK_ADDR_REQ:
    195                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   00004F                ; Setup parameters for call to function MT_ZdoNWKAddressRequest
   \   00004F   12....       LCALL     `??MT_ZdoNWKAddressRequest::?relay`; Banked call to: MT_ZdoNWKAddressRequest
    196                break;
   \   000052   8061         SJMP      ??MT_ZdoCommandProcessing_21
    197          #endif
    198          
    199          #if defined ( ZDO_IEEEADDR_REQUEST )
    200              case MT_ZDO_IEEE_ADDR_REQ:
    201                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   000054                ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
   \   000054   12....       LCALL     `??MT_ZdoIEEEAddrRequest::?relay`; Banked call to: MT_ZdoIEEEAddrRequest
    202                break;
   \   000057   805C         SJMP      ??MT_ZdoCommandProcessing_21
    203          #endif
    204          
    205          #if defined ( ZDO_NODEDESC_REQUEST )
    206              case MT_ZDO_NODE_DESC_REQ:
    207                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   000059                ; Setup parameters for call to function MT_ZdoNodeDescRequest
   \   000059   12....       LCALL     `??MT_ZdoNodeDescRequest::?relay`; Banked call to: MT_ZdoNodeDescRequest
    208                break;
   \   00005C   8057         SJMP      ??MT_ZdoCommandProcessing_21
    209          #endif
    210          
    211          #if defined ( ZDO_POWERDESC_REQUEST )
    212              case MT_ZDO_POWER_DESC_REQ:
    213                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   00005E                ; Setup parameters for call to function MT_ZdoPowerDescRequest
   \   00005E   12....       LCALL     `??MT_ZdoPowerDescRequest::?relay`; Banked call to: MT_ZdoPowerDescRequest
    214                break;
   \   000061   8052         SJMP      ??MT_ZdoCommandProcessing_21
    215          #endif
    216          
    217          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    218              case MT_ZDO_SIMPLE_DESC_REQ:
    219                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   000063                ; Setup parameters for call to function MT_ZdoSimpleDescRequest
   \   000063   12....       LCALL     `??MT_ZdoSimpleDescRequest::?relay`; Banked call to: MT_ZdoSimpleDescRequest
    220                break;
   \   000066   804D         SJMP      ??MT_ZdoCommandProcessing_21
    221          #endif
    222          
    223          #if defined ( ZDO_ACTIVEEP_REQUEST )
    224              case MT_ZDO_ACTIVE_EP_REQ:
    225                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   000068                ; Setup parameters for call to function MT_ZdoActiveEpRequest
   \   000068   12....       LCALL     `??MT_ZdoActiveEpRequest::?relay`; Banked call to: MT_ZdoActiveEpRequest
    226                break;
   \   00006B   8048         SJMP      ??MT_ZdoCommandProcessing_21
    227          #endif
    228          
    229          #if defined ( ZDO_MATCH_REQUEST )
    230              case MT_ZDO_MATCH_DESC_REQ:
    231                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   00006D                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   00006D   12....       LCALL     `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
    232                break;
   \   000070   8043         SJMP      ??MT_ZdoCommandProcessing_21
    233          #endif
    234          
    235          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    236              case MT_ZDO_COMPLEX_DESC_REQ:
    237                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   000072                ; Setup parameters for call to function MT_ZdoComplexDescRequest
   \   000072   12....       LCALL     `??MT_ZdoComplexDescRequest::?relay`; Banked call to: MT_ZdoComplexDescRequest
    238                break;
   \   000075   803E         SJMP      ??MT_ZdoCommandProcessing_21
    239          #endif
    240          
    241          #if defined ( ZDO_USERDESC_REQUEST )
    242              case MT_ZDO_USER_DESC_REQ:
    243                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   000077                ; Setup parameters for call to function MT_ZdoUserDescRequest
   \   000077   12....       LCALL     `??MT_ZdoUserDescRequest::?relay`; Banked call to: MT_ZdoUserDescRequest
    244                break;
   \   00007A   8039         SJMP      ??MT_ZdoCommandProcessing_21
    245          #endif
    246          
    247          #if defined ( ZDO_ENDDEVICE_ANNCE )
    248              case MT_ZDO_END_DEV_ANNCE:
    249                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   00007C                ; Setup parameters for call to function MT_ZdoEndDevAnnce
   \   00007C   12....       LCALL     `??MT_ZdoEndDevAnnce::?relay`; Banked call to: MT_ZdoEndDevAnnce
    250                break;
   \   00007F   8034         SJMP      ??MT_ZdoCommandProcessing_21
    251          #endif
    252          
    253          #if defined ( ZDO_USERDESCSET_REQUEST )
    254              case MT_ZDO_USER_DESC_SET:
    255                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   000081                ; Setup parameters for call to function MT_ZdoUserDescSet
   \   000081   12....       LCALL     `??MT_ZdoUserDescSet::?relay`; Banked call to: MT_ZdoUserDescSet
    256                break;
   \   000084   802F         SJMP      ??MT_ZdoCommandProcessing_21
    257          #endif
    258          
    259          #if defined ( ZDO_SERVERDISC_REQUEST )
    260              case MT_ZDO_SERVICE_DISC_REQ:
    261                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   000086                ; Setup parameters for call to function MT_ZdoServiceDiscRequest
   \   000086   12....       LCALL     `??MT_ZdoServiceDiscRequest::?relay`; Banked call to: MT_ZdoServiceDiscRequest
    262                break;
   \   000089   802A         SJMP      ??MT_ZdoCommandProcessing_21
    263          #endif
    264          
    265          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    266              case MT_ZDO_END_DEV_BIND_REQ:
    267                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   00008B                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   00008B   12....       LCALL     `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
    268                break;
   \   00008E   8025         SJMP      ??MT_ZdoCommandProcessing_21
    269          #endif
    270          
    271          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    272              case MT_ZDO_BIND_REQ:
    273                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   000090                ; Setup parameters for call to function MT_ZdoBindRequest
   \   000090   12....       LCALL     `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
    274                break;
   \   000093   8020         SJMP      ??MT_ZdoCommandProcessing_21
    275          #endif
    276          
    277          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    278              case MT_ZDO_UNBIND_REQ:
    279                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   000095                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   000095   12....       LCALL     `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
    280                break;
   \   000098   801B         SJMP      ??MT_ZdoCommandProcessing_21
    281          #endif
    282          
    283          #if defined ( MT_SYS_KEY_MANAGEMENT )
    284              case MT_ZDO_SET_LINK_KEY:
    285                MT_ZdoSetLinkKey(pBuf);
    286                break;
    287          
    288              case MT_ZDO_REMOVE_LINK_KEY:
    289                MT_ZdoRemoveLinkKey(pBuf);
    290                break;
    291          
    292              case MT_ZDO_GET_LINK_KEY:
    293                MT_ZdoGetLinkKey(pBuf);
    294                break;
    295          #endif // MT_SYS_KEY_MANAGEMENT
    296          
    297          #if defined ( ZDO_MANUAL_JOIN )
    298              case MT_ZDO_NWK_DISCOVERY_REQ:
    299                MT_ZdoNetworkDiscoveryReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   00009A                ; Setup parameters for call to function MT_ZdoNetworkDiscoveryReq
   \   00009A   12....       LCALL     `??MT_ZdoNetworkDiscoveryReq::?relay`; Banked call to: MT_ZdoNetworkDiscoveryReq
    300                break;
   \   00009D   8016         SJMP      ??MT_ZdoCommandProcessing_21
    301          
    302              case MT_ZDO_JOIN_REQ:
    303                MT_ZdoJoinReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   00009F                ; Setup parameters for call to function MT_ZdoJoinReq
   \   00009F   12....       LCALL     `??MT_ZdoJoinReq::?relay`; Banked call to: MT_ZdoJoinReq
    304                break;
   \   0000A2   8011         SJMP      ??MT_ZdoCommandProcessing_21
    305          #endif
    306          
    307          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    308              case MT_ZDO_MGMT_NWKDISC_REQ:
    309                MT_ZdoMgmtNwkDiscRequest(pBuf);
    310                break;
    311          #endif
    312          
    313          #if defined ( ZDO_MGMT_LQI_REQUEST )
    314              case MT_ZDO_MGMT_LQI_REQ:
    315                MT_ZdoMgmtLqiRequest(pBuf);
    316                break;
    317          #endif
    318          
    319          #if defined ( ZDO_MGMT_RTG_REQUEST )
    320              case MT_ZDO_MGMT_RTG_REQ:
    321                MT_ZdoMgmtRtgRequest(pBuf);
    322                break;
    323          #endif
    324          
    325          #if defined ( ZDO_MGMT_BIND_REQUEST )
    326              case MT_ZDO_MGMT_BIND_REQ:
    327                MT_ZdoMgmtBindRequest(pBuf);
    328                break;
    329          #endif
    330          
    331          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    332              case MT_ZDO_MGMT_LEAVE_REQ:
    333                MT_ZdoMgmtLeaveRequest(pBuf);
    334                break;
    335          #endif
    336          
    337          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    338              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    339                MT_ZdoMgmtDirectJoinRequest(pBuf);
    340                break;
    341          #endif
    342          
    343          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    344              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    345                MT_ZdoMgmtPermitJoinRequest(pBuf);
    346                break;
    347          #endif
    348          
    349          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    350              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    351                MT_ZdoMgmtNwkUpdateRequest(pBuf);
    352                break;
    353          #endif
    354          
    355          #if defined ( ZDO_NETWORKSTART_REQUEST )
    356              case MT_ZDO_STARTUP_FROM_APP:
    357                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_19:
   \   0000A4                ; Setup parameters for call to function MT_ZdoStartupFromApp
   \   0000A4   12....       LCALL     `??MT_ZdoStartupFromApp::?relay`; Banked call to: MT_ZdoStartupFromApp
    358                break;
   \   0000A7   800C         SJMP      ??MT_ZdoCommandProcessing_21
    359          #endif
    360          
    361              case MT_ZDO_MSG_CB_REGISTER:
    362                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_17:
   \   0000A9                ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
   \   0000A9   12....       LCALL     `??MT_ZdoRegisterForZDOMsg::?relay`; Banked call to: MT_ZdoRegisterForZDOMsg
    363                break;
   \   0000AC   8007         SJMP      ??MT_ZdoCommandProcessing_21
    364          
    365              case MT_ZDO_MSG_CB_REMOVE:
    366                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_18:
   \   0000AE                ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
   \   0000AE   12....       LCALL     `??MT_ZdoRemoveRegisteredCB::?relay`; Banked call to: MT_ZdoRemoveRegisteredCB
    367                break;
   \   0000B1   8002         SJMP      ??MT_ZdoCommandProcessing_21
    368          
    369              default:
    370                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_20:
   \   0000B3   7E02         MOV       R6,#0x2
    371                break;
    372            }
    373          
    374            return status;
   \                     ??MT_ZdoCommandProcessing_21:
   \   0000B5   EE           MOV       A,R6
   \   0000B6   F9           MOV       R1,A
   \   0000B7   02....       LJMP      ??Subroutine67_0 & 0xFFFF
    375          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    376          
    377          /***************************************************************************************************
    378           * @fn      MT_ZdoNwkAddrReq
    379           *
    380           * @brief   Handle a nwk address request.
    381           *
    382           * @param   pData  - MT message data
    383           *
    384           * @return  void
    385           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    386          void MT_ZdoNWKAddressRequest(uint8 *pBuf)
   \                     MT_ZdoNWKAddressRequest:
    387          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    388            uint8 cmdId;
    389            uint8 retValue;
    390            uint8 reqType;
    391            uint8 startIndex;
    392            uint8 *pExtAddr;
    393          
    394            /* parse header */
    395            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ??Subroutine62_0 & 0xFFFF
    396            pBuf += MT_RPC_FRAME_HDR_SZ;
    397          
    398            /* parse parameters */
    399            pExtAddr = pBuf;
   \                     ??CrossCallReturnLabel_124:
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   E4           CLR       A
   \   000010   3B           ADDC      A,R3
   \   000011   F5..         MOV       ?V1,A
    400            pBuf += Z_EXTADDR_LEN;
   \   000013   E5..         MOV       A,?V0
   \   000015   2408         ADD       A,#0x8
   \   000017   FA           MOV       R2,A
   \   000018   E4           CLR       A
   \   000019   35..         ADDC      A,?V1
   \   00001B   FB           MOV       R3,A
    401          
    402            /* Request type */
    403            reqType = *pBuf++;
    404          
    405            /* Start index */
    406            startIndex = *pBuf;
    407          
    408            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
   \   00001C                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00001C   7D00         MOV       R5,#0x0
   \   00001E   8A82         MOV       DPL,R2
   \   000020   F583         MOV       DPH,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FC           MOV       R4,A
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
   \   00002B   AA..         MOV       R2,?V0
   \   00002D   AB..         MOV       R3,?V1
   \   00002F   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000032                REQUIRE ?Subroutine1
   \   000032                ; // Fall through to label ?Subroutine1
    409          
    410            /* Build and send back the response */
    411            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    412          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   7401         MOV       A,#0x1
   \   000005   12....       LCALL     ?DEALLOC_XSTACK8
   \   000008   7F02         MOV       R7,#0x2
   \   00000A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004                REQUIRE ??Subroutine63_0
   \   000004                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FE           MOV       R6,A
   \   000004   EA           MOV       A,R2
   \   000005   2403         ADD       A,#0x3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC..         MOV       R4,?XSP + 0
   \   00000A   AD..         MOV       R5,?XSP + 1
   \   00000C   7B01         MOV       R3,#0x1
   \   00000E   EE           MOV       A,R6
   \   00000F   FA           MOV       R2,A
   \   000010   7965         MOV       R1,#0x65
   \   000012   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000015   22           RET
    413          
    414          /***************************************************************************************************
    415           * @fn      MT_ZdoIEEEAddrRequest
    416           *
    417           * @brief   Handle a IEEE address request.
    418           *
    419           * @param   pData  - MT message data
    420           *
    421           * @return  void
    422           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    423          void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
   \                     MT_ZdoIEEEAddrRequest:
    424          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    425            uint8 cmdId;
    426            uint8 retValue;
    427            uint16 shortAddr;
    428            uint8 reqType;
    429            uint8 startIndex;
    430          
    431            /* parse header */
    432            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
    433            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_11:
   \   00000D   5001         JNC       ??MT_ZdoIEEEAddrRequest_0
   \   00000F   0B           INC       R3
    434          
    435            /* Dev address */
    436            shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
    437            pBuf += 2;
    438          
    439            /* request type */
    440            reqType = *pBuf++;
    441          
    442            /* start index */
    443            startIndex = *pBuf;
    444          
    445            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
   \                     ??MT_ZdoIEEEAddrRequest_0:
   \   000010                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000010   7D00         MOV       R5,#0x0
   \   000012   F582         MOV       DPL,A
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FC           MOV       R4,A
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00002A   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   00002D   80..         SJMP      ?Subroutine1
    446          
    447            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    448          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FE           MOV       R6,A
   \   000008   EA           MOV       A,R2
   \   000009   2403         ADD       A,#0x3
   \   00000B   FA           MOV       R2,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FB           MOV       R3,A
   \   000006   AA..         MOV       R2,?V0
   \   000008   22           RET
    449          
    450          /***************************************************************************************************
    451           * @fn      MT_ZdoNodeDescRequest
    452           *
    453           * @brief   Handle a Node Descriptor request.
    454           *
    455           * @param   pData  - MT message data
    456           *
    457           * @return  void
    458           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void MT_ZdoNodeDescRequest (uint8 *pBuf)
   \                     MT_ZdoNodeDescRequest:
    460          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    461            uint8 cmdId;
    462            uint8 retValue;
    463            zAddrType_t destAddr;
    464            uint16 shortAddr;
    465          
    466            /* parse header */
    467            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
    468            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_12:
   \   00000D   5001         JNC       ??MT_ZdoNodeDescRequest_0
   \   00000F   0B           INC       R3
    469          
    470            /* Destination address */
    471            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNodeDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine8 & 0xFFFF
    472            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_4:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    473            pBuf += 2;
   \                     ??CrossCallReturnLabel_55:
   \   00001E   5001         JNC       ??MT_ZdoNodeDescRequest_1
   \   000020   0B           INC       R3
    474          
    475            /* Network address of interest */
    476            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    477            pBuf += 2;
    478          
    479            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoNodeDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   7902         MOV       R1,#0x2
   \   00002B   8A82         MOV       DPL,R2
   \   00002D   8B83         MOV       DPH,R3
   \   00002F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000032   E9           MOV       A,R1
   \   000033   02....       LJMP      ??Subroutine64_0 & 0xFFFF
    480          
    481            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    482          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EC           MOV       A,R4
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EA           MOV       A,R2
   \   000006   2402         ADD       A,#0x2
   \   000008   FA           MOV       R2,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003   8A82         MOV       DPL,R2
   \   000005   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000008   F9           MOV       R1,A
   \   000009   7401         MOV       A,#0x1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   8B83         MOV       DPH,R3
   \   000002                REQUIRE ??Subroutine61_0
   \   000002                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   CA           XCH       A,R2
   \   000006   FB           MOV       R3,A
   \   000007   EC           MOV       A,R4
   \   000008   2A           ADD       A,R2
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   FD           MOV       R5,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   12....       LCALL     ?XSTACK_DISP101_8
   \   000003   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000006                REQUIRE ??Subroutine65_0
   \   000006                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000008   740A         MOV       A,#0xa
   \   00000A                REQUIRE ??Subroutine66_0
   \   00000A                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine67_0
   \   000003                ; // Fall through to label ??Subroutine67_0
    483          
    484          /***************************************************************************************************
    485           * @fn      MT_ZdoPowerDescRequest
    486           *
    487           * @brief   Handle a Power Descriptor request.
    488           *
    489           * @param   pData  - MT message data
    490           *
    491           * @return  void
    492           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    493          void MT_ZdoPowerDescRequest(uint8 *pBuf)
   \                     MT_ZdoPowerDescRequest:
    494          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    495            uint8 cmdId;
    496            uint8 retValue;
    497            zAddrType_t destAddr;
    498            uint16 shortAddr;
    499          
    500            /* parse header */
    501            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
    502            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_13:
   \   00000D   5001         JNC       ??MT_ZdoPowerDescRequest_0
   \   00000F   0B           INC       R3
    503          
    504            /* Dev address */
    505            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoPowerDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine8 & 0xFFFF
    506            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_5:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    507            pBuf += 2;
   \                     ??CrossCallReturnLabel_56:
   \   00001E   5001         JNC       ??MT_ZdoPowerDescRequest_1
   \   000020   0B           INC       R3
    508          
    509            /* Network address of interest */
    510            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    511            pBuf += 2;
    512          
    513            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoPowerDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   7903         MOV       R1,#0x3
   \   00002B   02....       LJMP      ?Subroutine0 & 0xFFFF
    514          
    515            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    516          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000003                REQUIRE ??Subroutine64_0
   \   000003                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000007   7402         MOV       A,#0x2
   \   000009   22           RET
    517          
    518          /***************************************************************************************************
    519           * @fn      MT_ZdoSimpleDescRequest
    520           *
    521           * @brief   Handle a Simple Descriptor request.
    522           *
    523           * @param   pBuf  - MT message data
    524           *
    525           * @return  void
    526           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    527          void MT_ZdoSimpleDescRequest(uint8 *pBuf)
   \                     MT_ZdoSimpleDescRequest:
    528          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    529            uint8 cmdId;
    530            uint8 retValue;
    531            uint8 epInt;
    532            zAddrType_t destAddr;
    533            uint16 shortAddr;
    534          
    535            /* parse header */
    536            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
    537            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_14:
   \   00000D   5001         JNC       ??MT_ZdoSimpleDescRequest_0
   \   00000F   0B           INC       R3
    538          
    539            /* Dev address */
    540            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSimpleDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine8 & 0xFFFF
    541            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_6:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    542            pBuf += 2;
   \                     ??CrossCallReturnLabel_57:
   \   00001E   5001         JNC       ??MT_ZdoSimpleDescRequest_1
   \   000020   0B           INC       R3
    543          
    544            /* Network address of interest */
    545            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    546            pBuf += 2;
    547          
    548            /* endpoint/interface */
    549            epInt = *pBuf++;
    550          
    551            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
   \                     ??MT_ZdoSimpleDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   8A82         MOV       DPL,R2
   \   00002B   8B83         MOV       DPH,R3
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000034   12....       LCALL     ?XSTACK_DISP101_8
   \   000037   12....       LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   00003A   02....       LJMP      ??Subroutine65_0 & 0xFFFF
    552          
    553            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    554          }
    555          
    556          /***************************************************************************************************
    557           * @fn      MT_ZdoActiveEpRequest
    558           *
    559           * @brief   Handle a Active EP request.
    560           *
    561           * @param   pBuf  - MT message data
    562           *
    563           * @return  void
    564           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    565          void MT_ZdoActiveEpRequest(uint8 *pBuf)
   \                     MT_ZdoActiveEpRequest:
    566          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    567            uint8 cmdId;
    568            uint8 retValue;
    569            zAddrType_t destAddr;
    570            uint16 shortAddr;
    571          
    572            /* parse header */
    573            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
    574            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_15:
   \   00000D   5001         JNC       ??MT_ZdoActiveEpRequest_0
   \   00000F   0B           INC       R3
    575          
    576            /* Dev address */
    577            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoActiveEpRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine8 & 0xFFFF
    578            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_7:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    579            pBuf += 2;
   \                     ??CrossCallReturnLabel_58:
   \   00001E   5001         JNC       ??MT_ZdoActiveEpRequest_1
   \   000020   0B           INC       R3
    580          
    581            /* Network address of interest */
    582            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    583            pBuf += 2;
    584          
    585            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoActiveEpRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   7905         MOV       R1,#0x5
   \   00002B   02....       LJMP      ?Subroutine0 & 0xFFFF
    586          
    587            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    588          }
    589          
    590          /***************************************************************************************************
    591           * @fn      MT_ZdoMatchDescRequest
    592           *
    593           * @brief   Handle a Match Descriptor request.
    594           *
    595           * @param   pBuf  - MT message data
    596           *
    597           * @return  void
    598           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    599          void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV       A,#-0x4a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   F9           MOV       R1,A
    601            uint8 cmdId;
    602            uint8 retValue = 0;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
    603            uint8 i, numInClusters, numOutClusters;
    604            uint16 profileId;
    605            zAddrType_t destAddr;
    606            uint16 shortAddr;
    607            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    608          
    609            /* parse header */
    610            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000014   12....       LCALL     ??Subroutine62_0 & 0xFFFF
    611            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_125:
   \   000017   F8           MOV       R0,A
   \   000018   5001         JNC       ??MT_ZdoMatchDescRequest_0
   \   00001A   09           INC       R1
    612          
    613            /* Dev address */
    614            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   00001B   7409         MOV       A,#0x9
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?Subroutine36 & 0xFFFF
    615            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_66:
   \   000025   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000028   FB           MOV       R3,A
   \   000029   7401         MOV       A,#0x1
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   EC           MOV       A,R4
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   EB           MOV       A,R3
   \   000032   F0           MOVX      @DPTR,A
    616            pBuf += 2;
   \   000033   E8           MOV       A,R0
   \   000034   2402         ADD       A,#0x2
   \   000036   F8           MOV       R0,A
   \   000037   5001         JNC       ??MT_ZdoMatchDescRequest_1
   \   000039   09           INC       R1
    617          
    618            /* Network address of interest */
    619            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_1:
   \   00003A   F582         MOV       DPL,A
   \   00003C   8983         MOV       DPH,R1
   \   00003E   12....       LCALL     ?Subroutine16 & 0xFFFF
    620            pBuf += 2;
   \                     ??CrossCallReturnLabel_29:
   \   000041   E8           MOV       A,R0
   \   000042   2402         ADD       A,#0x2
   \   000044   F8           MOV       R0,A
   \   000045   5001         JNC       ??MT_ZdoMatchDescRequest_2
   \   000047   09           INC       R1
    621          
    622            /* Profile ID */
    623            profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_2:
   \   000048   F582         MOV       DPL,A
   \   00004A   8983         MOV       DPH,R1
   \   00004C   12....       LCALL     ?Subroutine17 & 0xFFFF
    624            pBuf += 2;
    625          
    626            /* NumInClusters */
    627            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_31:
   \   00004F   8882         MOV       DPL,R0
   \   000051   8983         MOV       DPH,R1
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   FF           MOV       R7,A
   \   000057   E8           MOV       A,R0
   \   000058   2403         ADD       A,#0x3
   \   00005A   F8           MOV       R0,A
   \   00005B   5001         JNC       ??MT_ZdoMatchDescRequest_3
   \   00005D   09           INC       R1
    628            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \                     ??MT_ZdoMatchDescRequest_3:
   \   00005E   EF           MOV       A,R7
   \   00005F   C3           CLR       C
   \   000060   9411         SUBB      A,#0x11
   \   000062   502F         JNC       ??MT_ZdoMatchDescRequest_4
    629            {
    630              /* IN clusters */
    631              for ( i = 0; i < numInClusters; i++ )
   \   000064   75..00       MOV       ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_5:
   \   000067   E5..         MOV       A,?V3
   \   000069   C3           CLR       C
   \   00006A   9F           SUBB      A,R7
   \   00006B   502F         JNC       ??MT_ZdoMatchDescRequest_6
    632              {
    633                inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   00006D   8882         MOV       DPL,R0
   \   00006F   8983         MOV       DPH,R1
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F5..         MOV       ?V4,A
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F5..         MOV       ?V1,A
   \   000078   E5..         MOV       A,?V4
   \   00007A   2400         ADD       A,#0x0
   \   00007C   E4           CLR       A
   \   00007D   35..         ADDC      A,?V1
   \   00007F   F5..         MOV       ?V5,A
   \   000081   12....       LCALL     ?Subroutine41 & 0xFFFF
    634                pBuf += 2;
    635              }
   \                     ??CrossCallReturnLabel_81:
   \   000084   742A         MOV       A,#0x2a
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00008C   5001         JNC       ??MT_ZdoMatchDescRequest_7
   \   00008E   09           INC       R1
   \                     ??MT_ZdoMatchDescRequest_7:
   \   00008F   05..         INC       ?V3
   \   000091   80D4         SJMP      ??MT_ZdoMatchDescRequest_5
    636            }
    637            else
    638            {
    639              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_4:
   \   000093   85..82       MOV       DPL,?XSP + 0
   \   000096   85..83       MOV       DPH,?XSP + 1
   \   000099   7480         MOV       A,#-0x80
   \   00009B   F0           MOVX      @DPTR,A
    640            }
    641          
    642            /* NumOutClusters */
    643            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_6:
   \   00009C   8882         MOV       DPL,R0
   \   00009E   8983         MOV       DPH,R1
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   F5..         MOV       ?V2,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   A882         MOV       R0,DPL
   \   0000A6   A983         MOV       R1,DPH
    644            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   0000A8   C3           CLR       C
   \   0000A9   9411         SUBB      A,#0x11
   \   0000AB   5023         JNC       ??MT_ZdoMatchDescRequest_8
    645            {
    646              /* OUT Clusters */
    647              for ( i = 0; i < numOutClusters; i++ )
   \   0000AD   75..00       MOV       ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_9:
   \   0000B0   E5..         MOV       A,?V3
   \   0000B2   C3           CLR       C
   \   0000B3   95..         SUBB      A,?V2
   \   0000B5   5023         JNC       ??MT_ZdoMatchDescRequest_10
    648              {
    649                outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   0000B7   8882         MOV       DPL,R0
   \   0000B9   8983         MOV       DPH,R1
   \   0000BB   12....       LCALL     ?Subroutine48 & 0xFFFF
    650                pBuf += 2;
    651              }
   \                     ??CrossCallReturnLabel_96:
   \   0000BE   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000C1   740A         MOV       A,#0xa
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000C9   5001         JNC       ??MT_ZdoMatchDescRequest_11
   \   0000CB   09           INC       R1
   \                     ??MT_ZdoMatchDescRequest_11:
   \   0000CC   05..         INC       ?V3
   \   0000CE   80E0         SJMP      ??MT_ZdoMatchDescRequest_9
    652            }
    653            else
    654            {
    655              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_8:
   \   0000D0   85..82       MOV       DPL,?XSP + 0
   \   0000D3   85..83       MOV       DPH,?XSP + 1
   \   0000D6   7480         MOV       A,#-0x80
   \   0000D8   8055         SJMP      ??MT_ZdoMatchDescRequest_12
    656            }
    657          
    658            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_10:
   \   0000DA   85..82       MOV       DPL,?XSP + 0
   \   0000DD   85..83       MOV       DPH,?XSP + 1
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   704D         JNZ       ??MT_ZdoMatchDescRequest_13
    659            {
    660              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    661                                                 inClusters, numOutClusters, outClusters, 0);
   \   0000E3                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000E3   75..00       MOV       ?V0,#0x0
   \   0000E6   78..         MOV       R0,#?V0
   \   0000E8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EB   740B         MOV       A,#0xb
   \   0000ED   12....       LCALL     ?XSTACK_DISP100_8
   \   0000F0   88..         MOV       ?V0,R0
   \   0000F2   89..         MOV       ?V1,R1
   \   0000F4   78..         MOV       R0,#?V0
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F9   E5..         MOV       A,?V2
   \   0000FB   F5..         MOV       ?V0,A
   \   0000FD   78..         MOV       R0,#?V0
   \   0000FF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000102   742E         MOV       A,#0x2e
   \   000104   12....       LCALL     ?XSTACK_DISP100_8
   \   000107   88..         MOV       ?V0,R0
   \   000109   89..         MOV       ?V1,R1
   \   00010B   78..         MOV       R0,#?V0
   \   00010D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000110   8A..         MOV       ?V0,R2
   \   000112   8B..         MOV       ?V1,R3
   \   000114   78..         MOV       R0,#?V0
   \   000116   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000119   EF           MOV       A,R7
   \   00011A   F9           MOV       R1,A
   \   00011B   7409         MOV       A,#0x9
   \   00011D   12....       LCALL     ?XSTACK_DISP101_8
   \   000120   12....       LCALL     `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   000123   7408         MOV       A,#0x8
   \   000125   12....       LCALL     ?DEALLOC_XSTACK8
   \   000128   E9           MOV       A,R1
   \   000129   85..82       MOV       DPL,?XSP + 0
   \   00012C   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoMatchDescRequest_12:
   \   00012F   F0           MOVX      @DPTR,A
    662            }
    663          
    664            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_13:
   \   000130                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000130   AC..         MOV       R4,?XSP + 0
   \   000132   AD..         MOV       R5,?XSP + 1
   \   000134   7B01         MOV       R3,#0x1
   \   000136   EE           MOV       A,R6
   \   000137   FA           MOV       R2,A
   \   000138   7965         MOV       R1,#0x65
   \   00013A   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    665          }
   \   00013D   744A         MOV       A,#0x4a
   \   00013F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000142                REQUIRE ?Subroutine2
   \   000142                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E5..         MOV       A,?V3
   \   000002   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   E8           MOV       A,R0
   \   000004   2402         ADD       A,#0x2
   \   000006   F8           MOV       R0,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E582         MOV       A,DPL
   \   000002   25..         ADD       A,?V0
   \   000004   F582         MOV       DPL,A
   \   000006   E583         MOV       A,DPH
   \   000008   35..         ADDC      A,?V1
   \   00000A   F583         MOV       DPH,A
   \   00000C   E5..         MOV       A,?V4
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   E5..         MOV       A,?V5
   \   000012   F0           MOVX      @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F5..         MOV       ?V0,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   F5..         MOV       ?V1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   E5..         MOV       A,?V0
   \   000009   F5..         MOV       ?V4,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET
    666          
    667          /***************************************************************************************************
    668           * @fn      MT_ZdoComplexDescRequest
    669           *
    670           * @brief   Handle a Complex Descriptor request.
    671           *
    672           * @param   pBuf  - MT message data
    673           *
    674           * @return  void
    675           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    676          void MT_ZdoComplexDescRequest(uint8 *pBuf)
   \                     MT_ZdoComplexDescRequest:
    677          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    678            uint8 cmdId;
    679            uint8 retValue;
    680            zAddrType_t destAddr;
    681            uint16 shortAddr;
    682          
    683            /* parse header */
    684            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
    685            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_16:
   \   00000D   5001         JNC       ??MT_ZdoComplexDescRequest_0
   \   00000F   0B           INC       R3
    686          
    687            /* Dev address */
    688            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoComplexDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine8 & 0xFFFF
    689            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_8:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    690            pBuf += 2;
   \                     ??CrossCallReturnLabel_59:
   \   00001E   5001         JNC       ??MT_ZdoComplexDescRequest_1
   \   000020   0B           INC       R3
    691          
    692            /* Network address of interest */
    693            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    694            pBuf += 2;
    695          
    696            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoComplexDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   7910         MOV       R1,#0x10
   \   00002B   02....       LJMP      ?Subroutine0 & 0xFFFF
    697          
    698            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    699          }
    700          
    701          /***************************************************************************************************
    702           * @fn      MT_ZdoUserDescRequest
    703           *
    704           * @brief   Handle a User Descriptor request.
    705           *
    706           * @param   pBuf  - MT message data
    707           *
    708           * @return  void
    709           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    710          void MT_ZdoUserDescRequest(uint8 *pBuf)
   \                     MT_ZdoUserDescRequest:
    711          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    712            uint8 cmdId;
    713            uint8 retValue;
    714            zAddrType_t destAddr;
    715            uint16 shortAddr;
    716          
    717            /* parse header */
    718            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
    719            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_17:
   \   00000D   5001         JNC       ??MT_ZdoUserDescRequest_0
   \   00000F   0B           INC       R3
    720          
    721            /* Dev address */
    722            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine8 & 0xFFFF
    723            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_9:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
    724            pBuf += 2;
   \                     ??CrossCallReturnLabel_60:
   \   00001E   5001         JNC       ??MT_ZdoUserDescRequest_1
   \   000020   0B           INC       R3
    725          
    726            /* Network address of interest */
    727            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
    728            pBuf += 2;
    729          
    730            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoUserDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV       ?V0,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000029   7911         MOV       R1,#0x11
   \   00002B   02....       LJMP      ?Subroutine0 & 0xFFFF
    731          
    732            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    733          }
    734          
    735          /***************************************************************************************************
    736           * @fn      MT_ZdoEndDevAnnce
    737           *
    738           * @brief   Handle a End Device Announce Descriptor request.
    739           *
    740           * @param   pBuf  - MT message data
    741           *
    742           * @return  void
    743           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    744          void MT_ZdoEndDevAnnce(uint8 *pBuf)
   \                     MT_ZdoEndDevAnnce:
    745          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FD           MOV       R5,A
    746            uint8 cmdId;
    747            uint8 retValue;
    748            uint16 shortAddr;
    749            uint8 *pIEEEAddr;
    750          
    751            /* parse header */
    752            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   F583         MOV       DPH,A
   \   000010   12....       LCALL     ??Subroutine63_0 & 0xFFFF
    753            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_127:
   \   000013   FC           MOV       R4,A
   \   000014   5001         JNC       ??MT_ZdoEndDevAnnce_0
   \   000016   0D           INC       R5
    754          
    755            /* network address */
    756            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevAnnce_0:
   \   000017   F582         MOV       DPL,A
   \   000019   8D83         MOV       DPH,R5
   \   00001B   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00001E   E4           CLR       A
   \   00001F   39           ADDC      A,R1
   \   000020   FB           MOV       R3,A
    757            pBuf += 2;
   \   000021   EC           MOV       A,R4
   \   000022   2402         ADD       A,#0x2
   \   000024   FC           MOV       R4,A
   \   000025   5001         JNC       ??MT_ZdoEndDevAnnce_1
   \   000027   0D           INC       R5
    758          
    759            /* extended address */
    760            pIEEEAddr = pBuf;
    761            pBuf += Z_EXTADDR_LEN;
    762          
    763            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
   \                     ??MT_ZdoEndDevAnnce_1:
   \   000028                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000028   88..         MOV       ?V0,R0
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002F   8C82         MOV       DPL,R4
   \   000031   8D83         MOV       DPH,R5
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F9           MOV       R1,A
   \   00003D   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000040   7401         MOV       A,#0x1
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   02....       LJMP      ?Subroutine5 & 0xFFFF
    764          
    765            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    766          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002                REQUIRE ??Subroutine68_0
   \   000002                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   C8           XCH       A,R0
   \   000005   F9           MOV       R1,A
   \   000006   EA           MOV       A,R2
   \   000007   28           ADD       A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003                REQUIRE ??Subroutine70_0
   \   000003                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   7401         MOV       A,#0x1
   \   000002   02....       LJMP      ??Subroutine66_0 & 0xFFFF
    767          
    768          /***************************************************************************************************
    769           * @fn      MT_ZdoUserDescSet
    770           *
    771           * @brief   Handle a User Descriptor Set.
    772           *
    773           * @param   pBuf  - MT message data
    774           *
    775           * @return  void
    776           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   F582         MOV       DPL,A
   \   000002                REQUIRE ??Subroutine60_0
   \   000002                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    777          void MT_ZdoUserDescSet(uint8 *pBuf)
   \                     MT_ZdoUserDescSet:
    778          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV       A,#-0x1b
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    779            uint8 cmdId;
    780            uint8 retValue;
    781            zAddrType_t destAddr;
    782            uint16 shortAddr;
    783            UserDescriptorFormat_t userDesc;
    784          
    785            /* parse header */
    786            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V3,A
    787            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV       A,R2
   \   000014   2403         ADD       A,#0x3
   \   000016   FA           MOV       R2,A
   \   000017   5001         JNC       ??MT_ZdoUserDescSet_0
   \   000019   0B           INC       R3
    788          
    789            /* Dev address */
    790            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescSet_0:
   \   00001A   7409         MOV       A,#0x9
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   12....       LCALL     ?Subroutine8 & 0xFFFF
    791            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_10:
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine31 & 0xFFFF
    792            pBuf += 2;
   \                     ??CrossCallReturnLabel_61:
   \   000028   5001         JNC       ??MT_ZdoUserDescSet_1
   \   00002A   0B           INC       R3
    793          
    794            /* Network address of interest */
    795            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUserDescSet_1:
   \   00002B   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00002E   FE           MOV       R6,A
   \   00002F   E4           CLR       A
   \   000030   39           ADDC      A,R1
   \   000031   FF           MOV       R7,A
    796            pBuf += 2;
    797          
    798            /* User descriptor */
    799            userDesc.len = *pBuf++;
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   C0E0         PUSH      A
   \   00003B   740A         MOV       A,#0xa
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   D0E0         POP       A
   \   000042   F0           MOVX      @DPTR,A
    800            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
   \   000043                ; Setup parameters for call to function osal_memcpy
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A982         MOV       R1,DPL
   \   00004C   AA83         MOV       R2,DPH
   \   00004E   89..         MOV       ?V0,R1
   \   000050   8A..         MOV       ?V1,R2
   \   000052   88..         MOV       ?V2,R0
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000059   740D         MOV       A,#0xd
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   FC           MOV       R4,A
   \   000060   7D00         MOV       R5,#0x0
   \   000062   740E         MOV       A,#0xe
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   AA82         MOV       R2,DPL
   \   000069   AB83         MOV       R3,DPH
   \   00006B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006E   7403         MOV       A,#0x3
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
    801            pBuf += 16;
    802          
    803            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
   \   000073                ; Setup parameters for call to function ZDP_UserDescSet
   \   000073   740A         MOV       A,#0xa
   \   000075   12....       LCALL     ?XSTACK_DISP100_8
   \   000078   88..         MOV       ?V0,R0
   \   00007A   89..         MOV       ?V1,R1
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   7900         MOV       R1,#0x0
   \   000083   EE           MOV       A,R6
   \   000084   FC           MOV       R4,A
   \   000085   EF           MOV       A,R7
   \   000086   FD           MOV       R5,A
   \   000087   7403         MOV       A,#0x3
   \   000089   12....       LCALL     ?XSTACK_DISP101_8
   \   00008C   12....       LCALL     `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
   \   00008F   7402         MOV       A,#0x2
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
   \   000094   12....       LCALL     ?Subroutine33 & 0xFFFF
    804          
    805            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    806          }
   \                     ??CrossCallReturnLabel_62:
   \   000097   741B         MOV       A,#0x1b
   \   000099                REQUIRE ?Subroutine3
   \   000099                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F04         MOV       R7,#0x4
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC..         MOV       R4,?XSP + 0
   \   00000A   AD..         MOV       R5,?XSP + 1
   \   00000C   7B01         MOV       R3,#0x1
   \   00000E   AA..         MOV       R2,?V3
   \   000010   7965         MOV       R1,#0x65
   \   000012   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   C8           XCH       A,R0
   \   000006   F9           MOV       R1,A
   \   000007   EC           MOV       A,R4
   \   000008   28           ADD       A,R0
   \   000009   22           RET
    807          
    808          /***************************************************************************************************
    809           * @fn      MT_ZdoServiceDiscRequest
    810           *
    811           * @brief   Handle a Server Discovery request.
    812           *
    813           * @param   pBuf  - MT message data
    814           *
    815           * @return  void
    816           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    817          void MT_ZdoServiceDiscRequest(uint8 *pBuf)
   \                     MT_ZdoServiceDiscRequest:
    818          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    819            uint8 cmdId;
    820            uint8 retValue;
    821            uint16 serviceMask;
    822          
    823            /* parse header */
    824            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL     ??Subroutine62_0 & 0xFFFF
    825            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_126:
   \   00000D   5001         JNC       ??MT_ZdoServiceDiscRequest_0
   \   00000F   0B           INC       R3
    826          
    827            /* Service Mask */
    828            serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
    829            pBuf += 2;
    830          
    831            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
   \                     ??MT_ZdoServiceDiscRequest_0:
   \   000010                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   000010   7900         MOV       R1,#0x0
   \   000012   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000015   FB           MOV       R3,A
   \   000016   EC           MOV       A,R4
   \   000017   FA           MOV       R2,A
   \   000018   12....       LCALL     `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
   \   00001B   02....       LJMP      ?Subroutine5 & 0xFFFF
    832          
    833            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    834          }
    835          
    836          /***************************************************************************************************
    837           * @fn      MT_ZdoEndDevBindRequest
    838           *
    839           * @brief   Handle a End Device Bind request.
    840           *
    841           * @param   pBuf  - MT message data
    842           *
    843           * @return  void
    844           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    845          void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
    846          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV       A,#-0x46
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
    847            uint8 cmdId;
    848            uint8 retValue = 0;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   E4           CLR       A
   \   000013   12....       LCALL     ??Subroutine71_0 & 0xFFFF
    849            uint8 i, epInt, numInClusters, numOutClusters;
    850            zAddrType_t destAddr;
    851            uint16 shortAddr;
    852            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
    853          
    854            /* parse header */
    855            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_139:
   \   000016   F5..         MOV       ?V6,A
    856            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000018   EA           MOV       A,R2
   \   000019   2403         ADD       A,#0x3
   \   00001B   FE           MOV       R6,A
   \   00001C   5001         JNC       ??MT_ZdoEndDevBindRequest_0
   \   00001E   0F           INC       R7
    857          
    858            /* Dev address */
    859            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   00001F   7409         MOV       A,#0x9
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   7402         MOV       A,#0x2
   \   000026   12....       LCALL     ?Subroutine37 & 0xFFFF
    860            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_70:
   \   000029   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   EA           MOV       A,R2
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   E9           MOV       A,R1
   \   000033   F0           MOVX      @DPTR,A
    861            pBuf += 2;
   \   000034   EE           MOV       A,R6
   \   000035   2402         ADD       A,#0x2
   \   000037   FE           MOV       R6,A
   \   000038   5001         JNC       ??MT_ZdoEndDevBindRequest_1
   \   00003A   0F           INC       R7
    862          
    863            /* Local coordinator of the binding */
    864            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   00003B   F582         MOV       DPL,A
   \   00003D   8F83         MOV       DPH,R7
   \   00003F   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000042   FC           MOV       R4,A
   \   000043   E4           CLR       A
   \   000044   39           ADDC      A,R1
   \   000045   FD           MOV       R5,A
    865            pBuf += 2;
    866          
    867            /* For now, skip past the extended address */
    868            pBuf += Z_EXTADDR_LEN;
    869          
    870            /* Endpoint */
    871            epInt = *pBuf++;
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   EE           MOV       A,R6
   \   000057   240B         ADD       A,#0xb
   \   000059   FE           MOV       R6,A
   \   00005A   5001         JNC       ??MT_ZdoEndDevBindRequest_2
   \   00005C   0F           INC       R7
    872          
    873            /* Profile ID */
    874            profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   00005D   F582         MOV       DPL,A
   \   00005F   8F83         MOV       DPH,R7
   \   000061   12....       LCALL     ?Subroutine17 & 0xFFFF
    875            pBuf += 2;
    876          
    877            /* NumInClusters */
    878            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_32:
   \   000064   8E82         MOV       DPL,R6
   \   000066   8F83         MOV       DPH,R7
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   F5..         MOV       ?V2,A
   \   00006D   EE           MOV       A,R6
   \   00006E   2403         ADD       A,#0x3
   \   000070   FE           MOV       R6,A
   \   000071   5001         JNC       ??MT_ZdoEndDevBindRequest_3
   \   000073   0F           INC       R7
    879            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   000074   E5..         MOV       A,?V2
   \   000076   C3           CLR       C
   \   000077   9410         SUBB      A,#0x10
   \   000079   5019         JNC       ??MT_ZdoEndDevBindRequest_4
    880            {
    881              for ( i = 0; i < numInClusters; i++ )
   \   00007B   7800         MOV       R0,#0x0
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   00007D   E8           MOV       A,R0
   \   00007E   C3           CLR       C
   \   00007F   95..         SUBB      A,?V2
   \   000081   501A         JNC       ??MT_ZdoEndDevBindRequest_6
    882              {
    883                inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000083   12....       LCALL     ?Subroutine10 & 0xFFFF
    884                pBuf += 2;
    885              }
   \                     ??CrossCallReturnLabel_18:
   \   000086   7428         MOV       A,#0x28
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00008E   5001         JNC       ??MT_ZdoEndDevBindRequest_7
   \   000090   0F           INC       R7
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   000091   08           INC       R0
   \   000092   80E9         SJMP      ??MT_ZdoEndDevBindRequest_5
    886            }
    887            else
    888            {
    889              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   000094   85..82       MOV       DPL,?XSP + 0
   \   000097   85..83       MOV       DPH,?XSP + 1
   \   00009A   7480         MOV       A,#-0x80
   \   00009C   F0           MOVX      @DPTR,A
    890            }
    891          
    892            /* NumOutClusters */
    893            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   00009D   8E82         MOV       DPL,R6
   \   00009F   8F83         MOV       DPH,R7
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F5..         MOV       ?V3,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   AE82         MOV       R6,DPL
   \   0000A7   AF83         MOV       R7,DPH
    894            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   0000A9   C3           CLR       C
   \   0000AA   9410         SUBB      A,#0x10
   \   0000AC   5019         JNC       ??MT_ZdoEndDevBindRequest_8
    895            {
    896              for ( i = 0; i < numOutClusters; i++ )
   \   0000AE   7800         MOV       R0,#0x0
   \                     ??MT_ZdoEndDevBindRequest_9:
   \   0000B0   E8           MOV       A,R0
   \   0000B1   C3           CLR       C
   \   0000B2   95..         SUBB      A,?V3
   \   0000B4   501B         JNC       ??MT_ZdoEndDevBindRequest_10
    897              {
    898                outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000B6   12....       LCALL     ?Subroutine10 & 0xFFFF
    899                pBuf += 2;
    900              }
   \                     ??CrossCallReturnLabel_19:
   \   0000B9   740A         MOV       A,#0xa
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000C1   5001         JNC       ??MT_ZdoEndDevBindRequest_11
   \   0000C3   0F           INC       R7
   \                     ??MT_ZdoEndDevBindRequest_11:
   \   0000C4   08           INC       R0
   \   0000C5   80E9         SJMP      ??MT_ZdoEndDevBindRequest_9
    901            }
    902            else
    903            {
    904              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_8:
   \   0000C7   85..82       MOV       DPL,?XSP + 0
   \   0000CA   85..83       MOV       DPH,?XSP + 1
   \   0000CD   7480         MOV       A,#-0x80
   \   0000CF   805C         SJMP      ??MT_ZdoEndDevBindRequest_12
    905            }
    906          
    907            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_10:
   \   0000D1   85..82       MOV       DPL,?XSP + 0
   \   0000D4   85..83       MOV       DPH,?XSP + 1
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   7054         JNZ       ??MT_ZdoEndDevBindRequest_13
    908            {
    909              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
    910                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   0000DA                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000DA   75..00       MOV       ?V0,#0x0
   \   0000DD   78..         MOV       R0,#?V0
   \   0000DF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E2   740B         MOV       A,#0xb
   \   0000E4   12....       LCALL     ?XSTACK_DISP103_8
   \   0000E7   8E..         MOV       ?V0,R6
   \   0000E9   8F..         MOV       ?V1,R7
   \   0000EB   78..         MOV       R0,#?V0
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F0   E5..         MOV       A,?V3
   \   0000F2   F5..         MOV       ?V0,A
   \   0000F4   78..         MOV       R0,#?V0
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F9   742C         MOV       A,#0x2c
   \   0000FB   12....       LCALL     ?XSTACK_DISP103_8
   \   0000FE   8E..         MOV       ?V0,R6
   \   000100   8F..         MOV       ?V1,R7
   \   000102   78..         MOV       R0,#?V0
   \   000104   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000107   E5..         MOV       A,?V2
   \   000109   F5..         MOV       ?V0,A
   \   00010B   78..         MOV       R0,#?V0
   \   00010D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000110   8A..         MOV       ?V0,R2
   \   000112   8B..         MOV       ?V1,R3
   \   000114   78..         MOV       R0,#?V0
   \   000116   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000119   740A         MOV       A,#0xa
   \   00011B   12....       LCALL     ?XSTACK_DISP101_8
   \   00011E   12....       LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   000121   7409         MOV       A,#0x9
   \   000123   12....       LCALL     ?DEALLOC_XSTACK8
   \   000126   E9           MOV       A,R1
   \   000127   85..82       MOV       DPL,?XSP + 0
   \   00012A   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoEndDevBindRequest_12:
   \   00012D   F0           MOVX      @DPTR,A
    911            }
    912          
    913            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_13:
   \   00012E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00012E   AC..         MOV       R4,?XSP + 0
   \   000130   AD..         MOV       R5,?XSP + 1
   \   000132   7B01         MOV       R3,#0x1
   \   000134   AA..         MOV       R2,?V6
   \   000136   7965         MOV       R1,#0x65
   \   000138   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    914          }
   \   00013B   7446         MOV       A,#0x46
   \   00013D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000140   7F07         MOV       R7,#0x7
   \   000142   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   EE           MOV       A,R6
   \   000004   2402         ADD       A,#0x2
   \   000006   FE           MOV       R6,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000007   E8           MOV       A,R0
   \   000008   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   7401         MOV       A,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET
    915          
    916          /***************************************************************************************************
    917           * @fn      MT_ZdoBindRequest
    918           *
    919           * @brief   Handle a Bind request.
    920           *
    921           * @param   pBuf  - MT message data
    922           *
    923           * @return  void
    924           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    925          void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
    926          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine26 & 0xFFFF
    927            uint8 cmdId;
    928            uint8 retValue;
    929            zAddrType_t destAddr, devAddr;
    930            uint8 *pSrcAddr, *ptr;
    931            uint8 srcEPInt, dstEPInt;
    932            uint16 clusterID;
    933          
    934            /* parse header */
    935            cmdId = pBuf[MT_RPC_POS_CMD1];
    936            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_47:
   \   00000D   5002         JNC       ??MT_ZdoBindRequest_0
   \   00000F   05..         INC       ?V1
    937          
    938            /* Dev address */
    939            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoBindRequest_0:
   \   000011   7412         MOV       A,#0x12
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine34 & 0xFFFF
    940            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_64:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine6 & 0xFFFF
    941            pBuf += 2;
    942          
    943            /* SrcAddress */
    944            pSrcAddr = pBuf;
    945            pBuf += Z_EXTADDR_LEN;
    946          
    947            /* SrcEPInt */
    948            srcEPInt = *pBuf++;
    949          
    950            /* ClusterID */
    951            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
    952            pBuf += 2;
    953          
    954            /* Destination Address mode */
    955            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_0:
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E8           MOV       A,R0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   E5..         MOV       A,?V0
   \   000026   2403         ADD       A,#0x3
   \   000028   F5..         MOV       ?V0,A
   \   00002A   5002         JNC       ??MT_ZdoBindRequest_1
   \   00002C   05..         INC       ?V1
    956          
    957            /* Destination Address */
    958            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoBindRequest_1:
   \   00002E   7403         MOV       A,#0x3
   \   000030   68           XRL       A,R0
   \   000031   700E         JNZ       ??MT_ZdoBindRequest_2
    959            {
    960              ptr = pBuf;
    961              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   AC..         MOV       R4,?V0
   \   000035   AD..         MOV       R5,?V1
   \   000037   7401         MOV       A,#0x1
   \   000039   12....       LCALL     ?XSTACK_DISP101_8
   \   00003C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003F   800B         SJMP      ??MT_ZdoBindRequest_3
    962            }
    963            else
    964            {
    965              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoBindRequest_2:
   \   000041   12....       LCALL     ?Subroutine21 & 0xFFFF
    966            }
   \                     ??CrossCallReturnLabel_135:
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   EA           MOV       A,R2
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   E9           MOV       A,R1
   \   00004B   F0           MOVX      @DPTR,A
    967            /* The short address occupies LSB two bytes */
    968            pBuf += Z_EXTADDR_LEN;
    969          
    970            /* DstEPInt */
    971            dstEPInt = *pBuf;
    972          
    973            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoBindRequest_3:
   \   00004C                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004C   75..00       MOV       ?V4,#0x0
   \   00004F   78..         MOV       R0,#?V4
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000054   85..82       MOV       DPL,?V0
   \   000057   85..83       MOV       DPH,?V1
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V0,A
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   7403         MOV       A,#0x3
   \   00006C   12....       LCALL     ?XSTACK_DISP100_8
   \   00006F   88..         MOV       ?V0,R0
   \   000071   89..         MOV       ?V1,R1
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   8E..         MOV       ?V0,R6
   \   00007A   8F..         MOV       ?V1,R7
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   78..         MOV       R0,#?V6
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000086   A9..         MOV       R1,?V2
   \   000088   7412         MOV       A,#0x12
   \   00008A   12....       LCALL     ?XSTACK_DISP102_8
   \   00008D   7A21         MOV       R2,#0x21
   \   00008F                REQUIRE ?Subroutine4
   \   00008F                ; // Fall through to label ?Subroutine4
    974          
    975            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    976          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   000005   7408         MOV       A,#0x8
   \   000007   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00000D   7413         MOV       A,#0x13
   \   00000F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000012   7F08         MOV       R7,#0x8
   \   000014   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine69_0
   \   000006                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FA           MOV       R2,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   740A         MOV       A,#0xa
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8B..         MOV       ?V1,R3
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V3,A
   \   00000B   EA           MOV       A,R2
   \   00000C   2403         ADD       A,#0x3
   \   00000E   F5..         MOV       ?V0,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   E5..         MOV       A,?V0
   \   000007   2402         ADD       A,#0x2
   \   000009   F5..         MOV       ?V6,A
   \   00000B   E4           CLR       A
   \   00000C   35..         ADDC      A,?V1
   \   00000E   F5..         MOV       ?V7,A
   \   000010   E5..         MOV       A,?V6
   \   000012   2408         ADD       A,#0x8
   \   000014   F5..         MOV       ?V0,A
   \   000016   E4           CLR       A
   \   000017   35..         ADDC      A,?V7
   \   000019   85..82       MOV       DPL,?V0
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V2,A
   \   000021   A3           INC       DPTR
   \   000022   8582..       MOV       ?V0,DPL
   \   000025   8583..       MOV       ?V1,DPH
   \   000028   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00002B   FE           MOV       R6,A
   \   00002C   E4           CLR       A
   \   00002D   39           ADDC      A,R1
   \   00002E   FF           MOV       R7,A
   \   00002F   85..82       MOV       DPL,?V0
   \   000032   85..83       MOV       DPH,?V1
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   7409         MOV       A,#0x9
   \   00003B   22           RET
    977          
    978          /***************************************************************************************************
    979           * @fn      MT_ZdoUnbindRequest
    980           *
    981           * @brief   Handle a Unbind request.
    982           *
    983           * @param   pBuf  - MT message data
    984           *
    985           * @return  void
    986           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    987          void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
    988          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine26 & 0xFFFF
    989            uint8 cmdId;
    990            uint8 retValue;
    991            zAddrType_t destAddr, devAddr;
    992            uint8 *pSrcAddr, *ptr;
    993            uint8 srcEPInt, dstEPInt;
    994            uint16 clusterID;
    995          
    996            /* parse header */
    997            cmdId = pBuf[MT_RPC_POS_CMD1];
    998            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_48:
   \   00000D   5002         JNC       ??MT_ZdoUnbindRequest_0
   \   00000F   05..         INC       ?V1
    999          
   1000            /* dev address */
   1001            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUnbindRequest_0:
   \   000011   7412         MOV       A,#0x12
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine34 & 0xFFFF
   1002            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_65:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine6 & 0xFFFF
   1003            pBuf += 2;
   1004          
   1005            /* SrcAddress */
   1006            pSrcAddr = pBuf;
   1007            pBuf += Z_EXTADDR_LEN;
   1008          
   1009            /* SrcEPInt */
   1010            srcEPInt = *pBuf++;
   1011          
   1012            /* ClusterID */
   1013            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   1014            pBuf += 2;
   1015          
   1016            /* Destination Address mode */
   1017            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_1:
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E8           MOV       A,R0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   E5..         MOV       A,?V0
   \   000026   2403         ADD       A,#0x3
   \   000028   F5..         MOV       ?V0,A
   \   00002A   5002         JNC       ??MT_ZdoUnbindRequest_1
   \   00002C   05..         INC       ?V1
   1018          
   1019            /* Destination Address */
   1020            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoUnbindRequest_1:
   \   00002E   7403         MOV       A,#0x3
   \   000030   68           XRL       A,R0
   \   000031   700E         JNZ       ??MT_ZdoUnbindRequest_2
   1021            {
   1022              ptr = pBuf;
   1023              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   AC..         MOV       R4,?V0
   \   000035   AD..         MOV       R5,?V1
   \   000037   7401         MOV       A,#0x1
   \   000039   12....       LCALL     ?XSTACK_DISP101_8
   \   00003C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003F   800B         SJMP      ??MT_ZdoUnbindRequest_3
   1024            }
   1025            else
   1026            {
   1027              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUnbindRequest_2:
   \   000041   12....       LCALL     ?Subroutine21 & 0xFFFF
   1028            }
   \                     ??CrossCallReturnLabel_136:
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   EA           MOV       A,R2
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   E9           MOV       A,R1
   \   00004B   F0           MOVX      @DPTR,A
   1029            /* The short address occupies LSB two bytes */
   1030            pBuf += Z_EXTADDR_LEN;
   1031          
   1032            /* dstEPInt */
   1033            dstEPInt = *pBuf;
   1034          
   1035            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoUnbindRequest_3:
   \   00004C                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004C   75..00       MOV       ?V4,#0x0
   \   00004F   78..         MOV       R0,#?V4
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000054   85..82       MOV       DPL,?V0
   \   000057   85..83       MOV       DPH,?V1
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V0,A
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   7403         MOV       A,#0x3
   \   00006C   12....       LCALL     ?XSTACK_DISP100_8
   \   00006F   88..         MOV       ?V0,R0
   \   000071   89..         MOV       ?V1,R1
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   8E..         MOV       ?V0,R6
   \   00007A   8F..         MOV       ?V1,R7
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   78..         MOV       R0,#?V6
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000086   A9..         MOV       R1,?V2
   \   000088   7412         MOV       A,#0x12
   \   00008A   12....       LCALL     ?XSTACK_DISP102_8
   \   00008D   7A22         MOV       R2,#0x22
   \   00008F   02....       LJMP      ?Subroutine4 & 0xFFFF
   1036          
   1037            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1038          }
   1039          
   1040          #if defined (MT_SYS_KEY_MANAGEMENT)
   1041          /***************************************************************************************************
   1042           * @fn      MT_ZdoSetLinkKey
   1043           *
   1044           * @brief   Set an application or trust center link key.
   1045           *
   1046           * @param   pBuf  - MT message data
   1047           *
   1048           * @return  void
   1049           ***************************************************************************************************/
   1050          void MT_ZdoSetLinkKey(uint8 *pBuf)
   1051          {
   1052            uint8 cmdId;
   1053            uint8 retValue;
   1054            uint8 *pExtAddr;
   1055            uint8 *pKey;
   1056            uint16 shortAddr;
   1057          
   1058            /* parse header */
   1059            cmdId = pBuf[MT_RPC_POS_CMD1];
   1060            pBuf += MT_RPC_FRAME_HDR_SZ;
   1061          
   1062            /* ShortAddr */
   1063            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1064            pBuf += 2;
   1065          
   1066            /* Extended Addr */
   1067            pExtAddr = pBuf;
   1068            pBuf += Z_EXTADDR_LEN;
   1069          
   1070            /* Key data */
   1071            pKey = pBuf;
   1072          
   1073            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1074          
   1075            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1076          }
   1077          
   1078          /***************************************************************************************************
   1079           * @fn      MT_ZdoRemoveLinkKey
   1080           *
   1081           * @brief   Remove an application or trust center link key.
   1082           *
   1083           * @param   pBuf  - MT message data
   1084           *
   1085           * @return  void
   1086           ***************************************************************************************************/
   1087          void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1088          {
   1089            uint8 cmdId;
   1090            uint8 retValue;
   1091            uint8 *pExtAddr;
   1092          
   1093            /* parse header */
   1094            cmdId = pBuf[MT_RPC_POS_CMD1];
   1095            pBuf += MT_RPC_FRAME_HDR_SZ;
   1096          
   1097            /* ShortAddr */
   1098            pExtAddr = pBuf;
   1099          
   1100            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1101          
   1102            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1103          }
   1104          
   1105          /***************************************************************************************************
   1106           * @fn      MT_ZdoGetLinkKey
   1107           *
   1108           * @brief   Get the application link key.
   1109           *
   1110           * @param   pBuf  - MT message data
   1111           *
   1112           * @return  void
   1113           ***************************************************************************************************/
   1114          void MT_ZdoGetLinkKey(uint8 *pBuf)
   1115          {
   1116            uint8 cmdId;
   1117            uint8 retValue;
   1118            uint8 *pExtAddr;
   1119            uint8 *retBuf = NULL;
   1120            uint8 len;
   1121            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1122            uint16 apsLinkKeyNvId;
   1123          
   1124            // parse header
   1125            cmdId = pBuf[MT_RPC_POS_CMD1];
   1126            pBuf += MT_RPC_FRAME_HDR_SZ;
   1127          
   1128            // Extended Address
   1129            pExtAddr = pBuf;
   1130          
   1131            // Fetch the key NV ID
   1132            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1133          
   1134            if (retValue == ZSuccess)
   1135            {
   1136              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1137              {
   1138                // retrieve key from NV
   1139                if (osal_nv_read( apsLinkKeyNvId, 0,
   1140                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1141                {
   1142                  retValue = ZNwkUnknownDevice;
   1143                }
   1144              }
   1145              else
   1146              {
   1147                retValue = ZNwkUnknownDevice;
   1148              }
   1149            }
   1150          
   1151            // Construct the response message
   1152            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1153            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1154            {
   1155              if (retValue == ZSuccess)
   1156              {
   1157                // Extended Address
   1158                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1159          
   1160                // Key data
   1161                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
   1162              }
   1163              else
   1164              {
   1165                // Failed case - set the rest fields to all FF
   1166                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
   1167              }
   1168          
   1169              retBuf[0] = retValue;  // Status
   1170          
   1171              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1172          
   1173              // clear retBuf because it contains key data and free allocated memory
   1174              osal_memset(retBuf, 0x00, len);
   1175          
   1176              osal_mem_free(retBuf);
   1177            }
   1178          
   1179            // clear copy of key in RAM
   1180            if (pApsLinkKey != NULL)
   1181            {
   1182              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1183          
   1184              osal_mem_free(pApsLinkKey);
   1185            }
   1186          
   1187            return;
   1188          }
   1189          #endif // MT_SYS_KEY_MANAGEMENT
   1190          
   1191          #if defined (MT_ZDO_MGMT)
   1192          /***************************************************************************************************
   1193           * @fn      MT_ZdoMgmtNwkDiscRequest
   1194           *
   1195           * @brief   Handle a Mgmt Nwk Discovery request.
   1196           *
   1197           * @param   pBuf  - MT message data
   1198           *
   1199           * @return  void
   1200           ***************************************************************************************************/
   1201          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1202          {
   1203            uint8 cmdId;
   1204            uint8 retValue;
   1205            zAddrType_t destAddr;
   1206            uint32 scanChannels;
   1207            uint8 scanDuration, startIndex;
   1208          
   1209            /* parse header */
   1210            cmdId = pBuf[MT_RPC_POS_CMD1];
   1211            pBuf += MT_RPC_FRAME_HDR_SZ;
   1212          
   1213            /* Dev address */
   1214            destAddr.addrMode = Addr16Bit;
   1215            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1216            pBuf += 2;
   1217          
   1218            /* Scan Channels */
   1219            scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1220            pBuf += 4;
   1221          
   1222            /* Scan Duration */
   1223            scanDuration = *pBuf++;
   1224          
   1225            /* Start Index */
   1226            startIndex = *pBuf;
   1227          
   1228            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1229          
   1230            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1231          }
   1232          
   1233          /***************************************************************************************************
   1234           * @fn      MT_ZdoMgmtLqiRequest
   1235           *
   1236           * @brief   Handle a Mgmt Lqi request.
   1237           *
   1238           * @param   pBuf  - MT message data
   1239           *
   1240           * @return  void
   1241           ***************************************************************************************************/
   1242          void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1243          {
   1244            uint8 cmdId;
   1245            uint8 retValue;
   1246            zAddrType_t destAddr;
   1247            uint8 startIndex;
   1248          
   1249            /* parse header */
   1250            cmdId = pBuf[MT_RPC_POS_CMD1];
   1251            pBuf += MT_RPC_FRAME_HDR_SZ;
   1252          
   1253            /* Dev address */
   1254            destAddr.addrMode = Addr16Bit;
   1255            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1256            pBuf += 2;
   1257          
   1258            /* Start Index */
   1259            startIndex = *pBuf;
   1260          
   1261            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1262          
   1263            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1264          }
   1265          
   1266          /***************************************************************************************************
   1267           * @fn      MT_ZdoMgmtRtgRequest
   1268           *
   1269           * @brief   Handle a Mgmt Rtg request.
   1270           *
   1271           * @param   pBuf  - MT message data
   1272           *
   1273           * @return  void
   1274           ***************************************************************************************************/
   1275          void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1276          {
   1277            uint8 cmdId;
   1278            uint8 retValue;
   1279            zAddrType_t destAddr;
   1280            uint8 startIndex;
   1281          
   1282            /* parse header */
   1283            cmdId = pBuf[MT_RPC_POS_CMD1];
   1284            pBuf += MT_RPC_FRAME_HDR_SZ;
   1285          
   1286            /* Dev Address */
   1287            destAddr.addrMode = Addr16Bit;
   1288            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   1289            pBuf += 2;
   1290          
   1291            /* Start Index */
   1292            startIndex = *pBuf;
   1293          
   1294            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1295          
   1296            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1297          }
   1298          
   1299          /***************************************************************************************************
   1300           * @fn      MT_ZdoMgmtBindRequest
   1301           *
   1302           * @brief   Handle a Mgmt Bind request.
   1303           *
   1304           * @param   pBuf  - MT message data
   1305           *
   1306           * @return  void
   1307           ***************************************************************************************************/
   1308          void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1309          {
   1310            uint8 cmdId;
   1311            uint8 retValue;
   1312            zAddrType_t destAddr;
   1313            uint8 startIndex;
   1314          
   1315            /* parse header */
   1316            cmdId = pBuf[MT_RPC_POS_CMD1];
   1317            pBuf += MT_RPC_FRAME_HDR_SZ;
   1318          
   1319            /* Dev Address */
   1320            destAddr.addrMode = Addr16Bit;
   1321            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1322            pBuf += 2;
   1323          
   1324            /* Start Index */
   1325            startIndex = *pBuf;
   1326          
   1327            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1328          
   1329            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1330          }
   1331          
   1332          /***************************************************************************************************
   1333           * @fn      MT_ZdoMgmtLeaveRequest
   1334           *
   1335           * @brief   Handle a Mgmt Leave request.
   1336           *
   1337           * @param   pBuf  - MT message data
   1338           *
   1339           * @return  void
   1340           ***************************************************************************************************/
   1341          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1342          {
   1343            uint8 cmdId;
   1344            uint8 retValue;
   1345            zAddrType_t destAddr;
   1346            uint8 *pIEEEAddr;
   1347            uint8 removeChildren, rejoin;
   1348          
   1349            /* parse header */
   1350            cmdId = pBuf[MT_RPC_POS_CMD1];
   1351            pBuf += MT_RPC_FRAME_HDR_SZ;
   1352          
   1353            /* Destination Address */
   1354            destAddr.addrMode = Addr16Bit;
   1355            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1356            pBuf += 2;
   1357          
   1358            /* IEEE address */
   1359            pIEEEAddr = pBuf;
   1360            pBuf += Z_EXTADDR_LEN;
   1361          
   1362            /* Remove Children */
   1363            removeChildren = *pBuf++;
   1364          
   1365            /* Rejoin */
   1366            rejoin = *pBuf;
   1367          
   1368            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1369          
   1370            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1371          }
   1372          
   1373          
   1374          /***************************************************************************************************
   1375           * @fn      MT_ZdoMgmtDirectJoinRequest
   1376           *
   1377           * @brief   Handle a Mgmt Direct Join request.
   1378           *
   1379           * @param   pBuf  - MT message data
   1380           *
   1381           * @return  void
   1382           ***************************************************************************************************/
   1383          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1384          {
   1385            uint8 cmdId;
   1386            uint8 retValue;
   1387            zAddrType_t destAddr;
   1388            uint8 *deviceAddr;
   1389            uint8 capInfo;
   1390          
   1391            /* parse header */
   1392            cmdId = pBuf[MT_RPC_POS_CMD1];
   1393            pBuf += MT_RPC_FRAME_HDR_SZ;
   1394          
   1395            /* Destination Address */
   1396            destAddr.addrMode = Addr16Bit;
   1397            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1398            pBuf += 2;
   1399          
   1400            /* Device Address */
   1401            deviceAddr = pBuf;
   1402            pBuf += Z_EXTADDR_LEN;
   1403          
   1404            /* Capability information */
   1405            capInfo = *pBuf;
   1406          
   1407            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1408          
   1409            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1410          }
   1411          
   1412          /***************************************************************************************************
   1413           * @fn      MT_ZdoMgmtPermitJoinRequest
   1414           *
   1415           * @brief   Handle a Mgmt Permit Join request.
   1416           *
   1417           * @param   pBuf  - MT message data
   1418           *
   1419           * @return  void
   1420           ***************************************************************************************************/
   1421          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1422          {
   1423            uint8 cmdId;
   1424            uint8 retValue;
   1425            zAddrType_t destAddr;
   1426            uint8 duration, tcSignificance;
   1427          
   1428            /* parse header */
   1429            cmdId = pBuf[MT_RPC_POS_CMD1];
   1430            pBuf += MT_RPC_FRAME_HDR_SZ;
   1431          
   1432            /* Destination Address */
   1433            destAddr.addrMode = Addr16Bit;
   1434            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1435            pBuf += 2;
   1436          
   1437            /* Duration */
   1438            duration = *pBuf++;
   1439          
   1440            /* Trust center significance */
   1441            tcSignificance = *pBuf;
   1442          
   1443            retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1444          
   1445            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1446          }
   1447          
   1448          /***************************************************************************************************
   1449           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1450           *
   1451           * @brief   Handle a Mgmt Nwk Update request.
   1452           *
   1453           * @param   pBuf  - MT message data
   1454           *
   1455           * @return  void
   1456           ***************************************************************************************************/
   1457          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   1458          {
   1459            uint8 cmdId;
   1460            uint8 retValue;
   1461            zAddrType_t destAddr;
   1462            uint32 channelMask;
   1463            uint8 scanDuration, scanCount;
   1464            uint16 nwkManagerAddr;
   1465          
   1466              /* parse header */
   1467            cmdId = pBuf[MT_RPC_POS_CMD1];
   1468            pBuf += MT_RPC_FRAME_HDR_SZ;
   1469          
   1470            /* Destination address */
   1471            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1472            pBuf += 2;
   1473          
   1474            /* Destination address mode */
   1475            destAddr.addrMode = *pBuf++;
   1476          
   1477            channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   1478            pBuf += 4;
   1479          
   1480            /* Scan duration */
   1481            scanDuration = *pBuf++;
   1482          
   1483            /* Scan count */
   1484            scanCount = *pBuf++;
   1485          
   1486            /* NWK manager address */
   1487            nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1488          
   1489            /* Send the Management Network Update request */
   1490            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1491                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1492          
   1493            /*
   1494              Since we don't recevied our own broadcast messages, we should
   1495              send a unicast copy of the message to ourself.
   1496            */
   1497            if ( destAddr.addrMode == AddrBroadcast )
   1498            {
   1499              destAddr.addrMode = Addr16Bit;
   1500              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1501              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1502                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1503            }
   1504          
   1505            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1506          }
   1507          #endif /* MT_ZDO_MGMT */
   1508          
   1509          /***************************************************************************************************
   1510           * @fn      MT_ZdoStartupFromApp
   1511           *
   1512           * @brief   Handle a Startup from App request.
   1513           *
   1514           * @param   pBuf  - MT message data
   1515           *
   1516           * @return  void
   1517           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1518          void MT_ZdoStartupFromApp(uint8 *pBuf)
   \                     MT_ZdoStartupFromApp:
   1519          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1520            uint8 cmd0, cmd1, retValue;
   1521          
   1522            /* parse header */
   1523            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FF           MOV       R7,A
   1524            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FE           MOV       R6,A
   1525            pBuf += MT_RPC_FRAME_HDR_SZ;
   1526          
   1527            retValue = ZDOInitDevice(100);
   \   000019                ; Setup parameters for call to function ZDOInitDevice
   \   000019   7A64         MOV       R2,#0x64
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000020   12....       LCALL     ?Subroutine38 & 0xFFFF
   1528          
   1529            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_74:
   \   000023   700D         JNZ       ??MT_ZdoStartupFromApp_0
   1530            {
   1531              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   \   000025                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000025   AC..         MOV       R4,?XSP + 0
   \   000027   AD..         MOV       R5,?XSP + 1
   \   000029   7B01         MOV       R3,#0x1
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   7965         MOV       R1,#0x65
   \   00002F   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1532            }
   1533          }
   \                     ??MT_ZdoStartupFromApp_0:
   \   000032   80..         SJMP      ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   74E0         MOV       A,#-0x20
   \   00000A   5F           ANL       A,R7
   \   00000B   6420         XRL       A,#0x20
   \   00000D   22           RET
   1534          
   1535          
   1536          /***************************************************************************************************
   1537           * @fn      MT_ZdoNetworkDiscoveryReq
   1538           *
   1539           * @brief   Handle a ZDO Network Discovery request.
   1540           *
   1541           * @param   pBuf  - MT message data
   1542           *
   1543           * @return  void
   1544           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1545          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   \                     MT_ZdoNetworkDiscoveryReq:
   1546          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine35 & 0xFFFF
   1547            uint8  retValue = ZFailure;
   1548            uint8  cmdId;
   1549            uint32 scanChannels;
   1550          
   1551            /* parse header */
   1552            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_137:
   \   00000D   F5..         MOV       ?V4,A
   1553            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000F   EA           MOV       A,R2
   \   000010   2403         ADD       A,#0x3
   \   000012   FE           MOV       R6,A
   \   000013   5001         JNC       ??MT_ZdoNetworkDiscoveryReq_0
   \   000015   0F           INC       R7
   1554          
   1555            /* Packet format */
   1556            /* scan channels (4) | scan duration (1) */
   1557          
   1558            /* Scan channels */
   1559            scanChannels = osal_build_uint32(pBuf, 4);
   \                     ??MT_ZdoNetworkDiscoveryReq_0:
   \   000016                ; Setup parameters for call to function osal_build_uint32
   \   000016   7904         MOV       R1,#0x4
   \   000018   FA           MOV       R2,A
   \   000019   EF           MOV       A,R7
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   1560            pBuf += 4;
   1561          
   1562            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
   \   00001E                ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
   \   000028   12....       LCALL     `??ZDApp_NetworkDiscoveryReq::?relay`; Banked call to: ZDApp_NetworkDiscoveryReq
   \   00002B   E9           MOV       A,R1
   \   00002C   85..82       MOV       DPL,?XSP + 0
   \   00002F   85..83       MOV       DPH,?XSP + 1
   \   000032   F0           MOVX      @DPTR,A
   1563          
   1564            // Register ZDO callback for MT to handle the network discovery confirm
   1565            // and beacon notification confirm
   1566            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   \   000033                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000033   7A..         MOV       R2,#`??MT_ZdoNwkDiscoveryCnfCB::?relay` & 0xff
   \   000035   7B..         MOV       R3,#(`??MT_ZdoNwkDiscoveryCnfCB::?relay` >> 8) & 0xff
   \   000037   7902         MOV       R1,#0x2
   \   000039   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1567            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   \   00003C                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00003C   7A..         MOV       R2,#`??MT_ZdoBeaconIndCB::?relay` & 0xff
   \   00003E   7B..         MOV       R3,#(`??MT_ZdoBeaconIndCB::?relay` >> 8) & 0xff
   \   000040   7903         MOV       R1,#0x3
   \   000042   12....       LCALL     ?Subroutine40 & 0xFFFF
   1568          
   1569            /* Build and send back the response */
   1570            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \                     ??CrossCallReturnLabel_79:
   \   000045   AA..         MOV       R2,?V4
   \   000047   7965         MOV       R1,#0x65
   \   000049   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1571          }
   \   00004C   7401         MOV       A,#0x1
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000051   7F05         MOV       R7,#0x5
   \   000053   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   EB           MOV       A,R3
   \   000001   FF           MOV       R7,A
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   7401         MOV       A,#0x1
   \   00000A                REQUIRE ??Subroutine71_0
   \   00000A                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   000003                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000003                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000003   AC..         MOV       R4,?XSP + 0
   \   000005   AD..         MOV       R5,?XSP + 1
   \   000007   7B01         MOV       R3,#0x1
   \   000009   22           RET
   1572          
   1573          
   1574          /***************************************************************************************************
   1575           * @fn      MT_ZdoJoinReq
   1576           *
   1577           * @brief   Handle a ZDO Join request.
   1578           *
   1579           * @param   pBuf  - MT message data
   1580           *
   1581           * @return  void
   1582           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1583          void MT_ZdoJoinReq(uint8 *pBuf)
   \                     MT_ZdoJoinReq:
   1584          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine35 & 0xFFFF
   1585            uint8  retValue = ZFailure;
   1586            uint8  cmdId;
   1587            uint16 panId;
   1588            uint16 chosenParent;
   1589          
   1590            /* parse header */
   1591            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_138:
   \   00000D   F5..         MOV       ?V0,A
   1592            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000F   EA           MOV       A,R2
   \   000010   2403         ADD       A,#0x3
   \   000012   FE           MOV       R6,A
   \   000013   5001         JNC       ??MT_ZdoJoinReq_0
   \   000015   0F           INC       R7
   1593          
   1594            /* Packet format */
   1595            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
   1596             * parentDepth (1) | stackProfile  (1)
   1597             */
   1598          
   1599            panId        = BUILD_UINT16(pBuf[1], pBuf[2]);
   1600            chosenParent = BUILD_UINT16(pBuf[11], pBuf[12]);
   1601          
   1602            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   \                     ??MT_ZdoJoinReq_0:
   \   000016                ; Setup parameters for call to function ZDApp_JoinReq
   \   000016   240E         ADD       A,#0xe
   \   000018   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   EE           MOV       A,R6
   \   00001F   240D         ADD       A,#0xd
   \   000021   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000027   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00002A   FA           MOV       R2,A
   \   00002B   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00002E   F8           MOV       R0,A
   \   00002F   E4           CLR       A
   \   000030   C8           XCH       A,R0
   \   000031   F9           MOV       R1,A
   \   000032   EA           MOV       A,R2
   \   000033   28           ADD       A,R0
   \   000034   F5..         MOV       ?V2,A
   \   000036   E4           CLR       A
   \   000037   39           ADDC      A,R1
   \   000038   F5..         MOV       ?V3,A
   \   00003A   78..         MOV       R0,#?V2
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   EE           MOV       A,R6
   \   000040   2403         ADD       A,#0x3
   \   000042   FC           MOV       R4,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   FD           MOV       R5,A
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   FA           MOV       R2,A
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   A3           INC       DPTR
   \   000052   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000055   E4           CLR       A
   \   000056   39           ADDC      A,R1
   \   000057   FB           MOV       R3,A
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F9           MOV       R1,A
   \   00005E   12....       LCALL     `??ZDApp_JoinReq::?relay`; Banked call to: ZDApp_JoinReq
   \   000061   7404         MOV       A,#0x4
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   \   000066   E9           MOV       A,R1
   \   000067   85..82       MOV       DPL,?XSP + 0
   \   00006A   85..83       MOV       DPH,?XSP + 1
   \   00006D   F0           MOVX      @DPTR,A
   1603          
   1604            /* Register for MT to receive Join Confirm */
   1605            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   \   00006E                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00006E   7A..         MOV       R2,#`??MT_ZdoJoinCnfCB::?relay` & 0xff
   \   000070   7B..         MOV       R3,#(`??MT_ZdoJoinCnfCB::?relay` >> 8) & 0xff
   \   000072   7904         MOV       R1,#0x4
   \   000074   12....       LCALL     ?Subroutine40 & 0xFFFF
   1606          
   1607            /* Build and send back the response */
   1608            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \                     ??CrossCallReturnLabel_80:
   \   000077   AA..         MOV       R2,?V0
   \   000079   7965         MOV       R1,#0x65
   \   00007B   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1609          
   1610          }
   \   00007E   7401         MOV       A,#0x1
   \   000080   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V1,A
   \   000009   78..         MOV       R0,#?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   EE           MOV       A,R6
   \   000001   240C         ADD       A,#0xc
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET
   1611          
   1612          /***************************************************************************************************
   1613           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1614           *
   1615           * @brief       Send an indication to inform host device the completion of
   1616           *              network discovery scan
   1617           *
   1618           * @param       pStr - pointer to a parameter and a structure of parameters
   1619           *
   1620           * @return      void
   1621           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1622          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   \                     MT_ZdoNwkDiscoveryCnfCB:
   1623          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1624            /* pStr: status (uint8) */
   1625            /* Packet Format */
   1626            /* Status (1) */
   1627          
   1628            // Scan completed. De-register the callback with ZDO
   1629            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7902         MOV       R1,#0x2
   \   00000B   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1630            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7903         MOV       R1,#0x3
   \   000010   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1631          
   1632            // Send the buffered beacon indication
   1633            MT_ZdoBeaconIndCB ( NULL );
   \   000013                ; Setup parameters for call to function MT_ZdoBeaconIndCB
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B00         MOV       R3,#0x0
   \   000017   12....       LCALL     `??MT_ZdoBeaconIndCB::?relay`; Banked call to: MT_ZdoBeaconIndCB
   1634          
   1635            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1636                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   \   00001A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001A   EE           MOV       A,R6
   \   00001B   FC           MOV       R4,A
   \   00001C   EF           MOV       A,R7
   \   00001D   FD           MOV       R5,A
   \   00001E   7B01         MOV       R3,#0x1
   \   000020   7AC7         MOV       R2,#-0x39
   \   000022   7945         MOV       R1,#0x45
   \   000024   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1637            return NULL;
   \   000027   7A00         MOV       R2,#0x0
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   02....       LJMP      ??Subroutine67_0 & 0xFFFF
   1638          }
   1639          
   1640          
   1641          
   1642          /***************************************************************************************************
   1643           * @fn          MT_ZdoBeaconIndCB
   1644           *
   1645           * @brief       Send an indication to host device of a beacon notification
   1646           *
   1647           * @param       pStr -  pointer to a parameter and a structure of parameters
   1648           *
   1649           * @return      void
   1650           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1651          void *MT_ZdoBeaconIndCB ( void *pStr )
   \                     MT_ZdoBeaconIndCB:
   1652          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1653            zdoBeaconInd_t *pBeacon = pStr;
   1654            uint8 *pTmp;
   1655          
   1656            /* Packet Format */
   1657            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   1658          
   1659            if( pStr != NULL)
   \   000009   EA           MOV       A,R2
   \   00000A   4F           ORL       A,R7
   \   00000B   90....       MOV       DPTR,#pBeaconIndBuf
   \   00000E   7003         JNZ       $+5
   \   000010   02....       LJMP      ??MT_ZdoBeaconIndCB_0 & 0xFFFF
   1660            {
   1661              if( pBeaconIndBuf == NULL )
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F8           MOV       R0,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F9           MOV       R1,A
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   701E         JNZ       ??MT_ZdoBeaconIndCB_1
   1662              {
   1663                // If pBeaconIndBuf has not been allocated yet
   1664                // allocate memory now with MAX_UART_TX_BUFF
   1665                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   \   00001C                ; Setup parameters for call to function osal_mem_alloc
   \   00001C   7A7B         MOV       R2,#0x7b
   \   00001E   7B00         MOV       R3,#0x0
   \   000020   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000023   90....       MOV       DPTR,#pBeaconIndBuf
   \   000026   EA           MOV       A,R2
   \   000027   F0           MOVX      @DPTR,A
   \   000028   A3           INC       DPTR
   \   000029   EB           MOV       A,R3
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   F9           MOV       R1,A
   \   00002C   EA           MOV       A,R2
   \   00002D   49           ORL       A,R1
   \   00002E   7003         JNZ       $+5
   \   000030   02....       LJMP      ??MT_ZdoBeaconIndCB_2 & 0xFFFF
   1666                {
   1667                  // Memory failure
   1668                  return NULL;
   1669                }
   1670                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F583         MOV       DPH,A
   \   000036   8A82         MOV       DPL,R2
   \   000038   E4           CLR       A
   \   000039   F0           MOVX      @DPTR,A
   1671              }
   1672          
   1673              // Fill in the buffer with the beacon indication
   1674              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   \                     ??MT_ZdoBeaconIndCB_1:
   \   00003A   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00003D   F8           MOV       R0,A
   \   00003E   A9F0         MOV       R1,B
   \   000040   90....       MOV       DPTR,#pBeaconIndBuf
   \   000043   E0           MOVX      A,@DPTR
   \   000044   28           ADD       A,R0
   \   000045   FA           MOV       R2,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   39           ADDC      A,R1
   \   000049   8A82         MOV       DPL,R2
   \   00004B   F583         MOV       DPH,A
   \   00004D   A3           INC       DPTR
   \   00004E   AA82         MOV       R2,DPL
   \   000050   AB83         MOV       R3,DPH
   1675              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000059   12....       LCALL     ?Subroutine37 & 0xFFFF
   1676              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   \                     ??CrossCallReturnLabel_71:
   \   00005C   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00005F   A3           INC       DPTR
   \   000060   F0           MOVX      @DPTR,A
   1677              *pTmp++ = LO_UINT16(pBeacon->panID);
   \   000061   EE           MOV       A,R6
   \   000062   2402         ADD       A,#0x2
   \   000064   F8           MOV       R0,A
   \   000065   E4           CLR       A
   \   000066   3F           ADDC      A,R7
   \   000067   F9           MOV       R1,A
   \   000068   8882         MOV       DPL,R0
   \   00006A   12....       LCALL     ?Subroutine27 & 0xFFFF
   1678              *pTmp++ = HI_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_49:
   \   00006D   8882         MOV       DPL,R0
   \   00006F   8983         MOV       DPH,R1
   \   000071   A3           INC       DPTR
   \   000072   12....       LCALL     ?Subroutine25 & 0xFFFF
   1679              *pTmp++ = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_45:
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   12....       LCALL     ?Subroutine24 & 0xFFFF
   1680              *pTmp++ = pBeacon->permitJoining;
   \                     ??CrossCallReturnLabel_43:
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   12....       LCALL     ?Subroutine22 & 0xFFFF
   1681              *pTmp++ = pBeacon->routerCapacity;
   \                     ??CrossCallReturnLabel_39:
   \   00008B   8E82         MOV       DPL,R6
   \   00008D   8F83         MOV       DPH,R7
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   12....       LCALL     ?Subroutine20 & 0xFFFF
   1682              *pTmp++ = pBeacon->deviceCapacity;
   \                     ??CrossCallReturnLabel_37:
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   12....       LCALL     ?Subroutine19 & 0xFFFF
   1683              *pTmp++ = pBeacon->protocolVersion;
   \                     ??CrossCallReturnLabel_35:
   \   0000A6   8E82         MOV       DPL,R6
   \   0000A8   8F83         MOV       DPH,R7
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   12....       LCALL     ?Subroutine13 & 0xFFFF
   1684              *pTmp++ = pBeacon->stackProfile;
   \                     ??CrossCallReturnLabel_24:
   \   0000B4   8E82         MOV       DPL,R6
   \   0000B6   8F83         MOV       DPH,R7
   \   0000B8   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000BB   12....       LCALL     ?Subroutine37 & 0xFFFF
   1685              *pTmp++ = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_72:
   \   0000BE   A3           INC       DPTR
   \   0000BF   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000C2   A3           INC       DPTR
   \   0000C3   F0           MOVX      @DPTR,A
   1686              *pTmp++ = pBeacon->depth;
   \   0000C4   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000C7   C0E0         PUSH      A
   \   0000C9   EA           MOV       A,R2
   \   0000CA   240B         ADD       A,#0xb
   \   0000CC   F582         MOV       DPL,A
   \   0000CE   E4           CLR       A
   \   0000CF   3B           ADDC      A,R3
   \   0000D0   F583         MOV       DPH,A
   \   0000D2   D0E0         POP       A
   \   0000D4   F0           MOVX      @DPTR,A
   1687              *pTmp++ = pBeacon->updateID;
   \   0000D5   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000D8   C0E0         PUSH      A
   \   0000DA   EA           MOV       A,R2
   \   0000DB   240C         ADD       A,#0xc
   \   0000DD   F582         MOV       DPL,A
   \   0000DF   E4           CLR       A
   \   0000E0   3B           ADDC      A,R3
   \   0000E1   F583         MOV       DPH,A
   \   0000E3   D0E0         POP       A
   \   0000E5   F0           MOVX      @DPTR,A
   1688              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   \   0000E6                ; Setup parameters for call to function osal_memcpy
   \   0000E6   EE           MOV       A,R6
   \   0000E7   240D         ADD       A,#0xd
   \   0000E9   F5..         MOV       ?V0,A
   \   0000EB   E4           CLR       A
   \   0000EC   3F           ADDC      A,R7
   \   0000ED   F5..         MOV       ?V1,A
   \   0000EF   75..00       MOV       ?V2,#0x0
   \   0000F2   78..         MOV       R0,#?V0
   \   0000F4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F7   7C08         MOV       R4,#0x8
   \   0000F9   7D00         MOV       R5,#0x0
   \   0000FB   EA           MOV       A,R2
   \   0000FC   240D         ADD       A,#0xd
   \   0000FE   FA           MOV       R2,A
   \   0000FF   5001         JNC       ??MT_ZdoBeaconIndCB_3
   \   000101   0B           INC       R3
   \                     ??MT_ZdoBeaconIndCB_3:
   \   000102   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000105   7403         MOV       A,#0x3
   \   000107   12....       LCALL     ?DEALLOC_XSTACK8
   1689          
   1690              pBeaconIndBuf[0] += 1; // Increment the devCnt
   \   00010A   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00010D   04           INC       A
   \   00010E   F0           MOVX      @DPTR,A
   1691          
   1692              // Check if the buffer can fit in another beacon
   1693              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   \   00010F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000112   A9F0         MOV       R1,B
   \   000114   2416         ADD       A,#0x16
   \   000116   5001         JNC       ??MT_ZdoBeaconIndCB_4
   \   000118   09           INC       R1
   \                     ??MT_ZdoBeaconIndCB_4:
   \   000119   C3           CLR       C
   \   00011A   947C         SUBB      A,#0x7c
   \   00011C   E9           MOV       A,R1
   \   00011D   9400         SUBB      A,#0x0
   \   00011F   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000121   65D0         XRL       A,PSW
   \   000123   33           RLC       A
   \   000124   4035         JC        ??MT_ZdoBeaconIndCB_2
   1694              {
   1695                // Packet full, send the packet over MT
   1696                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1697                                             MT_ZDO_BEACON_NOTIFY_IND,
   1698                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000126                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000126   12....       LCALL     ?Subroutine7 & 0xFFFF
   1699                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   1700              }
   1701            }
   \                     ??CrossCallReturnLabel_2:
   \   000129   F583         MOV       DPH,A
   \   00012B   8882         MOV       DPL,R0
   \   00012D   E4           CLR       A
   \   00012E   802A         SJMP      ??MT_ZdoBeaconIndCB_5
   1702            else
   1703            {
   1704              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   \                     ??MT_ZdoBeaconIndCB_0:
   \   000130   E0           MOVX      A,@DPTR
   \   000131   F8           MOV       R0,A
   \   000132   A3           INC       DPTR
   \   000133   E0           MOVX      A,@DPTR
   \   000134   F9           MOV       R1,A
   \   000135   E8           MOV       A,R0
   \   000136   49           ORL       A,R1
   \   000137   6022         JZ        ??MT_ZdoBeaconIndCB_2
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   F583         MOV       DPH,A
   \   00013C   8882         MOV       DPL,R0
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   6008         JZ        ??MT_ZdoBeaconIndCB_6
   1705              {
   1706                // End of beacon indication, send the packet over MT
   1707                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1708                                             MT_ZDO_BEACON_NOTIFY_IND,
   1709                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000141                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000141   12....       LCALL     ?Subroutine7 & 0xFFFF
   1710              }
   1711              // Free the allocated memory
   1712              if(pBeaconIndBuf != NULL)
   \                     ??CrossCallReturnLabel_3:
   \   000144   F9           MOV       R1,A
   \   000145   E8           MOV       A,R0
   \   000146   49           ORL       A,R1
   \   000147   6012         JZ        ??MT_ZdoBeaconIndCB_2
   1713              {
   1714                osal_mem_free(pBeaconIndBuf);
   \                     ??MT_ZdoBeaconIndCB_6:
   \   000149                ; Setup parameters for call to function osal_mem_free
   \   000149   90....       MOV       DPTR,#pBeaconIndBuf
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   FA           MOV       R2,A
   \   00014E   A3           INC       DPTR
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   FB           MOV       R3,A
   \   000151   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1715                pBeaconIndBuf = NULL;
   \   000154   90....       MOV       DPTR,#pBeaconIndBuf
   \   000157   E4           CLR       A
   \   000158   F0           MOVX      @DPTR,A
   \   000159   A3           INC       DPTR
   \                     ??MT_ZdoBeaconIndCB_5:
   \   00015A   F0           MOVX      @DPTR,A
   1716              }
   1717            }
   1718          
   1719            return NULL;
   \                     ??MT_ZdoBeaconIndCB_2:
   \   00015B   7A00         MOV       R2,#0x0
   \   00015D   7B00         MOV       R3,#0x0
   \   00015F   7F03         MOV       R7,#0x3
   \   000161   02....       LJMP      ?BANKED_LEAVE_XDATA
   1720          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   75F015       MOV       B,#0x15
   \   000006   A4           MUL       AB
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F583         MOV       DPH,A
   \   000009   8882         MOV       DPL,R0
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000006   FD           MOV       R5,A
   \   000007   75F015       MOV       B,#0x15
   \   00000A   F583         MOV       DPH,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   A4           MUL       AB
   \   000010   04           INC       A
   \   000011   FB           MOV       R3,A
   \   000012   7AC5         MOV       R2,#-0x3b
   \   000014   7945         MOV       R1,#0x45
   \   000016   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000019   90....       MOV       DPTR,#pBeaconIndBuf
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F8           MOV       R0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine72_0
   \   000001                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET
   1721          
   1722          
   1723          
   1724          /***************************************************************************************************
   1725           * @fn          MT_ZdoJoinCnfCB
   1726           *
   1727           * @brief       Handle the ZDO Join Confirm from ZDO
   1728           *
   1729           * @param       pStr - pointer to a parameter and a structure of parameters
   1730           *
   1731           * @return      void
   1732           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1733          void *MT_ZdoJoinCnfCB ( void *pStr )
   \                     MT_ZdoJoinCnfCB:
   1734          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1735            /* pStr: zdoJoinCnf_t* */
   1736            /* Packet Format */
   1737            /* Status (1) | device addr (2) | parent addr (2) */
   1738          
   1739            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   1740            zdoJoinCnf_t *joinCnf = pStr;
   1741          
   1742            /* Join Complete. De-register the callback with ZDO */
   1743            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7904         MOV       R1,#0x4
   \   000010   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1744          
   1745            buf[0] = joinCnf->status;
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   E0           MOVX      A,@DPTR
   \   000018   85..82       MOV       DPL,?XSP + 0
   \   00001B   85..83       MOV       DPH,?XSP + 1
   \   00001E   12....       LCALL     ?Subroutine37 & 0xFFFF
   1746            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_73:
   \   000021   A3           INC       DPTR
   \   000022   A882         MOV       R0,DPL
   \   000024   A983         MOV       R1,DPH
   \   000026   E0           MOVX      A,@DPTR
   \   000027   C0E0         PUSH      A
   \   000029   7401         MOV       A,#0x1
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   D0E0         POP       A
   \   000030   12....       LCALL     ?Subroutine36 & 0xFFFF
   1747            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_67:
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   C0E0         PUSH      A
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   D0E0         POP       A
   \   00003E   F0           MOVX      @DPTR,A
   1748            buf[3] = LO_UINT16( joinCnf->parentAddr );
   \   00003F   EE           MOV       A,R6
   \   000040   2403         ADD       A,#0x3
   \   000042   F8           MOV       R0,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   F9           MOV       R1,A
   \   000046   8882         MOV       DPL,R0
   \   000048   F583         MOV       DPH,A
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   C0E0         PUSH      A
   \   00004D   7403         MOV       A,#0x3
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   D0E0         POP       A
   \   000054   12....       LCALL     ?Subroutine36 & 0xFFFF
   1749            buf[4] = HI_UINT16( joinCnf->parentAddr );
   \                     ??CrossCallReturnLabel_68:
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   C0E0         PUSH      A
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   D0E0         POP       A
   \   000062   F0           MOVX      @DPTR,A
   1750          
   1751            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1752                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   \   000063                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000063   AC..         MOV       R4,?XSP + 0
   \   000065   AD..         MOV       R5,?XSP + 1
   \   000067   7B05         MOV       R3,#0x5
   \   000069   7AC6         MOV       R2,#-0x3a
   \   00006B   7945         MOV       R1,#0x45
   \   00006D   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1753          
   1754            return NULL;
   \   000070   7A00         MOV       R2,#0x0
   \   000072   7B00         MOV       R3,#0x0
   \   000074   7405         MOV       A,#0x5
   \   000076   02....       LJMP      ??Subroutine66_0 & 0xFFFF
   1755          }
   1756          
   1757          /*************************************************************************************************
   1758           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   1759           *
   1760           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   1761           *
   1762           * @param   pBuf  - MT message data
   1763           *
   1764           * @return  void
   1765           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FF           MOV       R7,A
   \   000007                REQUIRE ??Subroutine62_0
   \   000007                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1766          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   \                     MT_ZdoRegisterForZDOMsg:
   1767          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1768            uint8 cmd0, cmd1, tmp;
   1769            uint16 cId;
   1770          
   1771            /* parse header */
   1772            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   12....       LCALL     ?Subroutine15 & 0xFFFF
   1773            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1774            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_122:
   \   00000D   5001         JNC       ??MT_ZdoRegisterForZDOMsg_0
   \   00000F   0B           INC       R3
   1775          
   1776            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1777            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   \                     ??MT_ZdoRegisterForZDOMsg_0:
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000013   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000016   12....       LCALL     ?Subroutine38 & 0xFFFF
   1778          
   1779            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_75:
   \   000019   700D         JNZ       ??MT_ZdoRegisterForZDOMsg_1
   1780            {
   1781              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   00001B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001B   AC..         MOV       R4,?XSP + 0
   \   00001D   AD..         MOV       R5,?XSP + 1
   \   00001F   7B01         MOV       R3,#0x1
   \   000021   EE           MOV       A,R6
   \   000022   FA           MOV       R2,A
   \   000023   7965         MOV       R1,#0x65
   \   000025   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1782            }
   1783          }
   \                     ??MT_ZdoRegisterForZDOMsg_1:
   \   000028   02....       LJMP      ??Subroutine70_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   39           ADDC      A,R1
   \   000006   FB           MOV       R3,A
   \   000007   90....       MOV       DPTR,#MT_TaskID
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   22           RET
   1784          
   1785          /*************************************************************************************************
   1786           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   1787           *
   1788           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   1789           *
   1790           * @param   pBuf  - MT message data
   1791           *
   1792           * @return  void
   1793           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1794          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   \                     MT_ZdoRemoveRegisteredCB:
   1795          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1796            uint8 cmd0, cmd1, tmp;
   1797            uint16 cId;
   1798          
   1799            /* parse header */
   1800            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   12....       LCALL     ?Subroutine15 & 0xFFFF
   1801            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1802            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_123:
   \   00000D   5001         JNC       ??MT_ZdoRemoveRegisteredCB_0
   \   00000F   0B           INC       R3
   1803          
   1804            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1805            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   \                     ??MT_ZdoRemoveRegisteredCB_0:
   \   000010                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   000010   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000013   12....       LCALL     `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
   \   000016   12....       LCALL     ?Subroutine38 & 0xFFFF
   1806          
   1807            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_76:
   \   000019   700D         JNZ       ??MT_ZdoRemoveRegisteredCB_1
   1808            {
   1809              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   00001B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001B   AC..         MOV       R4,?XSP + 0
   \   00001D   AD..         MOV       R5,?XSP + 1
   \   00001F   7B01         MOV       R3,#0x1
   \   000021   EE           MOV       A,R6
   \   000022   FA           MOV       R2,A
   \   000023   7965         MOV       R1,#0x65
   \   000025   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1810            }
   1811          }
   \                     ??MT_ZdoRemoveRegisteredCB_1:
   \   000028   02....       LJMP      ??Subroutine70_0 & 0xFFFF
   1812          
   1813          #endif /* MT_ZDO_FUNC */
   1814          
   1815          
   1816          /***************************************************************************************************
   1817           * Callback handling function
   1818           ***************************************************************************************************/
   1819          
   1820          #if defined (MT_ZDO_CB_FUNC)
   1821          
   1822          /***************************************************************************************************
   1823           * @fn      MT_ZdoStateChangeCB
   1824           *
   1825           * @brief   Handle state change OSAL message from ZDO.
   1826           *
   1827           * @param   pMsg  - Message data
   1828           *
   1829           * @return  void
   1830           */
   1831          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   1832          {
   1833            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1834                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   1835          }
   1836          
   1837          /***************************************************************************************************
   1838           * @fn     MT_ZdoDirectCB()
   1839           *
   1840           * @brief  ZDO direct callback.  Build an MT message directly from the
   1841           *         over-the-air ZDO message.
   1842           *
   1843           * @param  pData - Incoming AF frame.
   1844           *
   1845           * @return  none
   1846           ***************************************************************************************************/
   1847          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData,  zdoIncomingMsg_t *inMsg )
   1848          {
   1849            uint8 len, *pBuf;
   1850            uint16 origClusterId;
   1851          
   1852            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
   1853            origClusterId = pData->clusterId;
   1854          
   1855            // Is the message an exception or not a response?
   1856            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   1857            {
   1858              return;  // Handled somewhere else or not needed.
   1859            }
   1860          
   1861            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   1862             * two bytes for srcAddr.
   1863             */
   1864            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   1865          
   1866            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1867            {
   1868              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   1869          
   1870              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   1871              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   1872          
   1873              /* copy ZDO data, skipping one-byte sequence number */
   1874              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   1875          
   1876              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1877              osal_mem_free(pBuf);
   1878            }
   1879          }
   1880          
   1881          /***************************************************************************************************
   1882           * @fn     MT_ZdoHandleExceptions()
   1883           *
   1884           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   1885           *
   1886           * @param  pData - Incoming AF frame.
   1887           *
   1888           * @return  TRUE if handled by this function, FALSE if not
   1889           ***************************************************************************************************/
   1890          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   1891          {
   1892            uint8 ret = TRUE;
   1893            ZDO_NwkIEEEAddrResp_t *nwkRsp = NULL;
   1894            ZDO_DeviceAnnce_t devAnnce;
   1895            uint8 doDefault = FALSE;
   1896          
   1897            switch ( inMsg->clusterID )
   1898            {
   1899              case NWK_addr_rsp:
   1900              case IEEE_addr_rsp:
   1901                nwkRsp = ZDO_ParseAddrRsp( inMsg );
   1902                MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   1903                if ( nwkRsp )
   1904                {
   1905                  osal_mem_free( nwkRsp );
   1906                }
   1907                break;
   1908          
   1909              case Device_annce:
   1910                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   1911                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   1912                break;
   1913          
   1914              case Simple_Desc_rsp:
   1915                if ( pData->cmd.DataLength > 5 )
   1916                {
   1917                  ret = FALSE;
   1918                }
   1919                else
   1920                {
   1921                  doDefault = TRUE;
   1922                }
   1923                break;
   1924          
   1925              default:
   1926                ret = FALSE;
   1927                break;
   1928            }
   1929          
   1930            if ( doDefault )
   1931            {
   1932              ret = FALSE;
   1933              pData->clusterId = MtZdoDef_rsp;
   1934              pData->cmd.DataLength = 2;
   1935            }
   1936          
   1937            return ( ret );
   1938          }
   1939          
   1940          /***************************************************************************************************
   1941           * @fn      MT_ZdoAddrRspCB
   1942           *
   1943           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   1944           *
   1945           * @param   pMsg  - Message data
   1946           *
   1947           * @return  void
   1948           */
   1949          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   1950          {
   1951            uint8   listLen, len, *pBuf;
   1952          
   1953            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   1954          
   1955            /* get length, sanity check length */
   1956            listLen = pMsg->numAssocDevs;
   1957          
   1958            /* calculate msg length */
   1959            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   1960          
   1961            /* get buffer */
   1962            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1963            {
   1964              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   1965              uint8 *pTmp = pBuf;
   1966          
   1967              *pTmp++ = pMsg->status;
   1968          
   1969              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   1970              pTmp += Z_EXTADDR_LEN;
   1971          
   1972              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   1973              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   1974          
   1975              *pTmp++ = pMsg->startIndex;
   1976              *pTmp++ = listLen;
   1977          
   1978              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   1979          
   1980              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1981              osal_mem_free(pBuf);
   1982            }
   1983          }
   1984          
   1985          /***************************************************************************************************
   1986           * @fn      MT_ZdoEndDevAnnceCB
   1987           *
   1988           * @brief   Handle end device announce OSAL message from ZDO.
   1989           *
   1990           * @param   pMsg  - Message data
   1991           *
   1992           * @return  void
   1993           */
   1994          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   1995          {
   1996            uint8 *pBuf;
   1997          
   1998            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   1999            {
   2000              uint8 *pTmp = pBuf;
   2001          
   2002              *pTmp++ = LO_UINT16(srcAddr);
   2003              *pTmp++ = HI_UINT16(srcAddr);
   2004          
   2005              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2006              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2007          
   2008              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2009              pTmp += Z_EXTADDR_LEN;
   2010          
   2011              *pTmp = pMsg->capabilities;
   2012          
   2013              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2014                                                   MT_ZDO_END_DEVICE_ANNCE_IND,
   2015                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   2016              osal_mem_free(pBuf);
   2017            }
   2018          }
   2019          
   2020          /***************************************************************************************************
   2021           * @fn      MT_ZdoSrcRtgCB
   2022           *
   2023           * @brief   Handle Src Route from ZDO.
   2024           *
   2025           * @param   pStr  - pointer to the data structure for the src route
   2026           *
   2027           * @return  void*
   2028           */
   2029          void* MT_ZdoSrcRtgCB( void *pStr )
   2030          {
   2031            uint8 len, *pBuf;
   2032            zdoSrcRtg_t *pSrcRtg = pStr;
   2033          
   2034            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2035            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   2036          
   2037            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2038            {
   2039              uint8 idx, *pTmp = pBuf;
   2040              uint16 *pRelay;
   2041          
   2042              // Packet payload
   2043              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   2044              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   2045              *pTmp++ = pSrcRtg->relayCnt;
   2046          
   2047              // Relay List
   2048              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   2049              {
   2050                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   2051                {
   2052                  *pTmp++ = LO_UINT16(*pRelay);
   2053                  *pTmp++ = HI_UINT16(*pRelay);
   2054                  pRelay++;
   2055                }
   2056              }
   2057              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2058                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   2059              osal_mem_free(pBuf);
   2060            }
   2061          
   2062            return NULL;
   2063          }
   2064          
   2065          /***************************************************************************************************
   2066           * @fn          MT_ZdoConcentratorIndCB
   2067           *
   2068           * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
   2069           *
   2070           * @param       pStr - pointer to a parameter and a structure of parameters
   2071           *
   2072           * @return      NULL
   2073           ***************************************************************************************************/
   2074          static void *MT_ZdoConcentratorIndCB(void *pStr)
   2075          {
   2076            uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
   2077            zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
   2078          
   2079            *pTmp++ = LO_UINT16(pInd->nwkAddr);
   2080            *pTmp++ = HI_UINT16(pInd->nwkAddr);
   2081            pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
   2082            *pTmp = pInd->pktCost;
   2083          
   2084            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2085                                              MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
   2086            return NULL;
   2087          }
   2088          #endif // MT_ZDO_CB_FUNC
   2089          
   2090          /***************************************************************************************************
   2091           * @fn      MT_ZdoSendMsgCB
   2092           *
   2093           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2094           *
   2095           * @param   pMsg  - Message data
   2096           *
   2097           * @return  void
   2098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2099          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   2100          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   2101            uint8 len = pMsg->asduLen + 9;
   \   000009   EA           MOV       A,R2
   \   00000A   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00000D   2409         ADD       A,#0x9
   \   00000F   F5..         MOV       ?V3,A
   2102            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011   FA           MOV       R2,A
   \   000012   7B00         MOV       R3,#0x0
   \   000014   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000017   8A..         MOV       ?V0,R2
   \   000019   8B..         MOV       ?V1,R3
   \   00001B   AE..         MOV       R6,?V0
   \   00001D   AF..         MOV       R7,?V1
   2103          
   2104            if (pBuf != NULL)
   \   00001F   EA           MOV       A,R2
   \   000020   4F           ORL       A,R7
   \   000021   7003         JNZ       $+5
   \   000023   02....       LJMP      ??MT_ZdoSendMsgCB_0 & 0xFFFF
   2105            {
   2106              uint8 *pTmp = pBuf;
   2107          
   2108              // Assuming exclusive use of network short addresses.
   2109              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000026   E5..         MOV       A,?V4
   \   000028   2402         ADD       A,#0x2
   \   00002A   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00002D   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000030   12....       LCALL     ?Subroutine36 & 0xFFFF
   2110              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_69:
   \   000033   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000036   A3           INC       DPTR
   \   000037   F0           MOVX      @DPTR,A
   2111              *pTmp++ = pMsg->wasBroadcast;
   \   000038   E5..         MOV       A,?V4
   \   00003A   240B         ADD       A,#0xb
   \   00003C   F582         MOV       DPL,A
   \   00003E   E4           CLR       A
   \   00003F   35..         ADDC      A,?V5
   \   000041   12....       LCALL     ?Subroutine27 & 0xFFFF
   2112              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_50:
   \   000044   E5..         MOV       A,?V4
   \   000046   240C         ADD       A,#0xc
   \   000048   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00004B   12....       LCALL     ?Subroutine25 & 0xFFFF
   2113              *pTmp++ = HI_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_46:
   \   00004E   8882         MOV       DPL,R0
   \   000050   8983         MOV       DPH,R1
   \   000052   12....       LCALL     ?Subroutine24 & 0xFFFF
   2114              *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_44:
   \   000055   E5..         MOV       A,?V4
   \   000057   240E         ADD       A,#0xe
   \   000059   F582         MOV       DPL,A
   \   00005B   E4           CLR       A
   \   00005C   35..         ADDC      A,?V5
   \   00005E   F583         MOV       DPH,A
   \   000060   12....       LCALL     ?Subroutine22 & 0xFFFF
   2115              *pTmp++ = pMsg->TransSeq;
   \                     ??CrossCallReturnLabel_40:
   \   000063   E5..         MOV       A,?V4
   \   000065   240F         ADD       A,#0xf
   \   000067   F582         MOV       DPL,A
   \   000069   E4           CLR       A
   \   00006A   35..         ADDC      A,?V5
   \   00006C   F583         MOV       DPH,A
   \   00006E   12....       LCALL     ?Subroutine20 & 0xFFFF
   2116              // Skipping asduLen since it can be deduced from the RPC packet length.
   2117              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_38:
   \   000071   E5..         MOV       A,?V4
   \   000073   2411         ADD       A,#0x11
   \   000075   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000078   12....       LCALL     ?Subroutine19 & 0xFFFF
   2118              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_36:
   \   00007B   8882         MOV       DPL,R0
   \   00007D   8983         MOV       DPH,R1
   \   00007F   12....       LCALL     ?Subroutine13 & 0xFFFF
   2119              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \                     ??CrossCallReturnLabel_25:
   \   000082                ; Setup parameters for call to function osal_memcpy
   \   000082   E5..         MOV       A,?V4
   \   000084   2413         ADD       A,#0x13
   \   000086   F582         MOV       DPL,A
   \   000088   E4           CLR       A
   \   000089   35..         ADDC      A,?V5
   \   00008B   F583         MOV       DPH,A
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F5..         MOV       ?V0,A
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F5..         MOV       ?V1,A
   \   000094   75..00       MOV       ?V2,#0x0
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009C   E5..         MOV       A,?V4
   \   00009E   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000A1   FC           MOV       R4,A
   \   0000A2   7D00         MOV       R5,#0x0
   \   0000A4   EA           MOV       A,R2
   \   0000A5   2409         ADD       A,#0x9
   \   0000A7   FA           MOV       R2,A
   \   0000A8   E4           CLR       A
   \   0000A9   3F           ADDC      A,R7
   \   0000AA   FB           MOV       R3,A
   \   0000AB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AE   7403         MOV       A,#0x3
   \   0000B0   12....       LCALL     ?DEALLOC_XSTACK8
   2120          
   2121              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2122                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   0000B3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B3   EE           MOV       A,R6
   \   0000B4   FC           MOV       R4,A
   \   0000B5   EF           MOV       A,R7
   \   0000B6   FD           MOV       R5,A
   \   0000B7   AB..         MOV       R3,?V3
   \   0000B9   7AFF         MOV       R2,#-0x1
   \   0000BB   7945         MOV       R1,#0x45
   \   0000BD   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2123          
   2124              osal_mem_free(pBuf);
   \   0000C0                ; Setup parameters for call to function osal_mem_free
   \   0000C0   EE           MOV       A,R6
   \   0000C1   FA           MOV       R2,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   FB           MOV       R3,A
   \   0000C4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2125            }
   2126          }
   \                     ??MT_ZdoSendMsgCB_0:
   \   0000C7   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   2410         ADD       A,#0x10
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V5
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V5
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNWKAddressRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNWKAddressRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoIEEEAddrRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoIEEEAddrRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNodeDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNodeDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoPowerDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoPowerDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSimpleDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSimpleDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoActiveEpRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoActiveEpRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMatchDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMatchDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoComplexDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoComplexDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoServiceDiscRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoServiceDiscRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUnbindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUnbindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoStartupFromApp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStartupFromApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNwkDiscoveryCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkDiscoveryCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBeaconIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBeaconIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoJoinCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSendMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendMsgCB
   2127          
   2128          #endif   /*ZDO Command Processing in MT*/
   2129          /***************************************************************************************************
   2130          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     29   MT_ZdoActiveEpRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     23   MT_ZdoBeaconIndCB
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> osal_mem_alloc
        0     11   -> osal_mem_free
        0     14   -> osal_memcpy
      1     52   MT_ZdoBindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> sAddrExtCpy
      0      9   MT_ZdoCommandProcessing
        0      9   -> MT_ZdoActiveEpRequest
        0      9   -> MT_ZdoBindRequest
        0      9   -> MT_ZdoComplexDescRequest
        0      9   -> MT_ZdoEndDevAnnce
        0      9   -> MT_ZdoEndDevBindRequest
        0      9   -> MT_ZdoIEEEAddrRequest
        0      9   -> MT_ZdoJoinReq
        0      9   -> MT_ZdoMatchDescRequest
        0      9   -> MT_ZdoNWKAddressRequest
        0      9   -> MT_ZdoNetworkDiscoveryReq
        0      9   -> MT_ZdoNodeDescRequest
        0      9   -> MT_ZdoPowerDescRequest
        0      9   -> MT_ZdoRegisterForZDOMsg
        0      9   -> MT_ZdoRemoveRegisteredCB
        0      9   -> MT_ZdoServiceDiscRequest
        0      9   -> MT_ZdoSimpleDescRequest
        0      9   -> MT_ZdoStartupFromApp
        0      9   -> MT_ZdoUnbindRequest
        0      9   -> MT_ZdoUserDescRequest
        0      9   -> MT_ZdoUserDescSet
      1     29   MT_ZdoComplexDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     20   MT_ZdoEndDevAnnce
        0     10   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_DeviceAnnce
      1    103   MT_ZdoEndDevBindRequest
        0     85   -> MT_BuildAndSendZToolResponse
        0     94   -> ZDP_EndDeviceBindReq
      1     20   MT_ZdoIEEEAddrRequest
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_IEEEAddrReq
      0      0   MT_ZdoInit
      1     14   MT_ZdoJoinCnfCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDO_DeregisterForZdoCB
      1     26   MT_ZdoJoinReq
        0     13   -> MT_BuildAndSendZToolResponse
        0     17   -> ZDApp_JoinReq
        0     13   -> ZDO_RegisterForZdoCB
      1    105   MT_ZdoMatchDescRequest
        0     88   -> MT_BuildAndSendZToolResponse
        0     96   -> ZDP_MatchDescReq
      1     20   MT_ZdoNWKAddressRequest
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_NwkAddrReq
      1     23   MT_ZdoNetworkDiscoveryReq
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDApp_NetworkDiscoveryReq
        0     14   -> ZDO_RegisterForZdoCB
        0     14   -> osal_build_uint32
      1     29   MT_ZdoNodeDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      0      9   MT_ZdoNwkDiscoveryCnfCB
        0      9   -> MT_BuildAndSendZToolResponse
        0      9   -> MT_ZdoBeaconIndCB
        0      9   -> ZDO_DeregisterForZdoCB
      1     29   MT_ZdoPowerDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     19   MT_ZdoRegisterForZDOMsg
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDO_RegisterForZDOMsg
      1     19   MT_ZdoRemoveRegisteredCB
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDO_RemoveRegisteredCB
      1     17   MT_ZdoSendMsgCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     17   -> osal_memcpy
      1     19   MT_ZdoServiceDiscRequest
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDP_ServerDiscReq
      1     29   MT_ZdoSimpleDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_SimpleDescReq
      1     19   MT_ZdoStartupFromApp
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDOInitDevice
      1     52   MT_ZdoUnbindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> sAddrExtCpy
      1     29   MT_ZdoUserDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     51   MT_ZdoUserDescSet
        0     39   -> MT_BuildAndSendZToolResponse
        0     41   -> ZDP_UserDescSet
        0     42   -> osal_memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??Subroutine60_0
       5  ??Subroutine61_0
       4  ??Subroutine62_0
       8  ??Subroutine63_0
       6  ??Subroutine64_0
      10  ??Subroutine65_0
       3  ??Subroutine66_0
       5  ??Subroutine67_0
       9  ??Subroutine68_0
       8  ??Subroutine69_0
       5  ??Subroutine70_0
       9  ??Subroutine71_0
       6  ??Subroutine72_0
       3  ?Subroutine0
      13  ?Subroutine1
      12  ?Subroutine10
      13  ?Subroutine11
      10  ?Subroutine12
       5  ?Subroutine13
      13  ?Subroutine14
       7  ?Subroutine15
       4  ?Subroutine16
       9  ?Subroutine17
       8  ?Subroutine18
       6  ?Subroutine19
       5  ?Subroutine2
       5  ?Subroutine20
       6  ?Subroutine21
       6  ?Subroutine22
       4  ?Subroutine23
       6  ?Subroutine24
       5  ?Subroutine25
      17  ?Subroutine26
      11  ?Subroutine27
       1  ?Subroutine28
       8  ?Subroutine29
       8  ?Subroutine3
       8  ?Subroutine30
      10  ?Subroutine31
      22  ?Subroutine32
      22  ?Subroutine33
      17  ?Subroutine34
      10  ?Subroutine35
       6  ?Subroutine36
       6  ?Subroutine37
      14  ?Subroutine38
      11  ?Subroutine39
      23  ?Subroutine4
      10  ?Subroutine40
       6  ?Subroutine41
      10  ?Subroutine42
      11  ?Subroutine43
      11  ?Subroutine44
      12  ?Subroutine45
      13  ?Subroutine46
       7  ?Subroutine47
      12  ?Subroutine48
       2  ?Subroutine49
       3  ?Subroutine5
       4  ?Subroutine50
      10  ?Subroutine51
      13  ?Subroutine52
       5  ?Subroutine53
      20  ?Subroutine54
       9  ?Subroutine55
       7  ?Subroutine56
       2  ?Subroutine57
       4  ?Subroutine58
       9  ?Subroutine59
      60  ?Subroutine6
      33  ?Subroutine7
      12  ?Subroutine8
      13  ?Subroutine9
      46  MT_ZdoActiveEpRequest
       6  MT_ZdoActiveEpRequest::?relay
     356  MT_ZdoBeaconIndCB
       6  MT_ZdoBeaconIndCB::?relay
     143  MT_ZdoBindRequest
       6  MT_ZdoBindRequest::?relay
     186  MT_ZdoCommandProcessing
       6  MT_ZdoCommandProcessing::?relay
      46  MT_ZdoComplexDescRequest
       6  MT_ZdoComplexDescRequest::?relay
      72  MT_ZdoEndDevAnnce
       6  MT_ZdoEndDevAnnce::?relay
     325  MT_ZdoEndDevBindRequest
       6  MT_ZdoEndDevBindRequest::?relay
      47  MT_ZdoIEEEAddrRequest
       6  MT_ZdoIEEEAddrRequest::?relay
       3  MT_ZdoInit
       6  MT_ZdoInit::?relay
     121  MT_ZdoJoinCnfCB
       6  MT_ZdoJoinCnfCB::?relay
     131  MT_ZdoJoinReq
       6  MT_ZdoJoinReq::?relay
     322  MT_ZdoMatchDescRequest
       6  MT_ZdoMatchDescRequest::?relay
      50  MT_ZdoNWKAddressRequest
       6  MT_ZdoNWKAddressRequest::?relay
      86  MT_ZdoNetworkDiscoveryReq
       6  MT_ZdoNetworkDiscoveryReq::?relay
      54  MT_ZdoNodeDescRequest
       6  MT_ZdoNodeDescRequest::?relay
      46  MT_ZdoNwkDiscoveryCnfCB
       6  MT_ZdoNwkDiscoveryCnfCB::?relay
      46  MT_ZdoPowerDescRequest
       6  MT_ZdoPowerDescRequest::?relay
      43  MT_ZdoRegisterForZDOMsg
       6  MT_ZdoRegisterForZDOMsg::?relay
      43  MT_ZdoRemoveRegisteredCB
       6  MT_ZdoRemoveRegisteredCB::?relay
     202  MT_ZdoSendMsgCB
       6  MT_ZdoSendMsgCB::?relay
      30  MT_ZdoServiceDiscRequest
       6  MT_ZdoServiceDiscRequest::?relay
      61  MT_ZdoSimpleDescRequest
       6  MT_ZdoSimpleDescRequest::?relay
      52  MT_ZdoStartupFromApp
       6  MT_ZdoStartupFromApp::?relay
     146  MT_ZdoUnbindRequest
       6  MT_ZdoUnbindRequest::?relay
      46  MT_ZdoUserDescRequest
       6  MT_ZdoUserDescRequest::?relay
     153  MT_ZdoUserDescSet
       6  MT_ZdoUserDescSet::?relay
       4  _zdoCallbackSub
       2  pBeaconIndBuf

 
 3 568 bytes in segment BANKED_CODE
   156 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_Z
 
   156 bytes of CODE     memory
 3 568 bytes of HUGECODE memory
     6 bytes of XDATA    memory

Errors: none
Warnings: none
