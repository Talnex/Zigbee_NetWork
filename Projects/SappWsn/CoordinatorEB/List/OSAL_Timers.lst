###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               03/Sep/2019  18:46:35
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Components\osal\common\OSAL_Timers.c
#    Command line       =  
#        -f C:\Users\talnex\AppData\Local\Temp\EWBC27.tmp
#        (\\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Components\osal\common\OSAL_Timers.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D SAPP_ZSTACK
#        -lC
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\List
#        -lA
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x4545
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\ -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\Source\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\zstack\ZMain\TI2530DB\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\include\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\include\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\high_level\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mt\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\osal\include\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\saddr\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\sdata\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\af\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\nwk\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sapi\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sec\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sys\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\zdo\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\f8w\
#        -Ohz --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\List\OSAL_Timers.lst
#    Object file        =  
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\Obj\OSAL_Timers.r51
#
###############################################################################

\\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Components\osal\common\OSAL_Timers.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Timers.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $
      5          
      6            Description:    OSAL Timer definition and manipulation functions.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "comdef.h"
     45          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     46          #include "OSAL.h"
     47          #include "OSAL_Timers.h"
     48          #include "hal_timer.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          
     62          typedef struct
     63          {
     64            void   *next;
     65            uint16 timeout;
     66            uint16 event_flag;
     67            uint8  task_id;
     68            uint16 reloadTimeout;
     69          } osalTimerRec_t;
     70          
     71          /*********************************************************************
     72           * GLOBAL VARIABLES
     73           */
     74          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          osalTimerRec_t *timerHead;
   \                     timerHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     76          
     77          /*********************************************************************
     78           * EXTERNAL VARIABLES
     79           */
     80          
     81          /*********************************************************************
     82           * EXTERNAL FUNCTIONS
     83           */
     84          
     85          /*********************************************************************
     86           * LOCAL VARIABLES
     87           */
     88          // Milliseconds since last reboot

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          static uint32 osal_systemClock;
   \                     osal_systemClock:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     90          
     91          /*********************************************************************
     92           * LOCAL FUNCTION PROTOTYPES
     93           */
     94          osalTimerRec_t  *osalAddTimer( uint8 task_id, uint16 event_flag, uint16 timeout );
     95          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag );
     96          void osalDeleteTimer( osalTimerRec_t *rmTimer );
     97          
     98          /*********************************************************************
     99           * FUNCTIONS
    100           *********************************************************************/
    101          
    102          /*********************************************************************
    103           * @fn      osalTimerInit
    104           *
    105           * @brief   Initialization for the OSAL Timer System.
    106           *
    107           * @param   none
    108           *
    109           * @return
    110           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    111          void osalTimerInit( void )
   \                     osalTimerInit:
    112          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    113            osal_systemClock = 0;
   \   000004   90....       MOV       DPTR,#osal_systemClock
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   F0           MOVX      @DPTR,A
    114          }
   \   00000F   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    115          
    116          /*********************************************************************
    117           * @fn      osalAddTimer
    118           *
    119           * @brief   Add a timer to the timer list.
    120           *          Ints must be disabled.
    121           *
    122           * @param   task_id
    123           * @param   event_flag
    124           * @param   timeout
    125           *
    126           * @return  osalTimerRec_t * - pointer to newly created timer
    127           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    128          osalTimerRec_t * osalAddTimer( uint8 task_id, uint16 event_flag, uint16 timeout )
   \                     osalAddTimer:
    129          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    130            osalTimerRec_t *newTimer;
    131            osalTimerRec_t *srchTimer;
    132          
    133            // Look for an existing timer first
    134            newTimer = osalFindTimer( task_id, event_flag );
   \   00000F                ; Setup parameters for call to function osalFindTimer
   \   00000F   12....       LCALL     `??osalFindTimer::?relay`; Banked call to: osalFindTimer
    135            if ( newTimer )
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   600C         JZ        ??osalAddTimer_0
    136            {
    137              // Timer is found - update it.
    138              newTimer->timeout = timeout;
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   EE           MOV       A,R6
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   EF           MOV       A,R7
   \   000020   8063         SJMP      ??osalAddTimer_1
    139          
    140              return ( newTimer );
    141            }
    142            else
    143            {
    144              // New Timer
    145              newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
   \                     ??osalAddTimer_0:
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   7A09         MOV       R2,#0x9
   \   000024   7B00         MOV       R3,#0x0
   \   000026   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    146          
    147              if ( newTimer )
   \   000029   EA           MOV       A,R2
   \   00002A   4B           ORL       A,R3
   \   00002B   605B         JZ        ??osalAddTimer_2
    148              {
    149                // Fill in new timer
    150                newTimer->task_id = task_id;
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E5..         MOV       A,?V2
   \   000039   12....       LCALL     ?Subroutine3 & 0xFFFF
    151                newTimer->event_flag = event_flag;
   \                     ??CrossCallReturnLabel_0:
   \   00003C   E5..         MOV       A,?V0
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E5..         MOV       A,?V1
   \   000042   F0           MOVX      @DPTR,A
    152                newTimer->timeout = timeout;
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   EE           MOV       A,R6
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   EF           MOV       A,R7
   \   00004D   F0           MOVX      @DPTR,A
    153                newTimer->next = (void *)NULL;
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   E4           CLR       A
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   12....       LCALL     ?Subroutine3 & 0xFFFF
    154                newTimer->reloadTimeout = 0;
   \                     ??CrossCallReturnLabel_1:
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   F0           MOVX      @DPTR,A
    155          
    156                // Does the timer list already exist
    157                if ( timerHead == NULL )
   \   00005E   90....       MOV       DPTR,#timerHead
   \   000061   12....       LCALL     ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000064   7008         JNZ       ??osalAddTimer_3
    158                {
    159                  // Start task list
    160                  timerHead = newTimer;
   \   000066   90....       MOV       DPTR,#timerHead
   \   000069   8016         SJMP      ??osalAddTimer_4
    161                }
    162                else
    163                {
    164                  // Add it to the end of the timer list
    165                  srchTimer = timerHead;
    166          
    167                  // Stop at the last record
    168                  while ( srchTimer->next )
    169                    srchTimer = srchTimer->next;
   \                     ??osalAddTimer_5:
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F8           MOV       R0,A
   \   00006D   A3           INC       DPTR
   \                     ??osalAddTimer_3:
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F9           MOV       R1,A
   \   000070   8882         MOV       DPL,R0
   \   000072   8983         MOV       DPH,R1
   \   000074   E0           MOVX      A,@DPTR
   \   000075   FC           MOV       R4,A
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   FD           MOV       R5,A
   \   000079   EC           MOV       A,R4
   \   00007A   4D           ORL       A,R5
   \   00007B   8882         MOV       DPL,R0
   \   00007D   8983         MOV       DPH,R1
   \   00007F   70EA         JNZ       ??osalAddTimer_5
    170          
    171                  // Add to the list
    172                  srchTimer->next = newTimer;
   \                     ??osalAddTimer_4:
   \   000081   EA           MOV       A,R2
   \   000082   F0           MOVX      @DPTR,A
   \   000083   A3           INC       DPTR
   \   000084   EB           MOV       A,R3
   \                     ??osalAddTimer_1:
   \   000085   F0           MOVX      @DPTR,A
    173                }
    174          
    175                return ( newTimer );
   \   000086   8004         SJMP      ??osalAddTimer_6
    176              }
    177              else
    178                return ( (osalTimerRec_t *)NULL );
   \                     ??osalAddTimer_2:
   \   000088   7A00         MOV       R2,#0x0
   \   00008A   7B00         MOV       R3,#0x0
   \                     ??osalAddTimer_6:
   \   00008C   7F06         MOV       R7,#0x6
   \   00008E   02....       LJMP      ?BANKED_LEAVE_XDATA
    179            }
    180          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET
    181          
    182          /*********************************************************************
    183           * @fn      osalFindTimer
    184           *
    185           * @brief   Find a timer in a timer list.
    186           *          Ints must be disabled.
    187           *
    188           * @param   task_id
    189           * @param   event_flag
    190           *
    191           * @return  osalTimerRec_t *
    192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    193          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag )
   \                     osalFindTimer:
    194          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    195            osalTimerRec_t *srchTimer;
    196          
    197            // Head of the timer list
    198            srchTimer = timerHead;
   \   000004   90....       MOV       DPTR,#timerHead
   \   000007   8004         SJMP      ??osalFindTimer_0
    199          
    200            // Stop when found or at the end
    201            while ( srchTimer )
    202            {
    203              if ( srchTimer->event_flag == event_flag &&
    204                   srchTimer->task_id == task_id )
    205                break;
    206          
    207              // Not this one, check another
    208              srchTimer = srchTimer->next;
   \                     ??osalFindTimer_1:
   \   000009   8C82         MOV       DPL,R4
   \   00000B   8D83         MOV       DPH,R5
   \                     ??osalFindTimer_0:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FC           MOV       R4,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FD           MOV       R5,A
   \   000012   EC           MOV       A,R4
   \   000013   4D           ORL       A,R5
   \   000014   601F         JZ        ??osalFindTimer_2
   \   000016   8C82         MOV       DPL,R4
   \   000018   8D83         MOV       DPH,R5
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6A           XRL       A,R2
   \   000020   7003         JNZ       ??osalFindTimer_3
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6B           XRL       A,R3
   \                     ??osalFindTimer_3:
   \   000025   70E2         JNZ       ??osalFindTimer_1
   \   000027   8C82         MOV       DPL,R4
   \   000029   8D83         MOV       DPH,R5
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   69           XRL       A,R1
   \   000033   70D4         JNZ       ??osalFindTimer_1
    209            }
    210          
    211            return ( srchTimer );
   \                     ??osalFindTimer_2:
   \   000035   EC           MOV       A,R4
   \   000036   FA           MOV       R2,A
   \   000037   ED           MOV       A,R5
   \   000038   FB           MOV       R3,A
   \   000039   80..         SJMP      ?Subroutine0
    212          }
    213          
    214          /*********************************************************************
    215           * @fn      osalDeleteTimer
    216           *
    217           * @brief   Delete a timer from a timer list.
    218           *
    219           * @param   table
    220           * @param   rmTimer
    221           *
    222           * @return  none
    223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    224          void osalDeleteTimer( osalTimerRec_t *rmTimer )
   \                     osalDeleteTimer:
    225          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    226            // Does the timer list really exist
    227            if ( rmTimer )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   600C         JZ        ??osalDeleteTimer_0
    228            {
    229              // Clear the event flag and osalTimerUpdate() will delete 
    230              // the timer from the list.
    231              rmTimer->event_flag = 0;
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    232            }
    233          }
   \                     ??osalDeleteTimer_0:
   \   000014                REQUIRE ?Subroutine0
   \   000014                ; // Fall through to label ?Subroutine0
    234          
    235          /*********************************************************************
    236           * @fn      osal_start_timerEx
    237           *
    238           * @brief
    239           *
    240           *   This function is called to start a timer to expire in n mSecs.
    241           *   When the timer expires, the calling task will get the specified event.
    242           *
    243           * @param   uint8 taskID - task id to set timer for
    244           * @param   uint16 event_id - event to be notified with
    245           * @param   UNINT16 timeout_value - in milliseconds.
    246           *
    247           * @return  SUCCESS, or NO_TIMER_AVAIL.
    248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint16 timeout_value )
   \                     osal_start_timerEx:
    250          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    251            halIntState_t intState;
    252            osalTimerRec_t *newTimer;
    253          
    254            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000005   AEA8         MOV       R6,0xa8+0x0
   \   000007   C2AF         CLR       0xa8.7
    255          
    256            // Add timer
    257            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   000009                ; Setup parameters for call to function osalAddTimer
   \   000009   12....       LCALL     `??osalAddTimer::?relay`; Banked call to: osalAddTimer
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A9..         MOV       R1,?V1
    258          
    259            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000010   EE           MOV       A,R6
   \   000011   A2E7         MOV       C,0xE0 /* A   */.7
   \   000013   92AF         MOV       0xa8.7,C
    260          
    261            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   000015   EA           MOV       A,R2
   \   000016   49           ORL       A,R1
   \   000017   6004         JZ        ??osal_start_timerEx_0
   \   000019   7900         MOV       R1,#0x0
   \   00001B   8002         SJMP      ??osal_start_timerEx_1
   \                     ??osal_start_timerEx_0:
   \   00001D   7908         MOV       R1,#0x8
   \                     ??osal_start_timerEx_1:
   \   00001F   7F02         MOV       R7,#0x2
   \   000021   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000024                REQUIRE _A_IEN0
    262          }
    263          
    264          /*********************************************************************
    265           * @fn      osal_start_reload_timer
    266           *
    267           * @brief
    268           *
    269           *   This function is called to start a timer to expire in n mSecs.
    270           *   When the timer expires, the calling task will get the specified event
    271           *   and the timer will be reloaded with the timeout value.
    272           *
    273           * @param   uint8 taskID - task id to set timer for
    274           * @param   uint16 event_id - event to be notified with
    275           * @param   UNINT16 timeout_value - in milliseconds.
    276           *
    277           * @return  SUCCESS, or NO_TIMER_AVAIL.
    278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint16 timeout_value )
   \                     osal_start_reload_timer:
    280          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
    281            halIntState_t intState;
    282            osalTimerRec_t *newTimer;
    283          
    284            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   FE           MOV       R6,A
   \   00000E   C2AF         CLR       0xa8.7
    285          
    286            // Add timer
    287            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   000010                ; Setup parameters for call to function osalAddTimer
   \   000010   12....       LCALL     `??osalAddTimer::?relay`; Banked call to: osalAddTimer
   \   000013   8B..         MOV       ?V3,R3
   \   000015   A9..         MOV       R1,?V3
    288            if ( newTimer )
   \   000017   EA           MOV       A,R2
   \   000018   49           ORL       A,R1
   \   000019   6012         JZ        ??osal_start_reload_timer_0
    289            {
    290              // Load the reload timeout value
    291              newTimer->reloadTimeout = timeout_value;
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E5..         MOV       A,?V0
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   E5..         MOV       A,?V1
   \   00002C   F0           MOVX      @DPTR,A
    292            }
    293          
    294            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_start_reload_timer_0:
   \   00002D   EE           MOV       A,R6
   \   00002E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000030   92AF         MOV       0xa8.7,C
    295          
    296            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   000032   EA           MOV       A,R2
   \   000033   49           ORL       A,R1
   \   000034   6004         JZ        ??osal_start_reload_timer_1
   \   000036   7900         MOV       R1,#0x0
   \   000038   8002         SJMP      ??osal_start_reload_timer_2
   \                     ??osal_start_reload_timer_1:
   \   00003A   7908         MOV       R1,#0x8
   \                     ??osal_start_reload_timer_2:
   \   00003C                REQUIRE ?Subroutine1
   \   00003C                REQUIRE _A_IEN0
   \   00003C                ; // Fall through to label ?Subroutine1
    297          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    298          
    299          /*********************************************************************
    300           * @fn      osal_stop_timerEx
    301           *
    302           * @brief
    303           *
    304           *   This function is called to stop a timer that has already been started.
    305           *   If ZSUCCESS, the function will cancel the timer and prevent the event
    306           *   associated with the timer from being set for the calling task.
    307           *
    308           * @param   uint8 task_id - task id of timer to stop
    309           * @param   uint16 event_id - identifier of the timer that is to be stopped
    310           *
    311           * @return  SUCCESS or INVALID_EVENT_ID
    312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id )
   \                     osal_stop_timerEx:
    314          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    315            halIntState_t intState;
    316            osalTimerRec_t *foundTimer;
    317          
    318            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   F5..         MOV       ?V0,A
   \   00000B   C2AF         CLR       0xa8.7
    319          
    320            // Find the timer to stop
    321            foundTimer = osalFindTimer( task_id, event_id );
   \   00000D                ; Setup parameters for call to function osalFindTimer
   \   00000D   12....       LCALL     `??osalFindTimer::?relay`; Banked call to: osalFindTimer
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   AF..         MOV       R7,?V3
    322            if ( foundTimer )
   \   000016   EA           MOV       A,R2
   \   000017   4F           ORL       A,R7
   \   000018   6003         JZ        ??osal_stop_timerEx_0
    323            {
    324              osalDeleteTimer( foundTimer );
   \   00001A                ; Setup parameters for call to function osalDeleteTimer
   \   00001A   12....       LCALL     `??osalDeleteTimer::?relay`; Banked call to: osalDeleteTimer
    325            }
    326          
    327            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_stop_timerEx_0:
   \   00001D   E5..         MOV       A,?V0
   \   00001F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000021   92AF         MOV       0xa8.7,C
    328          
    329            return ( (foundTimer != NULL) ? SUCCESS : INVALID_EVENT_ID );
   \   000023   E5..         MOV       A,?V2
   \   000025   4F           ORL       A,R7
   \   000026   6004         JZ        ??osal_stop_timerEx_1
   \   000028   7900         MOV       R1,#0x0
   \   00002A   8002         SJMP      ??osal_stop_timerEx_2
   \                     ??osal_stop_timerEx_1:
   \   00002C   7906         MOV       R1,#0x6
   \                     ??osal_stop_timerEx_2:
   \   00002E   80..         SJMP      ?Subroutine1
   \   000030                REQUIRE _A_IEN0
    330          }
    331          
    332          /*********************************************************************
    333           * @fn      osal_get_timeoutEx
    334           *
    335           * @brief
    336           *
    337           * @param   uint8 task_id - task id of timer to check
    338           * @param   uint16 event_id - identifier of timer to be checked
    339           *
    340           * @return  Return the timer's tick count if found, zero otherwise.
    341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    342          uint16 osal_get_timeoutEx( uint8 task_id, uint16 event_id )
   \                     osal_get_timeoutEx:
    343          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    344            halIntState_t intState;
    345            uint16 rtrn = 0;
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7F00         MOV       R7,#0x0
    346            osalTimerRec_t *tmr;
    347          
    348            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   C2AF         CLR       0xa8.7
    349          
    350            tmr = osalFindTimer( task_id, event_id );
   \   000011                ; Setup parameters for call to function osalFindTimer
   \   000011   12....       LCALL     `??osalFindTimer::?relay`; Banked call to: osalFindTimer
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
    351          
    352            if ( tmr )
   \   000018   E582         MOV       A,DPL
   \   00001A   4583         ORL       A,DPH
   \   00001C   6007         JZ        ??osal_get_timeoutEx_0
    353            {
    354              rtrn = tmr->timeout;
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FE           MOV       R6,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FF           MOV       R7,A
    355            }
    356          
    357            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_get_timeoutEx_0:
   \   000025   E5..         MOV       A,?V0
   \   000027   A2E0         MOV       C,0xE0 /* A   */.0
   \   000029   92AF         MOV       0xa8.7,C
    358          
    359            return rtrn;
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   80..         SJMP      ?Subroutine1
   \   000031                REQUIRE _A_IEN0
    360          }
    361          
    362          /*********************************************************************
    363           * @fn      osal_timer_num_active
    364           *
    365           * @brief
    366           *
    367           *   This function counts the number of active timers.
    368           *
    369           * @return  uint8 - number of timers
    370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          uint8 osal_timer_num_active( void )
   \                     osal_timer_num_active:
    372          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    373            halIntState_t intState;
    374            uint8 num_timers = 0;
   \   000004   7900         MOV       R1,#0x0
    375            osalTimerRec_t *srchTimer;
    376          
    377            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000006   A2AF         MOV       C,0xa8.7
   \   000008   E4           CLR       A
   \   000009   33           RLC       A
   \   00000A   F8           MOV       R0,A
   \   00000B   C2AF         CLR       0xa8.7
    378          
    379            // Head of the timer list
    380            srchTimer = timerHead;
   \   00000D   90....       MOV       DPTR,#timerHead
   \   000010   8001         SJMP      ??osal_timer_num_active_0
    381          
    382            // Count timers in the list
    383            while ( srchTimer != NULL )
    384            {
    385              num_timers++;
   \                     ??osal_timer_num_active_1:
   \   000012   09           INC       R1
    386              srchTimer = srchTimer->next;
   \                     ??osal_timer_num_active_0:
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FA           MOV       R2,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   8A82         MOV       DPL,R2
   \   000019   F583         MOV       DPH,A
    387            }
   \   00001B   E582         MOV       A,DPL
   \   00001D   4583         ORL       A,DPH
   \   00001F   70F1         JNZ       ??osal_timer_num_active_1
    388          
    389            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000021   E8           MOV       A,R0
   \   000022   A2E0         MOV       C,0xE0 /* A   */.0
   \   000024   92AF         MOV       0xa8.7,C
    390          
    391            return num_timers;
   \   000026   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   000029                REQUIRE _A_IEN0
    392          }
    393          
    394          /*********************************************************************
    395           * @fn      osalTimerUpdate
    396           *
    397           * @brief   Update the timer structures for a timer tick.
    398           *
    399           * @param   none
    400           *
    401           * @return  none
    402           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          void osalTimerUpdate( uint16 updateTime )
   \                     osalTimerUpdate:
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    405            halIntState_t intState;
    406            osalTimerRec_t *srchTimer;
    407            osalTimerRec_t *prevTimer;
    408          
    409            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000009   A9A8         MOV       R1,0xa8+0x0
   \   00000B   C2AF         CLR       0xa8.7
    410            // Update the system time
    411            osal_systemClock += updateTime;
   \   00000D   8A..         MOV       ?V4,R2
   \   00000F   8B..         MOV       ?V5,R3
   \   000011   E4           CLR       A
   \   000012   F5..         MOV       ?V6,A
   \   000014   F5..         MOV       ?V7,A
   \   000016   90....       MOV       DPTR,#osal_systemClock
   \   000019   78..         MOV       R0,#?V4
   \   00001B   12....       LCALL     ?L_ADD_TO_X
    412            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00001E   E9           MOV       A,R1
   \   00001F   A2E7         MOV       C,0xE0 /* A   */.7
   \   000021   92AF         MOV       0xa8.7,C
    413          
    414            // Look for open timer slot
    415            if ( timerHead != NULL )
   \   000023   90....       MOV       DPTR,#timerHead
   \   000026   12....       LCALL     ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000029   7003         JNZ       $+5
   \   00002B   02....       LJMP      ??osalTimerUpdate_0 & 0xFFFF
    416            {
    417              // Add it to the end of the timer list
    418              srchTimer = timerHead;
   \   00002E   90....       MOV       DPTR,#timerHead
   \   000031   E0           MOVX      A,@DPTR
   \   000032   FE           MOV       R6,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   FF           MOV       R7,A
    419              prevTimer = (void *)NULL;
   \   000036   75..00       MOV       ?V4,#0x0
   \   000039   75..00       MOV       ?V5,#0x0
    420          
    421              // Look for open timer slot
    422              while ( srchTimer )
    423              {
    424                osalTimerRec_t *freeTimer = NULL;
   \                     ??osalTimerUpdate_1:
   \   00003C   75..00       MOV       ?V2,#0x0
   \   00003F   75..00       MOV       ?V3,#0x0
    425               
    426                HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000042   A2AF         MOV       C,0xa8.7
   \   000044   E4           CLR       A
   \   000045   33           RLC       A
   \   000046   F5..         MOV       ?V6,A
   \   000048   C2AF         CLR       0xa8.7
    427                
    428                if (srchTimer->timeout <= updateTime)
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000051   E5..         MOV       A,?V0
   \   000053   98           SUBB      A,R0
   \   000054   E5..         MOV       A,?V1
   \   000056   99           SUBB      A,R1
   \   000057   400C         JC        ??osalTimerUpdate_2
    429                {
    430                  srchTimer->timeout = 0;
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E4           CLR       A
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   F0           MOVX      @DPTR,A
   \   000063   801E         SJMP      ??osalTimerUpdate_3
    431                }
    432                else
    433                {
    434                  srchTimer->timeout = srchTimer->timeout - updateTime;
   \                     ??osalTimerUpdate_2:
   \   000065   EE           MOV       A,R6
   \   000066   2402         ADD       A,#0x2
   \   000068   F8           MOV       R0,A
   \   000069   E4           CLR       A
   \   00006A   3F           ADDC      A,R7
   \   00006B   F9           MOV       R1,A
   \   00006C   8882         MOV       DPL,R0
   \   00006E   F583         MOV       DPH,A
   \   000070   C3           CLR       C
   \   000071   E0           MOVX      A,@DPTR
   \   000072   95..         SUBB      A,?V0
   \   000074   F0           MOVX      @DPTR,A
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   95..         SUBB      A,?V1
   \   000079   F0           MOVX      @DPTR,A
    435                }
    436                
    437                // Check for reloading
    438                if ( (srchTimer->timeout == 0) && (srchTimer->reloadTimeout) && (srchTimer->event_flag) )
   \   00007A   8882         MOV       DPL,R0
   \   00007C   8983         MOV       DPH,R1
   \   00007E   12....       LCALL     ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000081   7044         JNZ       ??osalTimerUpdate_4
   \                     ??osalTimerUpdate_3:
   \   000083   8E82         MOV       DPL,R6
   \   000085   8F83         MOV       DPH,R7
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   12....       LCALL     ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00008D   6046         JZ        ??osalTimerUpdate_5
   \   00008F   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000092   6041         JZ        ??osalTimerUpdate_5
    439                {
    440                  // Notify the task of a timeout
    441                  osal_set_event( srchTimer->task_id, srchTimer->event_flag );
   \   000094                ; Setup parameters for call to function osal_set_event
   \   000094   8E82         MOV       DPL,R6
   \   000096   8F83         MOV       DPH,R7
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   FA           MOV       R2,A
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   FB           MOV       R3,A
   \   0000A1   8E82         MOV       DPL,R6
   \   0000A3   8F83         MOV       DPH,R7
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F9           MOV       R1,A
   \   0000AD   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    442                  
    443                  // Reload the timer timeout value
    444                  srchTimer->timeout = srchTimer->reloadTimeout;
   \   0000B0   8E82         MOV       DPL,R6
   \   0000B2   8F83         MOV       DPH,R7
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   12....       LCALL     ?Subroutine4 & 0xFFFF
    445                }
   \                     ??CrossCallReturnLabel_5:
   \   0000BC   8E82         MOV       DPL,R6
   \   0000BE   8F83         MOV       DPH,R7
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   E8           MOV       A,R0
   \   0000C3   F0           MOVX      @DPTR,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   E9           MOV       A,R1
   \   0000C6   F0           MOVX      @DPTR,A
    446                
    447                // When timeout or delete (event_flag == 0)
    448                if ( srchTimer->timeout == 0 || srchTimer->event_flag == 0 )
   \                     ??osalTimerUpdate_4:
   \   0000C7   8E82         MOV       DPL,R6
   \   0000C9   8F83         MOV       DPH,R7
   \   0000CB   12....       LCALL     ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000CE   6005         JZ        ??osalTimerUpdate_5
   \   0000D0   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000D3   7026         JNZ       ??osalTimerUpdate_6
    449                {
    450                  // Take out of list
    451                  if ( prevTimer == NULL )
   \                     ??osalTimerUpdate_5:
   \   0000D5   E5..         MOV       A,?V4
   \   0000D7   45..         ORL       A,?V5
   \   0000D9   8E82         MOV       DPL,R6
   \   0000DB   8F83         MOV       DPH,R7
   \   0000DD   7008         JNZ       ??osalTimerUpdate_7
    452                    timerHead = srchTimer->next;
   \   0000DF   12....       LCALL     ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000E2   90....       MOV       DPTR,#timerHead
   \   0000E5   8009         SJMP      ??osalTimerUpdate_8
    453                  else
    454                    prevTimer->next = srchTimer->next;
   \                     ??osalTimerUpdate_7:
   \   0000E7   12....       LCALL     ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000EA   85..82       MOV       DPL,?V4
   \   0000ED   85..83       MOV       DPH,?V5
   \                     ??osalTimerUpdate_8:
   \   0000F0   E8           MOV       A,R0
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   A3           INC       DPTR
   \   0000F3   E9           MOV       A,R1
   \   0000F4   F0           MOVX      @DPTR,A
    455          
    456                  // Setup to free memory
    457                  freeTimer = srchTimer;
   \   0000F5   8E..         MOV       ?V2,R6
   \   0000F7   8F..         MOV       ?V3,R7
    458          
    459                  // Next
    460                  srchTimer = srchTimer->next;
   \   0000F9   8004         SJMP      ??osalTimerUpdate_9
    461                }
    462                else
    463                {
    464                  // Get next
    465                  prevTimer = srchTimer;
   \                     ??osalTimerUpdate_6:
   \   0000FB   8E..         MOV       ?V4,R6
   \   0000FD   8F..         MOV       ?V5,R7
    466                  srchTimer = srchTimer->next;
   \                     ??osalTimerUpdate_9:
   \   0000FF   8E82         MOV       DPL,R6
   \   000101   8F83         MOV       DPH,R7
   \   000103   E0           MOVX      A,@DPTR
   \   000104   FE           MOV       R6,A
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   FF           MOV       R7,A
    467                }
    468                
    469                HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000108   E5..         MOV       A,?V6
   \   00010A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00010C   92AF         MOV       0xa8.7,C
    470                
    471                if ( freeTimer )
   \   00010E   E5..         MOV       A,?V2
   \   000110   45..         ORL       A,?V3
   \   000112   6032         JZ        ??osalTimerUpdate_10
    472                {
    473                  if ( freeTimer->timeout == 0 )
   \   000114   85..82       MOV       DPL,?V2
   \   000117   85..83       MOV       DPH,?V3
   \   00011A   12....       LCALL     ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00011D   7020         JNZ       ??osalTimerUpdate_11
    474                  {
    475                    osal_set_event( freeTimer->task_id, freeTimer->event_flag );
   \   00011F                ; Setup parameters for call to function osal_set_event
   \   00011F   85..82       MOV       DPL,?V2
   \   000122   85..83       MOV       DPH,?V3
   \   000125   A3           INC       DPTR
   \   000126   A3           INC       DPTR
   \   000127   A3           INC       DPTR
   \   000128   A3           INC       DPTR
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   FA           MOV       R2,A
   \   00012B   A3           INC       DPTR
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   FB           MOV       R3,A
   \   00012E   85..82       MOV       DPL,?V2
   \   000131   85..83       MOV       DPH,?V3
   \   000134   A3           INC       DPTR
   \   000135   A3           INC       DPTR
   \   000136   A3           INC       DPTR
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   F9           MOV       R1,A
   \   00013C   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    476                  }
    477                  osal_mem_free( freeTimer );
   \                     ??osalTimerUpdate_11:
   \   00013F                ; Setup parameters for call to function osal_mem_free
   \   00013F   AA..         MOV       R2,?V2
   \   000141   AB..         MOV       R3,?V3
   \   000143   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    478                }
    479              }
   \                     ??osalTimerUpdate_10:
   \   000146   EE           MOV       A,R6
   \   000147   4F           ORL       A,R7
   \   000148   6003         JZ        $+5
   \   00014A   02....       LJMP      ??osalTimerUpdate_1 & 0xFFFF
    480            }
    481          }
   \                     ??osalTimerUpdate_0:
   \   00014D   7F08         MOV       R7,#0x8
   \   00014F   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000152                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine5_0
   \   000002                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine6_0
   \   000004                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine7_0
   \   000002                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine8_0
   \   000002                ; // Fall through to label ??Subroutine8_0
    482          
    483          #ifdef POWER_SAVING
    484          /*********************************************************************
    485           * @fn      osal_adjust_timers
    486           *
    487           * @brief   Update the timer structures for elapsed ticks.
    488           *
    489           * @param   none
    490           *
    491           * @return  none
    492           *********************************************************************/
    493          void osal_adjust_timers( void )
    494          {
    495            uint16 eTime;
    496          
    497            if ( timerHead != NULL )
    498            {
    499              // Compute elapsed time (msec)
    500              eTime = TimerElapsed() /  TICK_COUNT;
    501          
    502              if ( eTime )
    503                osalTimerUpdate( eTime );
    504            }
    505          }
    506          
    507          /*********************************************************************
    508           * @fn      osal_next_timeout
    509           *
    510           * @brief
    511           *
    512           *   Search timer table to return the lowest timeout value. If the
    513           *   timer list is empty, then the returned timeout will be zero.
    514           *
    515           * @param   none
    516           *
    517           * @return  none
    518           *********************************************************************/
    519          uint16 osal_next_timeout( void )
    520          {
    521            uint16 nextTimeout;
    522            osalTimerRec_t *srchTimer;
    523          
    524            if ( timerHead != NULL )
    525            {
    526              // Head of the timer list
    527              srchTimer = timerHead;
    528              nextTimeout = OSAL_TIMERS_MAX_TIMEOUT;
    529          
    530              // Look for the next timeout timer
    531              while ( srchTimer != NULL )
    532              {
    533                if (srchTimer->timeout < nextTimeout)
    534                {
    535                  nextTimeout = srchTimer->timeout;
    536                }
    537                // Check next timer
    538                srchTimer = srchTimer->next;
    539              }
    540            }
    541            else
    542            {
    543              // No timers
    544              nextTimeout = 0;
    545            }
    546          
    547            return ( nextTimeout );
    548          }
    549          #endif // POWER_SAVING
    550          
    551          /*********************************************************************
    552           * @fn      osal_GetSystemClock()
    553           *
    554           * @brief   Read the local system clock.
    555           *
    556           * @param   none
    557           *
    558           * @return  local clock in milliseconds
    559           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    560          uint32 osal_GetSystemClock( void )
   \                     osal_GetSystemClock:
    561          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    562            return ( osal_systemClock );
   \   000004   90....       MOV       DPTR,#osal_systemClock
   \   000007   12....       LCALL     ?XLOAD_R2345
   \   00000A   02....       LJMP      ?Subroutine0 & 0xFFFF
    563          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalTimerInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalAddTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalAddTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalFindTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalFindTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalDeleteTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalDeleteTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_start_timerEx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_start_reload_timer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_reload_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_stop_timerEx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_stop_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_get_timeoutEx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_get_timeoutEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_timer_num_active::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_timer_num_active

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalTimerUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_GetSystemClock::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_GetSystemClock
    564          
    565          /*********************************************************************
    566          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     26   osalAddTimer
        0     14   -> osalFindTimer
        0     14   -> osal_mem_alloc
      2     12   osalDeleteTimer
      2     14   osalFindTimer
      2      0   osalTimerInit
      0     16   osalTimerUpdate
        0     16   -> osal_mem_free
        0     16   -> osal_set_event
      2      0   osal_GetSystemClock
      0     12   osal_get_timeoutEx
        0     12   -> osalFindTimer
      0     12   osal_start_reload_timer
        0     12   -> osalAddTimer
      0     10   osal_start_timerEx
        0     10   -> osalAddTimer
      0     12   osal_stop_timerEx
        0     12   -> osalDeleteTimer
        0     12   -> osalFindTimer
      2      0   osal_timer_num_active


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine5_0
       2  ??Subroutine6_0
       2  ??Subroutine7_0
       8  ??Subroutine8_0
       7  ?Subroutine0
       5  ?Subroutine1
       4  ?Subroutine2
      10  ?Subroutine3
       2  ?Subroutine4
       1  _A_IEN0
     145  osalAddTimer
       6  osalAddTimer::?relay
      20  osalDeleteTimer
       6  osalDeleteTimer::?relay
      59  osalFindTimer
       6  osalFindTimer::?relay
      18  osalTimerInit
       6  osalTimerInit::?relay
     338  osalTimerUpdate
       6  osalTimerUpdate::?relay
      13  osal_GetSystemClock
       6  osal_GetSystemClock::?relay
      49  osal_get_timeoutEx
       6  osal_get_timeoutEx::?relay
      60  osal_start_reload_timer
       6  osal_start_reload_timer::?relay
      36  osal_start_timerEx
       6  osal_start_timerEx::?relay
      48  osal_stop_timerEx
       6  osal_stop_timerEx::?relay
       4  osal_systemClock
      41  osal_timer_num_active
       6  osal_timer_num_active::?relay
       2  timerHead

 
 873 bytes in segment BANKED_CODE
  66 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
   6 bytes in segment XDATA_Z
 
  66 bytes of CODE     memory
   0 bytes of DATA     memory (+ 1 byte shared)
 873 bytes of HUGECODE memory
   6 bytes of XDATA    memory

Errors: none
Warnings: none
