///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.20.1.5333 for 8051              14/Jul/2019  18:25:20
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\Source\SAPP_FrameWork.c
//    Command line       =  
//        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW2530.tmp
//        (D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\Source\SAPP_FrameWork.c
//        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D SAPP_ZSTACK
//        -lC
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List
//        -lA
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\Obj -e
//        --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x4545
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\ -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\Source\ -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\ZMain\TI2530DB\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\include\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\include\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\high_level\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mt\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\osal\include\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\saddr\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\sdata\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\af\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\nwk\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sapi\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sec\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sys\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\zdo\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\
//        -I
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List\SAPP_FrameWork.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME SAPP_FrameWork

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??CoordinatorIncomingRoutine::?relay`
        FUNCTION `??CoordinatorIncomingRoutine::?relay`,0203H
        PUBLIC `??CoordinatorTimeoutRoutine::?relay`
        FUNCTION `??CoordinatorTimeoutRoutine::?relay`,0203H
        PUBLIC `??CreateUserTimer::?relay`
        FUNCTION `??CreateUserTimer::?relay`,0203H
        PUBLIC `??DeleteUserTimer::?relay`
        FUNCTION `??DeleteUserTimer::?relay`,0203H
        PUBLIC `??ModifyRefreshCycle::?relay`
        FUNCTION `??ModifyRefreshCycle::?relay`,0203H
        PUBLIC `??SendData::?relay`
        FUNCTION `??SendData::?relay`,0203H
        FUNCTION `??createEndPoint::?relay`,0203H
        PUBLIC `??sapp_controlEpProcess::?relay`
        FUNCTION `??sapp_controlEpProcess::?relay`,0203H
        PUBLIC `??sapp_functionEpProcess::?relay`
        FUNCTION `??sapp_functionEpProcess::?relay`,0203H
        PUBLIC `??sapp_taskInitProcess::?relay`
        FUNCTION `??sapp_taskInitProcess::?relay`,0203H
        PUBLIC CoordinatorIncomingRoutine
        FUNCTION CoordinatorIncomingRoutine,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC CoordinatorTimeoutRoutine
        FUNCTION CoordinatorTimeoutRoutine,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC CreateUserTimer
        FUNCTION CreateUserTimer,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC DeleteUserTimer
        FUNCTION DeleteUserTimer,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ModifyRefreshCycle
        FUNCTION ModifyRefreshCycle,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC SendData
        FUNCTION SendData,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        FUNCTION createEndPoint,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC funcTableBuffer
        PUBLIC sapp_controlEpProcess
        FUNCTION sapp_controlEpProcess,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC sapp_functionEpProcess
        FUNCTION sapp_functionEpProcess,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC sapp_taskInitProcess
        FUNCTION sapp_taskInitProcess,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
HalIOInit           SYMBOL "HalIOInit"
`??HalIOInit::?relay` SYMBOL "?relay", HalIOInit
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
`??MT_UartRegisterTaskID::?relay` SYMBOL "?relay", MT_UartRegisterTaskID
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
memcpy              SYMBOL "memcpy"
`??memcpy::?relay`  SYMBOL "?relay", memcpy
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
CoordinatorIncomingRoutine SYMBOL "CoordinatorIncomingRoutine"
`??CoordinatorIncomingRoutine::?relay` SYMBOL "?relay", CoordinatorIncomingRoutine
CoordinatorTimeoutRoutine SYMBOL "CoordinatorTimeoutRoutine"
`??CoordinatorTimeoutRoutine::?relay` SYMBOL "?relay", CoordinatorTimeoutRoutine
CreateUserTimer     SYMBOL "CreateUserTimer"
`??CreateUserTimer::?relay` SYMBOL "?relay", CreateUserTimer
DeleteUserTimer     SYMBOL "DeleteUserTimer"
`??DeleteUserTimer::?relay` SYMBOL "?relay", DeleteUserTimer
ModifyRefreshCycle  SYMBOL "ModifyRefreshCycle"
`??ModifyRefreshCycle::?relay` SYMBOL "?relay", ModifyRefreshCycle
SendData            SYMBOL "SendData"
`??SendData::?relay` SYMBOL "?relay", SendData
sapp_controlEpProcess SYMBOL "sapp_controlEpProcess"
`??sapp_controlEpProcess::?relay` SYMBOL "?relay", sapp_controlEpProcess
sapp_functionEpProcess SYMBOL "sapp_functionEpProcess"
`??sapp_functionEpProcess::?relay` SYMBOL "?relay", sapp_functionEpProcess
sapp_taskInitProcess SYMBOL "sapp_taskInitProcess"
`??sapp_taskInitProcess::?relay` SYMBOL "?relay", sapp_taskInitProcess

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??HalIOInit::?relay`
        FUNCTION `??HalIOInit::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??MT_UartRegisterTaskID::?relay`
        FUNCTION `??MT_UartRegisterTaskID::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??memcpy::?relay`
        FUNCTION `??memcpy::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalIOInit
        FUNCTION HalIOInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN funcCount
        EXTERN funcList
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN tasksCnt

// D:\课设勿动\ZStack-CC2530-r200\Projects\SappWsn\Source\SAPP_FrameWork.c
//    1 #if defined(SAPP_ZSTACK)
//    2 #include "SAPP_FrameWork.h"
//    3 #include <string.h>
//    4 
//    5 /*********************************************************************
//    6  * FUNCTIONS
//    7  *********************************************************************/
//    8 static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep);
//    9 #if defined(ZDO_COORDINATOR)
//   10 static uint8 uartMsgProcesser(uint8 *msg);
//   11 #endif
//   12 static uint8 uartMsgProcesser1(uint8 *msg);
//   13 
//   14 /*********************************************************************
//   15  * Local Variables
//   16  *********************************************************************/
//   17 //uint8 ctrlBuffer[sizeof(TOPOINFO) + sizeof(FUNCTABLE) + FUNC_NUM * sizeof(FUNCINFO)];

        RSEG XDATA_I:XDATA:NOROOT(0)
//   18 static TOPOINFO topoBuffer = { 0x02 };
topoBuffer:
        DATA8
        DS 14
        REQUIRE `?<Initializer for topoBuffer>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   19 FUNCTABLE *funcTableBuffer;// = (FUNCTABLE *)(&ctrlBuffer[sizeof(TOPOINFO)]);
funcTableBuffer:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   20 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   21 static devStates_t curNwkState;
curNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   22 static uint8 controlTaskId;
controlTaskId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   23 static uint8 functionTaskId;
functionTaskId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   24 static struct ep_info_t controlEndPointInfo;
controlEndPointInfo:
        DS 33
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   25 static uint8 isUserTimerRunning = 0;
isUserTimerRunning:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   26 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   27 void sapp_taskInitProcess(void)
sapp_taskInitProcess:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function sapp_taskInitProcess
        CODE
//   28 {
        FUNCALL sapp_taskInitProcess, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_taskInitProcess, HalIOInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_taskInitProcess, createEndPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_taskInitProcess, createEndPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_taskInitProcess, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   29  #if defined ( BUILD_ALL_DEVICES )
//   30     // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//   31     // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//   32     // together - if they are - we will start up a coordinator. Otherwise,
//   33     // the device will start as a router.
//   34     if ( readCoordinatorJumper() )
//   35         zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//   36     else
//   37         zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//   38 #endif // BUILD_ALL_DEVICES
//   39 
//   40 #if defined ( HOLD_AUTO_START )
//   41     // HOLD_AUTO_START is a compile option that will surpress ZDApp
//   42     //  from starting the device and wait for the application to
//   43     //  start the device.
//   44     ZDOInitDevice(0);
//   45 #endif
//   46 
//   47     // 构造功能列表
//   48     funcTableBuffer = createFuncTable(funcCount);
        ; Setup parameters for call to function osal_mem_alloc
        MOV       DPTR,#funcCount
        MOVX      A,@DPTR
        MOV       B,#0x3
        MUL       AB
        MOV       R1,B
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPTR,#funcTableBuffer
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//   49     funcTableBuffer->ft_type = 0x01;
        MOV       DPH,A
        MOV       DPL,R2
        MOV       A,#0x1
        MOVX      @DPTR,A
//   50     funcTableBuffer->ft_count = funcCount;
        MOV       DPTR,#funcCount
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#funcTableBuffer
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_51:
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//   51     int i;
//   52     for(i = 0; i < funcCount; i++)
        MOV       R6,#0x0
        MOV       R7,#0x0
        SJMP      ??sapp_taskInitProcess_0
//   53     {
//   54         funcTableBuffer->ft_list[i].type = funcList[i].function.type;
??sapp_taskInitProcess_1:
        LCALL     ?Subroutine16 & 0xFFFF
//   55         funcTableBuffer->ft_list[i].id = funcList[i].function.id;
//   56         funcTableBuffer->ft_list[i].cycle = funcList[i].function.cycle;
//   57     }
??CrossCallReturnLabel_49:
        MOV       R0,A
        MOV       A,#(funcList >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        MOV       A,R0
        MOV       B,#0x3
        MUL       AB
        MOV       R0,A
        MOV       R4,B
        MOV       B,#0x3
        MOV       A,R1
        MUL       AB
        ADD       A,R4
        MOV       R1,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_11:
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_37:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_12:
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_15:
        PUSH      A
          CFI CFA_SP SP+-1
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        INC       R6
        MOV       A,R6
        JNZ       ??sapp_taskInitProcess_0
        INC       R7
??sapp_taskInitProcess_0:
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_9:
        JC        ??sapp_taskInitProcess_1
//   58     controlTaskId = tasksCnt - 2;
        MOV       DPTR,#tasksCnt
        MOVX      A,@DPTR
        ADD       A,#-0x2
        MOV       DPTR,#controlTaskId
        MOVX      @DPTR,A
//   59     functionTaskId = tasksCnt - 1;
        MOV       DPTR,#tasksCnt
        MOVX      A,@DPTR
        DEC       A
        MOV       DPTR,#functionTaskId
        MOVX      @DPTR,A
//   60     HalIOInit(functionTaskId);
        ; Setup parameters for call to function HalIOInit
        MOV       R1,A
        LCALL     `??HalIOInit::?relay`; Banked call to: HalIOInit
//   61     createEndPoint(&controlEndPointInfo, &controlTaskId, CONTROL_ENDPOINT);
        ; Setup parameters for call to function createEndPoint
        MOV       R1,#-0x10
        MOV       R4,#controlTaskId & 0xff
        MOV       R5,#(controlTaskId >> 8) & 0xff
        MOV       R2,#controlEndPointInfo & 0xff
        MOV       R3,#(controlEndPointInfo >> 8) & 0xff
        LCALL     `??createEndPoint::?relay`; Banked call to: createEndPoint
//   62     for(i = 0; i < funcCount; i++)
        MOV       R6,#0x0
        MOV       R7,#0x0
        SJMP      ??sapp_taskInitProcess_2
//   63     {
//   64         struct ep_info_t *ep = &funcList[i];
??sapp_taskInitProcess_3:
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV       ?V0,A
        MOV       A,#(funcList >> 8) & 0xff
        ADDC      A,R1
        MOV       ?V1,A
//   65         createEndPoint(ep, &functionTaskId, i + 1);
        ; Setup parameters for call to function createEndPoint
        MOV       A,R6
        INC       A
        MOV       R1,A
        MOV       R4,#functionTaskId & 0xff
        MOV       R5,#(functionTaskId >> 8) & 0xff
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??createEndPoint::?relay`; Banked call to: createEndPoint
//   66         if(ep->res_available)
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_67:
        JZ        ??sapp_taskInitProcess_4
//   67           (*ep->res_available)(ep, ResInit, NULL);
        ; Setup parameters for indirect call
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R1,#0x1
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     ?Subroutine6 & 0xFFFF
//   68     }
??CrossCallReturnLabel_58:
        LCALL     ?CALL_IND
??sapp_taskInitProcess_4:
        INC       R6
        MOV       A,R6
        JNZ       ??sapp_taskInitProcess_2
        INC       R7
??sapp_taskInitProcess_2:
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_10:
        JC        ??sapp_taskInitProcess_3
//   69 #if defined(ZDO_COORDINATOR)// || defined(RTR_NWK)
//   70 //    RegisterForKeys( SampleApp_TaskID );
//   71     MT_UartRegisterTaskID(controlTaskId);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV       DPTR,#controlTaskId
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
//   72 #endif
//   73 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function sapp_taskInitProcess
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function sapp_taskInitProcess
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        MOV       A,R0
        MOV       B,#0x21
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x21
        MOV       A,R1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function sapp_functionEpProcess
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function sapp_functionEpProcess
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function sapp_taskInitProcess
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function sapp_taskInitProcess
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#funcList & 0xff
        ADD       A,R0
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function sapp_taskInitProcess
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function sapp_taskInitProcess
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV       DPTR,#funcTableBuffer
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R4
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function sapp_taskInitProcess
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function sapp_taskInitProcess
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV       DPTR,#funcCount
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       C
        MOV       A,R6
        SUBB      A,R0
        MOV       A,R7
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_41:
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
//   74 /*********************************************************************
//   75  * LOCAL FUNCTIONS
//   76  */
//   77 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   78 static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep)
createEndPoint:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function createEndPoint
        CODE
//   79 {
        FUNCALL createEndPoint, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//   80     static cId_t commonClusterId = SAPP_PERIODIC_CLUSTERID;
//   81     // Fill out the endpoint description.
//   82     epInfo->task_id = *task_id;
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//   83     epInfo->ep = ep;
        MOV       A,R2
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,R1
        LCALL     ?Subroutine14 & 0xFFFF
//   84     epInfo->timerTick = epInfo->function.cycle;
??CrossCallReturnLabel_16:
        PUSH      A
          CFI CFA_SP SP+-1
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_33:
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//   85     epInfo->userTimer = 0;
        LCALL     ?Subroutine19 & 0xFFFF
//   86 
//   87     epInfo->simpleDesc.EndPoint = ep;
??CrossCallReturnLabel_24:
        MOV       A,R2
        ADD       A,#0x15
        MOV       ?V0,A
        CLR       A
        ADDC      A,R3
        MOV       ?V1,A
        MOV       A,R1
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      @DPTR,A
//   88     epInfo->simpleDesc.AppProfId = SAPP_PROFID;
        MOV       A,R2
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,#0x8
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0xf
        MOVX      @DPTR,A
//   89     epInfo->simpleDesc.AppDeviceId = SAPP_DEVICEID;
        MOV       A,R2
        ADD       A,#0x18
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_26:
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//   90     epInfo->simpleDesc.AppDevVer = SAPP_DEVICE_VERSION;
//   91     epInfo->simpleDesc.Reserved = 0;
        MOV       A,R2
        ADD       A,#0x1a
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
//   92     epInfo->simpleDesc.AppNumInClusters = 1;
        MOV       A,R2
        ADD       A,#0x1b
        LCALL     ?Subroutine20 & 0xFFFF
//   93     epInfo->simpleDesc.pAppInClusterList = &commonClusterId;
??CrossCallReturnLabel_27:
        MOV       A,R2
        ADD       A,#0x1c
        LCALL     ?Subroutine18 & 0xFFFF
//   94     epInfo->simpleDesc.AppNumOutClusters = 1;
??CrossCallReturnLabel_22:
        ADD       A,#0x1e
        LCALL     ?Subroutine20 & 0xFFFF
//   95     epInfo->simpleDesc.pAppOutClusterList = &commonClusterId;
??CrossCallReturnLabel_28:
        MOV       A,R2
        ADD       A,#0x1f
        LCALL     ?Subroutine18 & 0xFFFF
//   96 
//   97     epInfo->SampleApp_epDesc.endPoint = ep;
??CrossCallReturnLabel_23:
        ADD       A,#0xf
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,R6
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      @DPTR,A
//   98     epInfo->SampleApp_epDesc.task_id = task_id;
        MOV       A,R2
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
//   99     epInfo->SampleApp_epDesc.simpleDesc = &epInfo->simpleDesc;
        MOV       A,R2
        ADD       A,#0x12
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  100     epInfo->SampleApp_epDesc.latencyReq = noLatencyReqs;
        MOV       A,R2
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
//  101 
//  102     // Register the endpoint description with the AF
//  103     afRegister(&epInfo->SampleApp_epDesc);
        ; Setup parameters for call to function afRegister
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  104 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function createEndPoint
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function createEndPoint
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function createEndPoint
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,#0x1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function createEndPoint
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function createEndPoint
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,#??commonClusterId & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(??commonClusterId >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       A,R2
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function sapp_taskInitProcess
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function createEndPoint
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_38:
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function sapp_taskInitProcess
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function sapp_taskInitProcess
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_15
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-4
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function createEndPoint
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_16
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-4
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30

        RSEG XDATA_I:XDATA:NOROOT(0)
??commonClusterId:
        DATA16
        DS 2
        REQUIRE `?<Initializer for commonClusterId>`
        REQUIRE __INIT_XDATA_I
//  105 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  106 uint16 sapp_controlEpProcess(uint8 task_id, uint16 events)
sapp_controlEpProcess:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function sapp_controlEpProcess
        CODE
//  107 {
        FUNCALL sapp_controlEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_controlEpProcess, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       ?V3,R1
        MOV       ?V4,R2
        MOV       ?V5,R3
//  108     afIncomingMSGPacket_t *MSGpkt;
//  109 
//  110     if ( events & SYS_EVENT_MSG )
        MOV       A,R3
        ANL       A,#0x80
        JNZ       $+5
        LJMP      ??sapp_controlEpProcess_0 & 0xFFFF
//  111     {
//  112         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(task_id);
        ; Setup parameters for call to function osal_msg_receive
        LJMP      ??sapp_controlEpProcess_1 & 0xFFFF
//  113         while ( MSGpkt )
//  114         {
//  115             switch ( MSGpkt->hdr.event )
//  116             {
//  117 #if defined(ZDO_COORDINATOR)
//  118             case CMD_SERIAL_MSG:
//  119                 uartMsgProcesser((uint8 *)MSGpkt);
//  120                 HalLedBlink( HAL_LED_1, 2, 50, 90 );
//  121                 break;
//  122 #else
//  123             case CMD_SERIAL_MSG:
//  124                 uartMsgProcesser1((uint8 *)MSGpkt);
//  125                 break;
//  126 #endif
//  127                 // Received when a messages is received (OTA) for this endpoint
//  128             case AF_INCOMING_MSG_CMD:
//  129             {
//  130                 // TODO: QueryProfile or QueryTopo
//  131                 switch(MSGpkt->clusterId)
//  132                 {
//  133                 case SAPP_PERIODIC_CLUSTERID:
//  134                     switch(MSGpkt->cmd.Data[0])
//  135                     {
//  136                     case 0x01:
//  137                         // CtrlQueryProfile
//  138                         // 获取到数据包的来源地址来当做发送数据的目标
//  139                         SendData(CONTROL_ENDPOINT, funcTableBuffer->ft_data, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(FUNCTABLE) + funcCount * sizeof(FUNCINFO));
//  140                         break;
//  141                     case 0x02:
//  142                         // CtrlQueryTopo
//  143                         // 获取到数据包的来源地址来当做发送数据的目标
//  144                         SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(TOPOINFO));
//  145                         break;
//  146                     case 0x03:
//  147                         // CtrlQuerySpecialFunction
//  148                         // cmd.Data[0] = 3, cmd.Data[1] = funcCode, cmd.Data[2] = funcID
//  149                         {
//  150                             uint8 i;
//  151                             for(i = 0; i < funcTableBuffer->ft_count; i++)
//  152                             {
//  153                                 if((funcTableBuffer->ft_list[i].type == MSGpkt->cmd.Data[1])
//  154                                    && (funcTableBuffer->ft_list[i].id == MSGpkt->cmd.Data[2]))
//  155                                 {
//  156                                     // 0x03, EndPoint, rCycle
//  157                                     uint8 specialFunc[3] = { 0x03, i + 1, funcTableBuffer->ft_list[i].cycle };
//  158                                     SendData(CONTROL_ENDPOINT, specialFunc, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(specialFunc));
//  159                                     break;
//  160                                 }
//  161                             }
//  162                         }
//  163                         break;
//  164                     default:
//  165                         {
//  166                             int i;
//  167                             for(i = 0; i < funcCount; i++)
//  168                             {
//  169                                 struct ep_info_t *ep = &funcList[i];
//  170                                 if(ep->res_available)   (*ep->res_available)(ep, ResControlPkg, MSGpkt);
//  171                             }
//  172                         }
//  173                         break;
//  174                     }
//  175                     HalLedBlink( HAL_LED_2, 1, 50, 250 );
//  176                     break;
//  177                 }
//  178                 break;
//  179             }
//  180             // Received whenever the device changes state in the network
//  181             case ZDO_STATE_CHANGE:
//  182             {
//  183                 devStates_t st = (devStates_t)(MSGpkt->hdr.status);
??sapp_controlEpProcess_2:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
//  184                 if ( (st == DEV_ZB_COORD)
//  185                         || (st == DEV_ROUTER)
//  186                         || (st == DEV_END_DEVICE) )
        MOV       A,#0x9
        XRL       A,R0
        JZ        ??sapp_controlEpProcess_3
        MOV       A,#0x7
        XRL       A,R0
        JZ        ??sapp_controlEpProcess_3
        MOV       A,#0x6
        XRL       A,R0
        JZ        $+5
        LJMP      ??sapp_controlEpProcess_4 & 0xFFFF
//  187                 {
//  188 //                    topoBuffer->type = 0x02;
//  189                     memcpy(topoBuffer.IEEE, NLME_GetExtAddr(), 8);
??sapp_controlEpProcess_3:
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function memcpy
        MOV       ?V0,#0x8
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R2,#(topoBuffer + 1) & 0xff
        MOV       R3,#((topoBuffer + 1) >> 8) & 0xff
        LCALL     `??memcpy::?relay`; Banked call to: memcpy
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  190 #if !defined(ZDO_COORDINATOR)
//  191                     topoBuffer.PAddr = NLME_GetCoordShortAddr();
//  192 #else
//  193                     topoBuffer.PAddr = 0xFFFF;
        MOV       DPTR,#topoBuffer + 9
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  194 #endif
//  195                     osal_memcpy(&topoBuffer.panid, &_NIB.nwkPanId, sizeof(uint16));
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#(_NIB + 33) & 0xff
        MOV       ?V1,#((_NIB + 33) >> 8) & 0xff
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#(topoBuffer + 11) & 0xff
        MOV       R3,#((topoBuffer + 11) >> 8) & 0xff
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  196                     osal_memcpy(&topoBuffer.channel, &_NIB.nwkLogicalChannel, sizeof(uint8));
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#(_NIB + 22) & 0xff
        MOV       ?V1,#((_NIB + 22) >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,#(topoBuffer + 13) & 0xff
        MOV       R3,#((topoBuffer + 13) >> 8) & 0xff
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  197                     //向协调器发送拓扑信息
//  198                     SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO));
        ; Setup parameters for call to function SendData
        MOV       ?V0,#0xe
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#topoBuffer & 0xff
        MOV       R3,#(topoBuffer >> 8) & 0xff
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_80:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  199                     HalLedBlink( HAL_LED_2, 4, 50, 250 );
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x6
        MOV       R5,#0x0
        MOV       R3,#0x32
        MOV       R2,#0x4
??sapp_controlEpProcess_5:
        MOV       R1,#0x2
??sapp_controlEpProcess_6:
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
//  200                 }
//  201             }
//  202             break;
//  203             default:
//  204                 break;
//  205             }
//  206             // Release the memory
//  207             osal_msg_deallocate( (uint8 *)MSGpkt );
??sapp_controlEpProcess_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  208             // Next - if one is available
//  209             MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        MOV       R1,?V3
??sapp_controlEpProcess_1:
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??sapp_controlEpProcess_7 & 0xFFFF
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        DEC       A
        JZ        ??sapp_controlEpProcess_8
        ADD       A,#-0x19
        JZ        ??sapp_controlEpProcess_9
        ADD       A,#0x49
        JNZ       $+5
        LJMP      ??sapp_controlEpProcess_2 & 0xFFFF
        SJMP      ??sapp_controlEpProcess_4
??sapp_controlEpProcess_8:
        MOV       R0,#0x0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
??sapp_controlEpProcess_10:
        MOV       ?V2,R0
        MOV       A,#0x1
        ADD       A,R0
        MOV       R0,A
        MOV       R4,?V2
        MOV       A,R2
        ADD       A,R4
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xa
        JZ        ??sapp_controlEpProcess_11
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JC        ??sapp_controlEpProcess_10
??sapp_controlEpProcess_11:
        ; Setup parameters for call to function SendData
        MOV       A,R0
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#-0x1
        MOV       R5,#-0x1
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        MOV       R1,#0x1
        LCALL     ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_82:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#0x5a
        MOV       R5,#0x0
        MOV       R3,#0x32
        MOV       R2,#0x2
        MOV       R1,#0x1
        LJMP      ??sapp_controlEpProcess_6 & 0xFFFF
??sapp_controlEpProcess_9:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??sapp_controlEpProcess_12
        INC       DPTR
        MOVX      A,@DPTR
??sapp_controlEpProcess_12:
        JZ        $+5
        LJMP      ??sapp_controlEpProcess_4 & 0xFFFF
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL     ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_52:
        MOVX      A,@DPTR
        DEC       A
        JZ        ??sapp_controlEpProcess_13
        DEC       A
        JZ        ??sapp_controlEpProcess_14
        DEC       A
        JZ        ??sapp_controlEpProcess_15
        LJMP      ??sapp_controlEpProcess_16 & 0xFFFF
??sapp_controlEpProcess_13:
        ; Setup parameters for call to function SendData
        MOV       B,#0x3
        MOV       DPTR,#funcCount
        MOVX      A,@DPTR
        MUL       AB
        ADD       A,#0x2
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV       DPTR,#funcTableBuffer
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LJMP      ??sapp_controlEpProcess_17 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 17)
??sapp_controlEpProcess_14:
        ; Setup parameters for call to function SendData
        MOV       ?V0,#0xe
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV       R2,#topoBuffer & 0xff
        MOV       R3,#(topoBuffer >> 8) & 0xff
        LJMP      ??sapp_controlEpProcess_17 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 17)
??sapp_controlEpProcess_15:
        MOV       R2,#0x0
        SJMP      ??sapp_controlEpProcess_18
??sapp_controlEpProcess_19:
        INC       R2
??sapp_controlEpProcess_18:
        MOV       DPTR,#funcTableBuffer
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_53:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??sapp_controlEpProcess_20 & 0xFFFF
        MOV       A,R2
        MOV       B,#0x3
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#funcTableBuffer
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R3,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R3
        MOV       DPH,A
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??sapp_controlEpProcess_19
        MOV       A,R2
        MOV       B,#0x3
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#funcTableBuffer
        MOVX      A,@DPTR
        ADD       A,R0
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R3
        MOV       DPH,A
        INC       DPTR
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??sapp_controlEpProcess_19
        MOV       DPTR,#`?<Constant {3, 0, 0}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x3
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        INC       A
        ADD       A,R2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,R2
        MOV       B,#0x3
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        ; Setup parameters for call to function SendData
        MOV       ?V0,#0x3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
??sapp_controlEpProcess_17:
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        SJMP      ??sapp_controlEpProcess_20
??sapp_controlEpProcess_16:
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
        SJMP      ??sapp_controlEpProcess_21
??sapp_controlEpProcess_22:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_61:
        JZ        ??sapp_controlEpProcess_23
        ; Setup parameters for indirect call
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R1,#0x4
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL     ?CALL_IND
??sapp_controlEpProcess_23:
        INC       ?V0
        MOV       A,?V0
        JNZ       ??sapp_controlEpProcess_21
        INC       ?V1
??sapp_controlEpProcess_21:
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        JC        ??sapp_controlEpProcess_22
??sapp_controlEpProcess_20:
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x6
        MOV       R5,#0x0
        MOV       R3,#0x32
        MOV       R2,#0x1
        LJMP      ??sapp_controlEpProcess_5 & 0xFFFF
//  210         }
//  211         // return unprocessed events
//  212         return (events ^ SYS_EVENT_MSG);
??sapp_controlEpProcess_7:
        MOV       R2,?V4
        MOV       A,?V5
        XRL       A,#0x80
        MOV       R3,A
        SJMP      ??sapp_controlEpProcess_24
//  213     }
//  214     // 定时器时间到, 遍历所有端点看是否有userTimer
//  215     if(events & SAPP_SEND_PERIODIC_MSG_EVT)
??sapp_controlEpProcess_0:
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??sapp_controlEpProcess_25
//  216     {
//  217         int i;
//  218         uint8 hasUserTimer = 0;
        MOV       R6,#0x0
//  219         for(i = 0; i < funcCount; i++)
        MOV       ?V0,R6
        MOV       ?V1,R6
        SJMP      ??sapp_controlEpProcess_26
//  220         {
//  221             struct ep_info_t *ep = &funcList[i];
??sapp_controlEpProcess_27:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_18:
        ADDC      A,R1
        MOV       R3,A
//  222             if(ep->userTimer && ep->res_available)
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_29:
        JZ        ??sapp_controlEpProcess_28
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_68:
        JZ        ??sapp_controlEpProcess_28
//  223             {
//  224                 hasUserTimer = 1;
        MOV       R6,#0x1
//  225                 ep->userTimer = ep->userTimer - 1;
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_30:
        DEC       A
        MOVX      @DPTR,A
//  226                 if(ep->userTimer <= 1)
        CLR       C
        SUBB      A,#0x2
        JNC       ??sapp_controlEpProcess_28
//  227                 {
//  228                     ep->userTimer = 0;
        CLR       A
        MOVX      @DPTR,A
//  229                     (*ep->res_available)(ep, ResUserTimer, NULL);
        ; Setup parameters for indirect call
        MOV       R4,A
        MOV       R5,A
        MOV       R1,#0x3
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ??Subroutine31_0 & 0xFFFF
//  230                 }
//  231             }
//  232         }
??CrossCallReturnLabel_54:
        LCALL     ?CALL_IND
??sapp_controlEpProcess_28:
        INC       ?V0
        MOV       A,?V0
        JNZ       ??sapp_controlEpProcess_26
        INC       ?V1
??sapp_controlEpProcess_26:
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        JC        ??sapp_controlEpProcess_27
//  233         if(hasUserTimer)
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JNC       ??sapp_controlEpProcess_29
//  234         {
//  235             // 重新启动定时器
//  236             osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       R1,?V3
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        SJMP      ??sapp_controlEpProcess_30
//  237         }
//  238         else
//  239         {
//  240             isUserTimerRunning = 0;
??sapp_controlEpProcess_29:
        MOV       DPTR,#isUserTimerRunning
        CLR       A
        MOVX      @DPTR,A
//  241             osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x1
        MOV       R3,A
        MOV       R1,?V3
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  242         }
//  243         // return unprocessed events
//  244         return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
??sapp_controlEpProcess_30:
        MOV       A,?V4
        XRL       A,#0x1
        MOV       R2,A
        MOV       R3,?V5
        SJMP      ??sapp_controlEpProcess_24
//  245     }
//  246     // Discard unknown events
//  247     return 0;
??sapp_controlEpProcess_25:
        MOV       R2,#0x0
        MOV       R3,#0x0
??sapp_controlEpProcess_24:
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  248 }
          CFI EndBlock cfiBlock31

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function sapp_controlEpProcess
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function sapp_controlEpProcess
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_44:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function sapp_controlEpProcess
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function sapp_controlEpProcess
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function sapp_controlEpProcess
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function sapp_controlEpProcess
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function sapp_controlEpProcess
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV       A,?V0
        MOV       B,#0x21
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x21
        MOV       A,?V1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#funcList & 0xff
        ADD       A,R0
        MOV       R2,A
        MOV       A,#(funcList >> 8) & 0xff
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function sapp_taskInitProcess
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function sapp_controlEpProcess
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOV       DPTR,#funcTableBuffer
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function sapp_taskInitProcess
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function sapp_controlEpProcess
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function sapp_functionEpProcess
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker48 Using cfiCommon1
          CFI (cfiPicker48) NoFunction
          CFI (cfiPicker48) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiPicker48
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function sapp_taskInitProcess
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function sapp_controlEpProcess
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function sapp_controlEpProcess
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function sapp_controlEpProcess
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function sapp_functionEpProcess
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function sapp_functionEpProcess
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function sapp_functionEpProcess
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function sapp_taskInitProcess
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function sapp_controlEpProcess
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function sapp_functionEpProcess
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function sapp_controlEpProcess
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function sapp_controlEpProcess
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_46:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        RET
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function sapp_controlEpProcess
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function sapp_controlEpProcess
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_3
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function sapp_controlEpProcess
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_4
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        MOV       A,R6
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function sapp_controlEpProcess
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function sapp_functionEpProcess
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker69 Using cfiCommon1
          CFI (cfiPicker69) NoFunction
          CFI (cfiPicker69) Picker
        ADDC      A,R1
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,A
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiPicker69
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiCond70 Using cfiCommon0
          CFI Function sapp_taskInitProcess
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function sapp_controlEpProcess
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function CreateUserTimer
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function sapp_controlEpProcess
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function sapp_functionEpProcess
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiCond76 Using cfiCommon0
          CFI Function sapp_functionEpProcess
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function sapp_functionEpProcess
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function sapp_taskInitProcess
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function sapp_controlEpProcess
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function CreateUserTimer
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function sapp_controlEpProcess
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function sapp_functionEpProcess
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function sapp_functionEpProcess
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function sapp_functionEpProcess
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function sapp_functionEpProcess
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function sapp_taskInitProcess
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function sapp_controlEpProcess
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function CreateUserTimer
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function sapp_controlEpProcess
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function sapp_functionEpProcess
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker92 Using cfiCommon1
          CFI (cfiPicker92) NoFunction
          CFI (cfiPicker92) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiPicker92
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function sapp_functionEpProcess
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function sapp_functionEpProcess
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function sapp_functionEpProcess
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function sapp_functionEpProcess
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function sapp_taskInitProcess
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function sapp_controlEpProcess
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function CreateUserTimer
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function sapp_controlEpProcess
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function sapp_functionEpProcess
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {3, 0, 0}>`:
        DB 3
        DB 0
        DB 0
//  249 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  250 uint16 sapp_functionEpProcess(uint8 task_id, uint16 events)
sapp_functionEpProcess:
          CFI Block cfiBlock103 Using cfiCommon0
          CFI Function sapp_functionEpProcess
        CODE
//  251 {
        FUNCALL sapp_functionEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_functionEpProcess, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_functionEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_functionEpProcess, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_functionEpProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_functionEpProcess, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sapp_functionEpProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       ?V6,R2
        MOV       ?V7,R3
//  252     afIncomingMSGPacket_t *MSGpkt;
//  253     if(events & SYS_EVENT_MSG)
        MOV       A,R3
        ANL       A,#0x80
        JNZ       $+5
        LJMP      ??sapp_functionEpProcess_0 & 0xFFFF
//  254     {
//  255         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP      ??sapp_functionEpProcess_1
//  256         while ( MSGpkt )
//  257         {
//  258             switch ( MSGpkt->hdr.event )
//  259             {
//  260             // 接收到数据包
//  261             case AF_INCOMING_MSG_CMD:
//  262                 {
//  263                     switch ( MSGpkt->clusterId )
//  264                     {
//  265                     case SAPP_PERIODIC_CLUSTERID:
//  266                         if(MSGpkt->endPoint <= funcCount)
//  267                         {
//  268                             struct ep_info_t *ep = &funcList[MSGpkt->endPoint - 1];
//  269                             if(ep->incoming_data)
//  270                                 (*ep->incoming_data)(ep, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, &MSGpkt->cmd);
//  271                             HalLedBlink( HAL_LED_2, 1, 50, 250 );
//  272                         }
//  273                         
//  274                         break;
//  275                     }
//  276                 }
//  277                 break;
//  278 
//  279             case ZDO_STATE_CHANGE:
//  280                 {
//  281                     curNwkState = (devStates_t)(MSGpkt->hdr.status);
//  282                     if ( (curNwkState == DEV_ZB_COORD)
//  283                             || (curNwkState == DEV_ROUTER)
//  284                             || (curNwkState == DEV_END_DEVICE) )
//  285                     {
//  286                         int i;
//  287                         int hasTimeOut = 0;
//  288                         for(i = 0; i < funcCount; i++)
//  289                         {
//  290                             struct ep_info_t *ep = &funcList[i];
//  291                             if(ep->nwk_stat_change)
//  292                                 (*ep->nwk_stat_change)(ep);
//  293                             // 重置端点计数器
//  294                             if(ep->time_out && ep->function.cycle)
//  295                             {
//  296                                 ep->timerTick = ep->function.cycle;
//  297                                 hasTimeOut = 1;
//  298                             }
//  299                         }
//  300                         if(hasTimeOut)
//  301                         {
//  302                             // 加入网络成功,启动定时器,为各个端点提供定时
//  303                             osal_start_timerEx(task_id,
//  304                                                SAPP_SEND_PERIODIC_MSG_EVT,
//  305                                                1000);
//  306                         }
//  307                     }
//  308                     else
//  309                         osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
//  310                 }
//  311                 break;
//  312             case IOPORT_INT_EVENT:
//  313               {
//  314                 OSALIOIntData_t* IOIntData;
//  315                 IOIntData =(OSALIOIntData_t*)MSGpkt;
//  316                 if(IOIntData->endPoint <= funcCount)
??sapp_functionEpProcess_2:
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_13:
        JC        ??sapp_functionEpProcess_3
//  317                 {
//  318                     struct ep_info_t *ep = &funcList[IOIntData->endPoint - 1];
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     ?Subroutine3 & 0xFFFF
//  319                     if(ep->res_available)
??CrossCallReturnLabel_62:
        JZ        ??sapp_functionEpProcess_3
//  320                         (*ep->res_available)(ep, ResIOInt, IOIntData->arg);
        ; Setup parameters for indirect call
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine39_0 & 0xFFFF
//  321                 }
//  322               }
??CrossCallReturnLabel_74:
        MOV       R1,#0x5
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL     ?CALL_IND
//  323               break;
//  324 #if defined(HAL_IRDEC) && (HAL_IRDEC == TRUE)
//  325             case IRDEC_INT_EVENT:   //
//  326               {
//  327                 OSALIRDecIntData_t* TimerIntData = (OSALIRDecIntData_t*)MSGpkt;
//  328                 if(TimerIntData->endPoint <= funcCount)
//  329                 {
//  330                     struct ep_info_t *ep = &funcList[TimerIntData->endPoint - 1];
//  331                     if(ep->res_available)
//  332                         (*ep->res_available)(ep, ResTimerInt, TimerIntData->data);
//  333                 }
//  334               }
//  335               break;
//  336 #endif
//  337             default:
//  338                 break;
//  339             }
//  340             // Release the memory
//  341             osal_msg_deallocate( (uint8 *)MSGpkt );
??sapp_functionEpProcess_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  342             // Next - if one is available
//  343             MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R1,A
??sapp_functionEpProcess_1:
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,?V0
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??sapp_functionEpProcess_4 & 0xFFFF
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,#-0x1a
        JZ        ??sapp_functionEpProcess_5
        ADD       A,#0x49
        JZ        ??sapp_functionEpProcess_6
        ADD       A,#-0x1f
        JZ        ??sapp_functionEpProcess_2
        SJMP      ??sapp_functionEpProcess_3
??sapp_functionEpProcess_5:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??sapp_functionEpProcess_7
        INC       DPTR
        MOVX      A,@DPTR
??sapp_functionEpProcess_7:
        JNZ       ??sapp_functionEpProcess_3
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_14:
        JC        ??sapp_functionEpProcess_3
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_8:
        ADDC      A,R1
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,A
        LCALL     ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_64:
        JZ        ??sapp_functionEpProcess_8
        ; Setup parameters for indirect call
        MOV       A,?V0
        ADD       A,#0x1f
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,?V0
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_76:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL     ?CALL_IND
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
??sapp_functionEpProcess_8:
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x6
        MOV       R5,#0x0
        MOV       R3,#0x32
        MOV       R2,#0x1
        MOV       R1,#0x2
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        LJMP      ??sapp_functionEpProcess_3 & 0xFFFF
??sapp_functionEpProcess_6:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#curNwkState
        MOVX      @DPTR,A
        XRL       A,#0x9
        JZ        ??sapp_functionEpProcess_9
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??sapp_functionEpProcess_9
        MOVX      A,@DPTR
        XRL       A,#0x6
        JZ        $+5
        LJMP      ??sapp_functionEpProcess_10 & 0xFFFF
??sapp_functionEpProcess_9:
        MOV       R6,#0x0
        MOV       ?V4,R6
        MOV       ?V5,R6
        SJMP      ??sapp_functionEpProcess_11
??sapp_functionEpProcess_12:
        MOV       A,?V4
        MOV       B,#0x21
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x21
        MOV       A,?V5
        LCALL     ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV       ?V2,A
        MOV       A,#(funcList >> 8) & 0xff
        ADDC      A,R1
        MOV       ?V3,A
        MOV       DPL,?V2
        MOV       DPH,A
        LCALL     ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_63:
        JZ        ??sapp_functionEpProcess_13
        ; Setup parameters for indirect call
        MOV       R2,?V2
        MOV       R3,?V3
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL     ?CALL_IND
??sapp_functionEpProcess_13:
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_65:
        JZ        ??sapp_functionEpProcess_14
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??sapp_functionEpProcess_14
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,?V2
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       R6,#0x1
??sapp_functionEpProcess_14:
        INC       ?V4
        MOV       A,?V4
        JNZ       ??sapp_functionEpProcess_11
        INC       ?V5
??sapp_functionEpProcess_11:
        MOV       DPTR,#funcCount
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       C
        MOV       A,?V4
        SUBB      A,R0
        MOV       A,?V5
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_39:
        JC        ??sapp_functionEpProcess_12
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??sapp_functionEpProcess_3 & 0xFFFF
        ; Setup parameters for call to function osal_start_timerEx
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_70:
        LJMP      ??sapp_functionEpProcess_3 & 0xFFFF
??sapp_functionEpProcess_10:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        LJMP      ??sapp_functionEpProcess_3 & 0xFFFF
//  344         }
//  345         // return unprocessed events
//  346         return (events ^ SYS_EVENT_MSG);
??sapp_functionEpProcess_4:
        MOV       R2,?V6
        MOV       A,?V7
        XRL       A,#0x80
        MOV       R3,A
        LJMP      ??sapp_functionEpProcess_15 & 0xFFFF
//  347     }
//  348 
//  349     // 定时器时间到, 遍历所有端点看是否有需要调用time_out
//  350     if(events & SAPP_SEND_PERIODIC_MSG_EVT)
??sapp_functionEpProcess_0:
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??sapp_functionEpProcess_16 & 0xFFFF
//  351     {
//  352         int i;
//  353         for(i = 0; i < funcCount; i++)
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
        SJMP      ??sapp_functionEpProcess_17
//  354         {
//  355             struct ep_info_t *ep = &funcList[i];
??sapp_functionEpProcess_18:
        MOV       A,?V0
        MOV       B,#0x21
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x21
        MOV       A,?V1
        LCALL     ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV       R6,A
        MOV       A,#(funcList >> 8) & 0xff
        ADDC      A,R1
        MOV       R7,A
//  356             if(ep->time_out && ep->function.cycle)
        MOV       DPL,R6
        MOV       DPH,A
        LCALL     ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_66:
        JZ        ??sapp_functionEpProcess_19
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??sapp_functionEpProcess_19
//  357             {
//  358                 // 端点需要周期执行
//  359                 ep->timerTick = ep->timerTick - 1;
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_35:
        MOVX      A,@DPTR
        DEC       A
        MOVX      @DPTR,A
//  360                 if(ep->timerTick == 0)
        JNZ       ??sapp_functionEpProcess_19
//  361                 {
//  362                   // 定时时间到,执行time_out函数
//  363                   (*ep->time_out)(ep);
        ; Setup parameters for indirect call
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL     ?CALL_IND
//  364                   ep->timerTick = ep->function.cycle;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        LCALL     ?Subroutine25 & 0xFFFF
//  365                 }
//  366             }
//  367 #if 0
//  368             if(ep->userTimer && ep->res_available)
//  369             {
//  370                 ep->userTimer = ep->userTimer - 1;
//  371                 if(ep->userTimer <= 1)
//  372                 {
//  373                     (*ep->res_available)(ep, ResUserTimer, NULL);
//  374                     ep->userTimer = 0;
//  375                 }
//  376             }
//  377 #endif
//  378         }
??CrossCallReturnLabel_36:
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
??sapp_functionEpProcess_19:
        INC       ?V0
        MOV       A,?V0
        JNZ       ??sapp_functionEpProcess_17
        INC       ?V1
??sapp_functionEpProcess_17:
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        JC        ??sapp_functionEpProcess_18
//  379         // 重新启动定时器
//  380         osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        LCALL     ?Subroutine13 & 0xFFFF
//  381         // return unprocessed events
//  382         return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
??CrossCallReturnLabel_71:
        MOV       A,?V6
        XRL       A,#0x1
        MOV       R2,A
        MOV       R3,?V7
        SJMP      ??sapp_functionEpProcess_15
//  383     }
//  384     // Discard unknown events
//  385     return 0;
??sapp_functionEpProcess_16:
        MOV       R2,#0x0
        MOV       R3,#0x0
??sapp_functionEpProcess_15:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
//  386 }
          CFI EndBlock cfiBlock103

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond104 Using cfiCommon0
          CFI Function sapp_functionEpProcess
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function sapp_functionEpProcess
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        MOV       A,R6
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function sapp_functionEpProcess
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function sapp_functionEpProcess
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOV       A,?V0
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function sapp_functionEpProcess
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function sapp_functionEpProcess
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond113 Using cfiCommon0
          CFI Function CreateUserTimer
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function sapp_functionEpProcess
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function sapp_functionEpProcess
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker116 Using cfiCommon1
          CFI (cfiPicker116) NoFunction
          CFI (cfiPicker116) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        RET
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiPicker116

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond117 Using cfiCommon0
          CFI Function sapp_functionEpProcess
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function sapp_functionEpProcess
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#funcCount
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R0
        RET
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond120 Using cfiCommon0
          CFI Function sapp_functionEpProcess
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function sapp_functionEpProcess
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker122 Using cfiCommon1
          CFI (cfiPicker122) NoFunction
          CFI (cfiPicker122) Picker
        MOVX      A,@DPTR
        MOV       B,#0x21
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#(funcList + 223) & 0xff
        ADD       A,R0
        MOV       R2,A
        MOV       A,#((funcList - 33) >> 8) & 0xff
        RET
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiPicker122

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond123 Using cfiCommon0
          CFI Function sapp_controlEpProcess
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function sapp_controlEpProcess
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function sapp_functionEpProcess
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker126 Using cfiCommon1
          CFI (cfiPicker126) NoFunction
          CFI (cfiPicker126) Picker
        MOV       DPTR,#funcCount
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       C
        MOV       A,?V0
        SUBB      A,R0
        MOV       A,?V1
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_40:
        RET
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiPicker126

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond127 Using cfiCommon0
          CFI Function sapp_taskInitProcess
          CFI Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function sapp_taskInitProcess
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_10
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function sapp_functionEpProcess
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function sapp_controlEpProcess
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_0
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function sapp_controlEpProcess
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_1
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function sapp_functionEpProcess
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_2
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker133 Using cfiCommon1
          CFI (cfiPicker133) NoFunction
          CFI (cfiPicker133) Picker
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        RET
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiPicker133
//  387 //处理接收到的wifi模块串口数据
//  388 static uint8 uartMsgProcesser1(uint8 *msg)
//  389 {
//  390   /*
//  391     uint8 length = 0;
//  392     mtOSALSerialData_t *pMsg = (mtOSALSerialData_t *)msg;
//  393     mtUserSerialMsg_t *pMsgBody = (mtUserSerialMsg_t *)pMsg->msg;
//  394     if ( (curNwkState != DEV_ZB_COORD)
//  395             && (curNwkState != DEV_ROUTER)
//  396             && (curNwkState != DEV_END_DEVICE) )
//  397         return 1;
//  398     
//  399     while((&pMsgBody->sop)[length++]!='\n'&&length<pMsgBody->len);
//  400     HalUARTWrite(0,&pMsgBody->sop,length);
//  401     HalLedBlink( HAL_LED_1, 3, 50, 90 );
//  402 */
//  403     uint8 length = 0;
//  404     mtOSALSerialData_t *pMsg = (mtOSALSerialData_t *)msg;
//  405     mtUserSerialMsg_t *pMsgBody = (mtUserSerialMsg_t *)pMsg->msg;
//  406     while((&pMsgBody->sop)[length++]!='\n'&&length<pMsgBody->len);
//  407     SendData(TRANSFER_ENDPOINT,&pMsgBody->sop,0x0000, 1,length);
//  408     return 1;
//  409 }
//  410 
//  411 #if defined(ZDO_COORDINATOR)
//  412 static uint8 uartMsgProcesser(uint8 *msg)
//  413 {
//  414     uint8 length = 0;
//  415     mtOSALSerialData_t *pMsg = (mtOSALSerialData_t *)msg;
//  416     mtUserSerialMsg_t *pMsgBody = (mtUserSerialMsg_t *)pMsg->msg;
//  417     while((&pMsgBody->sop)[length++]!='\n'&&length<pMsgBody->len);
//  418     SendData(TRANSFER_ENDPOINT,&pMsgBody->sop,0xFFFF, 1,length);
//  419     return 1;
//  420 }
//  421 #endif
//  422 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  423 uint8 SendData(uint8 srcEP, const void *buf, uint16 addr, uint8 dstEP, uint8 Len)
SendData:
          CFI Block cfiBlock134 Using cfiCommon0
          CFI Function SendData
        CODE
//  424 {
        FUNCALL SendData, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        MOV       R6,A
        MOV       ?V0,R2
        MOV       ?V1,R3
//  425     static uint8 transID = 0;
//  426     afAddrType_t SendDataAddr;
//  427     struct ep_info_t *epInfo;
//  428 
//  429     if(srcEP <= funcCount)
        MOV       DPTR,#funcCount
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R6
        JC        ??SendData_0
//  430         epInfo = &funcList[srcEP - 1];
        MOV       A,R1
        MOV       B,#0x21
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#(funcList + 223) & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#((funcList - 33) >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        SJMP      ??SendData_1
//  431     else
//  432         epInfo = &controlEndPointInfo;
??SendData_0:
        MOV       R2,#controlEndPointInfo & 0xff
        MOV       R3,#(controlEndPointInfo >> 8) & 0xff
//  433 
//  434     SendDataAddr.addrMode = (afAddrMode_t)Addr16Bit;         //短地址发送
??SendData_1:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  435     SendDataAddr.endPoint = dstEP;
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  436     SendDataAddr.addr.shortAddr = addr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
//  437     if ( AF_DataRequest( &SendDataAddr, //发送的地址和模式
//  438                          // TODO:
//  439                          &epInfo->SampleApp_epDesc,   //终端（比如操作系统中任务ID等）
//  440                          SAPP_PERIODIC_CLUSTERID,//发送串ID
//  441                          Len,
//  442                          (uint8*)buf,
//  443                          &transID,  //信息ID（操作系统参数）
//  444                          AF_DISCV_ROUTE,
//  445                          AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V2,#0x1e
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V2,#??transID & 0xff
        MOV       ?V3,#(??transID >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R1,#0x20
        MOV       A,R2
        ADD       A,#0xf
        MOV       R4,A
        CLR       A
        ADDC      A,R3
        MOV       R5,A
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        JNZ       ??SendData_2
//  446     {
//  447         HalLedBlink( HAL_LED_1, 1, 50, 250 );
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x6
        MOV       R5,#0x0
        MOV       R3,#0x32
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
//  448         return 1;
        MOV       R1,#0x1
        SJMP      ??SendData_3
//  449     }
//  450     else
//  451     {
//  452         return 0;
??SendData_2:
        MOV       R1,#0x0
??SendData_3:
        MOV       A,#0xc
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  453     }
//  454 }
          CFI EndBlock cfiBlock134

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??transID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  455 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  456 void CreateUserTimer(struct ep_info_t *ep, uint8 seconds)
CreateUserTimer:
          CFI Block cfiBlock135 Using cfiCommon0
          CFI Function CreateUserTimer
        CODE
//  457 {
        FUNCALL CreateUserTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  458     if(ep == NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??CreateUserTimer_0
//  459         return;
//  460     if(ep->res_available == NULL)
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_69:
        JZ        ??CreateUserTimer_0
//  461         return;
//  462     ep->userTimer = seconds;
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV       A,R6
        MOVX      @DPTR,A
//  463     if(isUserTimerRunning == 0)
        MOV       DPTR,#isUserTimerRunning
        MOVX      A,@DPTR
        JNZ       ??CreateUserTimer_0
//  464     {
//  465         osal_start_timerEx(controlTaskId,
//  466                            SAPP_SEND_PERIODIC_MSG_EVT,
//  467                            1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#controlTaskId
        LCALL     ??Subroutine36_0 & 0xFFFF
//  468         isUserTimerRunning = 1;
??CrossCallReturnLabel_72:
        MOV       DPTR,#isUserTimerRunning
        MOV       A,#0x1
        MOVX      @DPTR,A
//  469     }
//  470 }
??CreateUserTimer_0:
          CFI EndBlock cfiBlock135
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock136 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock136

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond137 Using cfiCommon0
          CFI Function sapp_controlEpProcess
          CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function sapp_controlEpProcess
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_30
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-4
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function CreateUserTimer
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function createEndPoint
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_24
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-4
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function DeleteUserTimer
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_25
          CFI (cfiCond141) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond141) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond141) CFA_SP SP+-9
          CFI Block cfiPicker142 Using cfiCommon1
          CFI (cfiPicker142) NoFunction
          CFI (cfiPicker142) Picker
        MOV       A,R2
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiPicker142
//  471 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  472 void DeleteUserTimer(struct ep_info_t *ep)
DeleteUserTimer:
          CFI Block cfiBlock143 Using cfiCommon0
          CFI Function DeleteUserTimer
        CODE
//  473 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  474     if(ep == NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??CrossCallReturnLabel_25
//  475         return;
//  476     ep->userTimer = 0;
        LCALL     ?Subroutine19 & 0xFFFF
//  477 }
??CrossCallReturnLabel_25:
          CFI EndBlock cfiBlock143
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock144 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock144

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond145 Using cfiCommon0
          CFI Function createEndPoint
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function DeleteUserTimer
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond146) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond146) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond146) CFA_SP SP+-7
          CFI Block cfiPicker147 Using cfiCommon1
          CFI (cfiPicker147) NoFunction
          CFI (cfiPicker147) Picker
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_43:
        CLR       A
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiPicker147
//  478 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  479 void ModifyRefreshCycle(struct ep_info_t *ep, uint8 seconds)
ModifyRefreshCycle:
          CFI Block cfiBlock148 Using cfiCommon0
          CFI Function ModifyRefreshCycle
        CODE
//  480 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  481     if(ep == NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??ModifyRefreshCycle_0
//  482         return;
//  483     if(ep->time_out == NULL)
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV       A,R4
        ORL       A,R5
        JZ        ??ModifyRefreshCycle_0
//  484         return;
//  485     ep->function.cycle = seconds;
        MOV       A,R1
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  486     if(ep->timerTick > seconds)
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_34:
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R1
        CLR       C
        SUBB      A,R0
        JNC       ??ModifyRefreshCycle_0
//  487         ep->timerTick = seconds;
        MOV       A,R1
        MOVX      @DPTR,A
//  488 }
??ModifyRefreshCycle_0:
        SJMP      ?Subroutine2
          CFI EndBlock cfiBlock148

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond149 Using cfiCommon0
          CFI Function createEndPoint
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function ModifyRefreshCycle
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond150) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond150) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond150) CFA_SP SP+-7
          CFI Block cfiPicker151 Using cfiCommon1
          CFI (cfiPicker151) NoFunction
          CFI (cfiPicker151) Picker
        MOV       A,R2
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiPicker151

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond152 Using cfiCommon0
          CFI Function sapp_controlEpProcess
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function sapp_controlEpProcess
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function sapp_controlEpProcess
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker155 Using cfiCommon1
          CFI (cfiPicker155) NoFunction
          CFI (cfiPicker155) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiPicker155
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond156 Using cfiCommon0
          CFI Function sapp_functionEpProcess
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function sapp_controlEpProcess
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function sapp_controlEpProcess
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function sapp_controlEpProcess
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker160 Using cfiCommon1
          CFI (cfiPicker160) NoFunction
          CFI (cfiPicker160) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiPicker160
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond161 Using cfiCommon0
          CFI Function ModifyRefreshCycle
          CFI Conditional ??CrossCallReturnLabel_75
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function sapp_functionEpProcess
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function sapp_controlEpProcess
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function sapp_controlEpProcess
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function sapp_controlEpProcess
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker166 Using cfiCommon1
          CFI (cfiPicker166) NoFunction
          CFI (cfiPicker166) Picker
        INC       DPTR
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiPicker166
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond167 Using cfiCommon0
          CFI Function sapp_functionEpProcess
          CFI Conditional ??CrossCallReturnLabel_74
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function ModifyRefreshCycle
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond168) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond168) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond168) CFA_SP SP+-7
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function sapp_functionEpProcess
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function sapp_controlEpProcess
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function sapp_controlEpProcess
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function sapp_controlEpProcess
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker173 Using cfiCommon1
          CFI (cfiPicker173) NoFunction
          CFI (cfiPicker173) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiPicker173
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond174 Using cfiCommon0
          CFI Function CoordinatorIncomingRoutine
          CFI Conditional ??CrossCallReturnLabel_73
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function sapp_functionEpProcess
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-2
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function ModifyRefreshCycle
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond176) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond176) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond176) CFA_SP SP+-7
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function sapp_functionEpProcess
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function sapp_controlEpProcess
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function sapp_controlEpProcess
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function sapp_controlEpProcess
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker181 Using cfiCommon1
          CFI (cfiPicker181) NoFunction
          CFI (cfiPicker181) Picker
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        RET
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiPicker181
//  489 
//  490 #if ! defined(ZDO_COORDINATOR) && defined(RTR_NWK)
//  491 //路由器定时发送拓扑信息
//  492 void RouterTimeoutRoutine(struct ep_info_t *ep)
//  493 {
//  494     SendData(ep->ep, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO)); //节点向协调器发送拓扑信息
//  495 }
//  496 //路由器收到广播后向所有连接wifi的设备广播信息
//  497 void RouterIncomingRoutine(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg){
//  498     HalUARTWrite(0,msg->Data,msg->DataLength);
//  499     HalLedBlink( HAL_LED_2, 3, 50, 90 );
//  500      //Delay_ms(5);
//  501 
//  502 }
//  503 #endif
//  504 
//  505 #if defined(ZDO_COORDINATOR)

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  506 void CoordinatorTimeoutRoutine(struct ep_info_t *ep){
CoordinatorTimeoutRoutine:
          CFI Block cfiBlock182 Using cfiCommon0
          CFI Function CoordinatorTimeoutRoutine
        CODE
        FUNCALL CoordinatorTimeoutRoutine, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  507      SendData(ep->ep, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO)); //节点向协调器发送拓扑信息
        ; Setup parameters for call to function SendData
        MOV       ?V0,#0xe
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#topoBuffer & 0xff
        MOV       R3,#(topoBuffer >> 8) & 0xff
        MOV       A,R6
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_83:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  508 }
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock182

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond183 Using cfiCommon0
          CFI Function sapp_controlEpProcess
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function sapp_controlEpProcess
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker185 Using cfiCommon1
          CFI (cfiPicker185) NoFunction
          CFI (cfiPicker185) Picker
        MOV       R1,#-0x10
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiPicker185
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond186 Using cfiCommon0
          CFI Function sapp_controlEpProcess
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function CoordinatorTimeoutRoutine
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function sapp_controlEpProcess
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function sapp_controlEpProcess
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker190 Using cfiCommon1
          CFI (cfiPicker190) NoFunction
          CFI (cfiPicker190) Picker
        LCALL     `??SendData::?relay`; Banked call to: SendData
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiPicker190
//  509 //协调器收到求救信息后向连接wifi的服务器发送信息

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  510 void CoordinatorIncomingRoutine(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)
CoordinatorIncomingRoutine:
          CFI Block cfiBlock191 Using cfiCommon0
          CFI Function CoordinatorIncomingRoutine
        CODE
//  511 {
        FUNCALL CoordinatorIncomingRoutine, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorIncomingRoutine, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
//  512     //msg->Data[], msg->DataLength, msg->TransSeqNumber
//  513     // 转发数据到串口
//  514   /*
//  515     if(msg->DataLength > 0)
//  516     {
//  517         mtUserSerialMsg_t *pMsg = osal_mem_alloc(sizeof(mtUserSerialMsg_t) + msg->DataLength - 1);
//  518         pMsg->sop = MT_UART_SOF;
//  519         pMsg->len = msg->DataLength + 6;
//  520         pMsg->cmd = 0x0018;
//  521         pMsg->cmdEndPoint = 0xF1;
//  522         pMsg->addr = addr;
//  523         pMsg->endPoint = endPoint;
//  524         memcpy(pMsg->data, msg->Data, msg->DataLength);
//  525         pMsg->fsc = MT_UartCalcFCS(0, &pMsg->len, 1);
//  526         pMsg->fsc = MT_UartCalcFCS(pMsg->fsc, pMsg->dataBody, pMsg->len);
//  527         HalUARTWrite(HAL_UART_PORT_0, &pMsg->sop, sizeof(mtUserSerialMsg_t) - 2 + msg->DataLength);
//  528         HalUARTWrite(HAL_UART_PORT_0, &pMsg->fsc, 1);
//  529         osal_mem_free(pMsg);
//  530     }
//  531 */
//  532     HalUARTWrite(0,msg->Data,msg->DataLength);
        ; Setup parameters for call to function HalUARTWrite
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  533     HalLedBlink( HAL_LED_2, 2, 50, 90 );
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#0x5a
        MOV       R5,#0x0
        MOV       R3,#0x32
        MOV       R2,#0x2
        MOV       R1,#0x2
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
//  534   
//  535 }
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock191

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for topoBuffer>`:
        DATA8
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW 0
        DW 0
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for commonClusterId>`:
        DATA16
        DW 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??sapp_taskInitProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sapp_taskInitProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??createEndPoint::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    createEndPoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??sapp_controlEpProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sapp_controlEpProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??sapp_functionEpProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sapp_functionEpProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SendData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CreateUserTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CreateUserTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??DeleteUserTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    DeleteUserTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ModifyRefreshCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ModifyRefreshCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CoordinatorTimeoutRoutine::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CoordinatorTimeoutRoutine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CoordinatorIncomingRoutine::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CoordinatorIncomingRoutine

        END
//  536 #endif
//  537 #endif//SAPP_ZSTACK
// 
// 2 598 bytes in segment BANKED_CODE
//    60 bytes in segment BANK_RELAYS
//    16 bytes in segment XDATA_I
//    16 bytes in segment XDATA_ID
//     3 bytes in segment XDATA_ROM_C
//    40 bytes in segment XDATA_Z
// 
//    76 bytes of CODE     memory
//     3 bytes of CONST    memory
// 2 598 bytes of HUGECODE memory
//    56 bytes of XDATA    memory
//
//Errors: none
//Warnings: 1
