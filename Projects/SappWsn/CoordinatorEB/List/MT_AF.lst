###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               14/Jul/2019  20:14:10
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Components\mt\MT_AF.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWBD40.tmp
#        (D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Components\mt\MT_AF.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D SAPP_ZSTACK
#        -lC
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\List
#        -lA
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x4545
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\ -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\Source\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\ZMain\TI2530DB\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\include\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\include\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\high_level\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mt\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\osal\include\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\saddr\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\sdata\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\af\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\nwk\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sapi\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sec\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sys\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\zdo\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\List\MT_AF.lst
#    Object file        =  
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\Obj\MT_AF.r51
#
###############################################################################

D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2011-05-27 16:00:27 -0700 (Fri, 27 May 2011) $
      4            Revision:       $Revision: 26145 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /* ------------------------------------------------------------------------------------------------
     43           *                                          Includes
     44           * ------------------------------------------------------------------------------------------------
     45           */
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "MT.h"
     49          #include "MT_AF.h"
     50          #include "MT_ZDO.h"
     51          #include "nwk.h"
     52          #include "OnBoard.h"
     53          #include "MT_UART.h"
     54          
     55          #if defined INTER_PAN
     56          #include "stub_aps.h"
     57          #endif
     58          
     59          /* ------------------------------------------------------------------------------------------------
     60           *                                          Constants
     61           * ------------------------------------------------------------------------------------------------
     62           */
     63          
     64          #if !defined MT_AF_EXEC_CNT
     65          #define MT_AF_EXEC_CNT  15
     66          #endif
     67          
     68          #if !defined MT_AF_EXEC_DLY
     69          #define MT_AF_EXEC_DLY  1000
     70          #endif
     71          
     72          /* ------------------------------------------------------------------------------------------------
     73           *                                           Typedefs
     74           * ------------------------------------------------------------------------------------------------
     75           */
     76          
     77          typedef struct
     78          {
     79            uint8 *data;
     80            afAddrType_t dstAddr;
     81            endPointDesc_t *epDesc;
     82            uint16 cId;
     83            uint16 dataLen;
     84            uint8 transId;
     85            uint8 txOpts;
     86            uint8 radius;
     87            uint8 tick;
     88          } mtAfDataReq_t;
     89          
     90          typedef struct _mtAfInMsgList_t
     91          {
     92            struct _mtAfInMsgList_t *next;
     93            uint8 *data;
     94            uint32 timestamp;         // Receipt timestamp from MAC.
     95            uint8 tick;
     96          } mtAfInMsgList_t;
     97          
     98          /* ------------------------------------------------------------------------------------------------
     99           *                                        Local Variables
    100           * ------------------------------------------------------------------------------------------------
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /* ------------------------------------------------------------------------------------------------
    107           *                                        Global Variables
    108           * ------------------------------------------------------------------------------------------------
    109           */
    110          
    111          #if defined ( MT_AF_CB_FUNC )
    112          uint16 _afCallbackSub;
    113          #endif
    114          
    115          /* ------------------------------------------------------------------------------------------------
    116           *                                        Local Functions
    117           * ------------------------------------------------------------------------------------------------
    118           */
    119          
    120          void MT_AfRegister(uint8 *pBuf);
    121          void MT_AfDataRequest(uint8 *pBuf);
    122          
    123          #if defined ( ZIGBEE_SOURCE_ROUTING )
    124          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    125          #endif
    126          
    127          #if defined INTER_PAN
    128          static void MT_AfInterPanCtl(uint8 *pBuf);
    129          #endif
    130          
    131          static void MT_AfDataRetrieve(uint8 *pBuf);
    132          static void MT_AfDataStore(uint8 *pBuf);
    133          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    134          
    135          /**************************************************************************************************
    136           * @fn          MT_AfExec
    137           *
    138           * @brief       This function is invoked by an MT timer event.
    139           *
    140           * input parameters
    141           *
    142           * None.
    143           *
    144           * output parameters
    145           *
    146           * None.
    147           *
    148           * @return      None.
    149           **************************************************************************************************
    150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void MT_AfExec(void)
   \                     MT_AfExec:
    152          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    153            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV       DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP      ??MT_AfExec_1
    154          
    155            while (pItem != NULL)
    156            {
    157              if (--(pItem->tick) == 0)
    158              {
    159                if (pMtAfInMsgList == pItem)
    160                {
    161                  pMtAfInMsgList = pItem->next;
    162                  (void)osal_mem_free(pItem);
    163                  pItem = pMtAfInMsgList;
    164                }
    165                else
    166                {
    167                  pPrev->next = pItem->next;
    168                  (void)osal_mem_free(pItem);
    169                  pItem = pPrev->next;
    170                }
    171              }
    172              else
    173              {
    174                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    175                pItem = pItem->next;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
    176              }
   \                     ??MT_AfExec_1:
   \   000012   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6038         JZ        ??MT_AfExec_3
   \   000019   EA           MOV       A,R2
   \   00001A   2408         ADD       A,#0x8
   \   00001C   F582         MOV       DPL,A
   \   00001E   E4           CLR       A
   \   00001F   3B           ADDC      A,R3
   \   000020   F583         MOV       DPH,A
   \   000022   E0           MOVX      A,@DPTR
   \   000023   14           DEC       A
   \   000024   F0           MOVX      @DPTR,A
   \   000025   70E3         JNZ       ??MT_AfExec_2
   \   000027   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00002A   EA           MOV       A,R2
   \   00002B   68           XRL       A,R0
   \   00002C   7002         JNZ       ??MT_AfExec_4
   \   00002E   EB           MOV       A,R3
   \   00002F   69           XRL       A,R1
   \                     ??MT_AfExec_4:
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   7008         JNZ       ??MT_AfExec_5
   \   000036   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000039                ; Setup parameters for call to function osal_mem_free
   \   000039   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00003C   80C7         SJMP      ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   00003E   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000048                ; Setup parameters for call to function osal_mem_free
   \   000048   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00004B   8E82         MOV       DPL,R6
   \   00004D   8F83         MOV       DPH,R7
   \   00004F   80C1         SJMP      ??MT_AfExec_1
    177            }
    178          
    179            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   000051   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000054   6015         JZ        ??MT_AfExec_6
    180            {
    181              if (--(pMtAfDataReq->tick) == 0)
   \   000056   E8           MOV       A,R0
   \   000057   2417         ADD       A,#0x17
   \   000059   F582         MOV       DPL,A
   \   00005B   E4           CLR       A
   \   00005C   39           ADDC      A,R1
   \   00005D   F583         MOV       DPH,A
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   14           DEC       A
   \   000061   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000064   E0           MOVX      A,@DPTR
   \   000065   7004         JNZ       ??MT_AfExec_6
    182              {
    183                (void)osal_mem_free(pMtAfDataReq);
   \   000067                ; Setup parameters for call to function osal_mem_free
   \   000067   12....       LCALL     ?Subroutine11 & 0xFFFF
    184                pMtAfDataReq = NULL;
    185              }
    186            }
   \                     ??CrossCallReturnLabel_17:
   \   00006A   F0           MOVX      @DPTR,A
    187          
    188            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   00006B   90....       MOV       DPTR,#pMtAfInMsgList
   \   00006E   12....       LCALL     ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000071   7005         JNZ       ??MT_AfExec_7
   \   000073   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000076   6008         JZ        ??CrossCallReturnLabel_53
    189            {
    190              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   000078                ; Setup parameters for call to function osal_start_timerEx
   \   000078   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00007B   6003         JZ        ??CrossCallReturnLabel_53
    191              {
    192                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00007D                ; Setup parameters for call to function osal_set_event
   \   00007D   12....       LCALL     ?Subroutine32 & 0xFFFF
    193              }
    194            }
    195          }
   \                     ??CrossCallReturnLabel_53:
   \   000080                REQUIRE ?Subroutine0
   \   000080                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   7A08         MOV       R2,#0x8
   \   000002   7B00         MOV       R3,#0x0
   \   000004   90....       MOV       DPTR,#MT_TaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   7CE8         MOV       R4,#-0x18
   \   000002   7D03         MOV       R5,#0x3
   \   000004   7A08         MOV       R2,#0x8
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#MT_TaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000010   E9           MOV       A,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#pMtAfDataReq
   \   000004   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000007   2417         ADD       A,#0x17
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   38           ADDC      A,R0
   \   00000D   F583         MOV       DPH,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine69_0
   \   000001                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV       DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine70_0
   \   000003                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000003   90....       MOV       DPTR,#pMtAfInMsgList
   \   000006   E8           MOV       A,R0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   E9           MOV       A,R1
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine77_0
   \   000003                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000006   90....       MOV       DPTR,#pMtAfDataReq
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET
    196          
    197          /***************************************************************************************************
    198           * @fn      MT_AfCommandProcessing
    199           *
    200           * @brief   Process all the AF commands that are issued by test tool
    201           *
    202           * @param   pBuf - pointer to the received buffer
    203           *
    204           * @return  status
    205           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    207          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   F8           MOV       R0,A
   \   00000C   EB           MOV       A,R3
   \   00000D   F9           MOV       R1,A
    208            uint8 status = MT_RPC_SUCCESS;
   \   00000E   7E00         MOV       R6,#0x0
    209          
    210            switch (pBuf[MT_RPC_POS_CMD1])
   \   000010   8A82         MOV       DPL,R2
   \   000012   F583         MOV       DPH,A
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6015         JZ        ??MT_AfCommandProcessing_0
   \   000019   14           DEC       A
   \   00001A   6017         JZ        ??MT_AfCommandProcessing_1
   \   00001C   14           DEC       A
   \   00001D   6014         JZ        ??MT_AfCommandProcessing_1
   \   00001F   14           DEC       A
   \   000020   6016         JZ        ??MT_AfCommandProcessing_2
   \   000022   24F2         ADD       A,#-0xe
   \   000024   601C         JZ        ??MT_AfCommandProcessing_3
   \   000026   14           DEC       A
   \   000027   6014         JZ        ??MT_AfCommandProcessing_4
   \   000029   14           DEC       A
   \   00002A   601B         JZ        ??MT_AfCommandProcessing_5
   \   00002C   8063         SJMP      ??MT_AfCommandProcessing_6
    211            {
    212              case MT_AF_REGISTER:
    213                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   00002E                ; Setup parameters for call to function MT_AfRegister
   \   00002E   12....       LCALL     `??MT_AfRegister::?relay`; Banked call to: MT_AfRegister
    214                break;
   \   000031   8060         SJMP      ??MT_AfCommandProcessing_7
    215          
    216              case MT_AF_DATA_REQUEST:
    217              case MT_AF_DATA_REQUEST_EXT:
    218                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000033                ; Setup parameters for call to function MT_AfDataRequest
   \   000033   12....       LCALL     `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    219                break;
   \   000036   805B         SJMP      ??MT_AfCommandProcessing_7
    220          
    221          #if defined ( ZIGBEE_SOURCE_ROUTING )
    222              case MT_AF_DATA_REQUEST_SRCRTG:
    223                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   000038                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   000038   12....       LCALL     `??MT_AfDataRequestSrcRtg::?relay`; Banked call to: MT_AfDataRequestSrcRtg
    224                break;
   \   00003B   8056         SJMP      ??MT_AfCommandProcessing_7
    225          #endif
    226          
    227          #if defined INTER_PAN
    228              case MT_AF_INTER_PAN_CTL:
    229                MT_AfInterPanCtl(pBuf);
    230                break;
    231          #endif
    232          
    233              case MT_AF_DATA_RETRIEVE:
    234                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   00003D                ; Setup parameters for call to function MT_AfDataRetrieve
   \   00003D   12....       LCALL     `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    235                break;
   \   000040   8051         SJMP      ??MT_AfCommandProcessing_7
    236          
    237              case MT_AF_DATA_STORE:
    238                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_3:
   \   000042                ; Setup parameters for call to function MT_AfDataStore
   \   000042   12....       LCALL     `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    239                break;
   \   000045   804C         SJMP      ??MT_AfCommandProcessing_7
    240          
    241              case MT_AF_APSF_CONFIG_SET:
    242                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   C0E0         PUSH      A
   \   000052   7401         MOV       A,#0x1
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   D0E0         POP       A
   \   000059   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   C0E0         PUSH      A
   \   000061   7402         MOV       A,#0x2
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069                ; Setup parameters for call to function afAPSF_ConfigSet
   \   000069   7401         MOV       A,#0x1
   \   00006B   12....       LCALL     ?XSTACK_DISP101_8
   \   00006E   8882         MOV       DPL,R0
   \   000070   8983         MOV       DPH,R1
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F9           MOV       R1,A
   \   000077   12....       LCALL     `??afAPSF_ConfigSet::?relay`; Banked call to: afAPSF_ConfigSet
   \   00007A   E9           MOV       A,R1
   \   00007B   85..82       MOV       DPL,?XSP + 0
   \   00007E   85..83       MOV       DPH,?XSP + 1
   \   000081   F0           MOVX      @DPTR,A
   \   000082                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000082   AC..         MOV       R4,?XSP + 0
   \   000084   AD..         MOV       R5,?XSP + 1
   \   000086   7B01         MOV       R3,#0x1
   \   000088   7A13         MOV       R2,#0x13
   \   00008A   7964         MOV       R1,#0x64
   \   00008C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    243                break;
   \   00008F   8002         SJMP      ??MT_AfCommandProcessing_7
    244          
    245              default:
    246                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_6:
   \   000091   7E02         MOV       R6,#0x2
    247                break;
    248            }
    249          
    250            return status;
   \                     ??MT_AfCommandProcessing_7:
   \   000093   EE           MOV       A,R6
   \   000094   F9           MOV       R1,A
   \   000095   7403         MOV       A,#0x3
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009A   02....       LJMP      ?Subroutine0 & 0xFFFF
    251          }
    252          
    253          /***************************************************************************************************
    254           * @fn      MT_AfRegister
    255           *
    256           * @brief   Process AF Register command
    257           *
    258           * @param   pBuf - pointer to the received buffer
    259           *
    260           * @return  none
    261           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
    264            uint8 cmdId;
    265            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7410         MOV       A,#0x10
   \   000016   12....       LCALL     ?Subroutine34 & 0xFFFF
    266            endPointDesc_t *epDesc;
    267          
    268            /* parse header */
    269            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_59:
   \   000019   F5..         MOV       ?V0,A
    270            pBuf += MT_RPC_FRAME_HDR_SZ;
    271          
    272            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   7A06         MOV       R2,#0x6
   \   00001D   7B00         MOV       R3,#0x0
   \   00001F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
   \   000026   AE..         MOV       R6,?V4
   \   000028   AF..         MOV       R7,?V5
    273            if ( epDesc )
   \   00002A   EA           MOV       A,R2
   \   00002B   4F           ORL       A,R7
   \   00002C   603F         JZ        ??MT_AfRegister_0
    274            {
    275              epDesc->task_id = &MT_TaskID;
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   A3           INC       DPTR
   \   000033   74..         MOV       A,#MT_TaskID & 0xff
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   74..         MOV       A,#(MT_TaskID >> 8) & 0xff
   \   000039   F0           MOVX      @DPTR,A
    276              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00003A                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00003A   EA           MOV       A,R2
   \   00003B   FC           MOV       R4,A
   \   00003C   EB           MOV       A,R3
   \   00003D   FD           MOV       R5,A
   \   00003E   E5..         MOV       A,?V2
   \   000040   2403         ADD       A,#0x3
   \   000042   FA           MOV       R2,A
   \   000043   E4           CLR       A
   \   000044   35..         ADDC      A,?V3
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   00004A   E9           MOV       A,R1
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   F0           MOVX      @DPTR,A
    277              if ( retValue == ZSuccess )
   \   000052   700F         JNZ       ??MT_AfRegister_1
    278              {
    279                retValue = afRegister( epDesc );
   \   000054                ; Setup parameters for call to function afRegister
   \   000054   EE           MOV       A,R6
   \   000055   FA           MOV       R2,A
   \   000056   EF           MOV       A,R7
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   00005B   E9           MOV       A,R1
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   F0           MOVX      @DPTR,A
    280              }
    281          
    282              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   000063   E0           MOVX      A,@DPTR
   \   000064   6007         JZ        ??MT_AfRegister_0
    283              {
    284                osal_mem_free( epDesc );
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   EE           MOV       A,R6
   \   000067   FA           MOV       R2,A
   \   000068   EF           MOV       A,R7
   \   000069   FB           MOV       R3,A
   \   00006A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    285              }
    286            }
    287          
    288            /* Build and send back the response */
    289            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   00006D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00006D   AC..         MOV       R4,?XSP + 0
   \   00006F   AD..         MOV       R5,?XSP + 1
   \   000071   7B01         MOV       R3,#0x1
   \   000073   AA..         MOV       R2,?V0
   \   000075   7964         MOV       R1,#0x64
   \   000077   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    290          }
   \   00007A   7401         MOV       A,#0x1
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007F   7F06         MOV       R7,#0x6
   \   000081   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    291          
    292          /***************************************************************************************************
    293           * @fn      MT_AfDataRequest
    294           *
    295           * @brief   Process AF Register command
    296           *
    297           * @param   pBuf - pointer to the received buffer
    298           *
    299           * @return  none
    300           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8B..         MOV       ?V1,R3
    303            #define MT_AF_REQ_MSG_LEN  10
    304            #define MT_AF_REQ_MSG_EXT  10
    305          
    306            endPointDesc_t *epDesc;
    307            afAddrType_t dstAddr;
    308            cId_t cId;
    309            uint8 transId, txOpts, radius;
    310            uint8 cmd0, cmd1;
    311            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?Subroutine56 & 0xFFFF
    312            uint16 dataLen, tempLen;
    313          
    314            /* Parse header */
    315            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_100:
   \   000017   E0           MOVX      A,@DPTR
   \   000018   C0E0         PUSH      A
   \   00001A   7404         MOV       A,#0x4
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   12....       LCALL     ?Subroutine34 & 0xFFFF
    316            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_60:
   \   000024   F5..         MOV       ?V7,A
    317            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000026   EA           MOV       A,R2
   \   000027   2403         ADD       A,#0x3
   \   000029   F5..         MOV       ?V0,A
   \   00002B   5002         JNC       ??MT_AfDataRequest_0
   \   00002D   05..         INC       ?V1
    318          
    319            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002F   7402         MOV       A,#0x2
   \   000031   65..         XRL       A,?V7
   \   000033   707D         JNZ       ??MT_AfDataRequest_1
    320            {
    321              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000035   85..82       MOV       DPL,?V0
   \   000038   85..83       MOV       DPH,?V1
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   740D         MOV       A,#0xd
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   E8           MOV       A,R0
   \   000043   12....       LCALL     ?Subroutine37 & 0xFFFF
    322          
    323              if (dstAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_69:
   \   000046   7403         MOV       A,#0x3
   \   000048   68           XRL       A,R0
   \   000049   701E         JNZ       ??MT_AfDataRequest_2
    324              {
    325                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   00004B                ; Setup parameters for call to function osal_memcpy
   \   00004B   85....       MOV       ?V4,?V0
   \   00004E   85....       MOV       ?V5,?V1
   \   000051   75..00       MOV       ?V6,#0x0
   \   000054   78..         MOV       R0,#?V4
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000059   7C08         MOV       R4,#0x8
   \   00005B   7D00         MOV       R5,#0x0
   \   00005D   EC           MOV       A,R4
   \   00005E   12....       LCALL     ?XSTACK_DISP101_8
   \   000061   12....       LCALL     ??Subroutine75_0 & 0xFFFF
    326              }
   \                     ??CrossCallReturnLabel_176:
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
   \   000067   800C         SJMP      ??CrossCallReturnLabel_134
    327              else
    328              {
    329                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_2:
   \   000069   12....       LCALL     ??Subroutine67_0 & 0xFFFF
    330              }
   \                     ??CrossCallReturnLabel_129:
   \   00006C   7405         MOV       A,#0x5
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   EA           MOV       A,R2
   \   000072   12....       LCALL     ??Subroutine69_0 & 0xFFFF
    331              pBuf += Z_EXTADDR_LEN;
    332          
    333              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_134:
   \   000075   85..82       MOV       DPL,?V0
   \   000078   85..83       MOV       DPH,?V1
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   C0E0         PUSH      A
   \   000086   740E         MOV       A,#0xe
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   D0E0         POP       A
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   E5..         MOV       A,?V0
   \   000090   2409         ADD       A,#0x9
   \   000092   F5..         MOV       ?V0,A
   \   000094   5002         JNC       ??MT_AfDataRequest_3
   \   000096   05..         INC       ?V1
    334              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_3:
   \   000098   F582         MOV       DPL,A
   \   00009A   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00009D   740F         MOV       A,#0xf
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   EA           MOV       A,R2
   \   0000A3   12....       LCALL     ??Subroutine69_0 & 0xFFFF
    335              pBuf += 2;
   \                     ??CrossCallReturnLabel_135:
   \   0000A6   E5..         MOV       A,?V0
   \   0000A8   2402         ADD       A,#0x2
   \   0000AA   F5..         MOV       ?V0,A
   \   0000AC   5031         JNC       ??MT_AfDataRequest_4
   \   0000AE   05..         INC       ?V1
   \   0000B0   802D         SJMP      ??MT_AfDataRequest_4
    336            }
    337            else
    338            {
    339              /* Destination address */
    340              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000B2   740D         MOV       A,#0xd
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   12....       LCALL     ?Subroutine26 & 0xFFFF
    341              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_127:
   \   0000BA   7405         MOV       A,#0x5
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL     ?Subroutine38 & 0xFFFF
    342              pBuf += 2;
    343          
    344              /* Destination endpoint */
    345              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_71:
   \   0000C2   C0E0         PUSH      A
   \   0000C4   740E         MOV       A,#0xe
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   D0E0         POP       A
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   E5..         MOV       A,?V0
   \   0000CE   2403         ADD       A,#0x3
   \   0000D0   F5..         MOV       ?V0,A
   \   0000D2   5002         JNC       ??MT_AfDataRequest_5
   \   0000D4   05..         INC       ?V1
    346              dstAddr.panId = 0;
   \                     ??MT_AfDataRequest_5:
   \   0000D6   740F         MOV       A,#0xf
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   E4           CLR       A
   \   0000DC   F0           MOVX      @DPTR,A
   \   0000DD   A3           INC       DPTR
   \   0000DE   F0           MOVX      @DPTR,A
    347            }
    348          
    349            /* Source endpoint */
    350            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_4:
   \   0000DF                ; Setup parameters for call to function afFindEndPointDesc
   \   0000DF   85..82       MOV       DPL,?V0
   \   0000E2   85..83       MOV       DPH,?V1
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F9           MOV       R1,A
   \   0000E7   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000EA   7402         MOV       A,#0x2
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   EA           MOV       A,R2
   \   0000F0   F0           MOVX      @DPTR,A
   \   0000F1   A3           INC       DPTR
   \   0000F2   EB           MOV       A,R3
   \   0000F3   12....       LCALL     ?Subroutine37 & 0xFFFF
    351          
    352            /* ClusterId */
    353            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_70:
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   FA           MOV       R2,A
   \   0000F8   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000FB   EA           MOV       A,R2
   \   0000FC   28           ADD       A,R0
   \   0000FD   F5..         MOV       ?V4,A
   \   0000FF   E4           CLR       A
   \   000100   39           ADDC      A,R1
   \   000101   F5..         MOV       ?V5,A
    354            pBuf +=2;
    355          
    356            /* TransId */
    357            transId = *pBuf++;
   \   000103   85..82       MOV       DPL,?V0
   \   000106   85..83       MOV       DPH,?V1
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   C0E0         PUSH      A
   \   00010E   7401         MOV       A,#0x1
   \   000110   12....       LCALL     ?XSTACK_DISP0_8
   \   000113   D0E0         POP       A
   \   000115   12....       LCALL     ?Subroutine33 & 0xFFFF
    358          
    359            /* TxOption */
    360            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_56:
   \   000118   F5..         MOV       ?V6,A
    361          
    362            /* Radius */
    363            radius = *pBuf++;
   \   00011A   85..82       MOV       DPL,?V0
   \   00011D   85..83       MOV       DPH,?V1
   \   000120   A3           INC       DPTR
   \   000121   A3           INC       DPTR
   \   000122   A3           INC       DPTR
   \   000123   A3           INC       DPTR
   \   000124   E0           MOVX      A,@DPTR
   \   000125   F5..         MOV       ?V3,A
   \   000127   E5..         MOV       A,?V0
   \   000129   2405         ADD       A,#0x5
   \   00012B   F5..         MOV       ?V0,A
   \   00012D   5002         JNC       ??MT_AfDataRequest_6
   \   00012F   05..         INC       ?V1
    364          
    365            /* Length */
    366            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_6:
   \   000131   7402         MOV       A,#0x2
   \   000133   65..         XRL       A,?V7
   \   000135   85..82       MOV       DPL,?V0
   \   000138   85..83       MOV       DPH,?V1
   \   00013B   7016         JNZ       ??MT_AfDataRequest_7
    367            {
    368              dataLen = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00013D   12....       LCALL     ?Subroutine9 & 0xFFFF
    369              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \                     ??CrossCallReturnLabel_121:
   \   000140   EA           MOV       A,R2
   \   000141   2414         ADD       A,#0x14
   \   000143   F8           MOV       R0,A
   \   000144   E4           CLR       A
   \   000145   3F           ADDC      A,R7
   \   000146   F9           MOV       R1,A
    370              pBuf += 2;
   \   000147   E5..         MOV       A,?V0
   \   000149   2402         ADD       A,#0x2
   \   00014B   F5..         MOV       ?V0,A
   \   00014D   5016         JNC       ??MT_AfDataRequest_8
   \   00014F   05..         INC       ?V1
   \   000151   8012         SJMP      ??MT_AfDataRequest_8
    371            }
    372            else
    373            {
    374              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_7:
   \   000153   E0           MOVX      A,@DPTR
   \   000154   FE           MOV       R6,A
   \   000155   7F00         MOV       R7,#0x0
   \   000157   A3           INC       DPTR
   \   000158   8582..       MOV       ?V0,DPL
   \   00015B   8583..       MOV       ?V1,DPH
    375              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   00015E   240A         ADD       A,#0xa
   \   000160   F8           MOV       R0,A
   \   000161   E4           CLR       A
   \   000162   3400         ADDC      A,#0x0
   \   000164   F9           MOV       R1,A
    376            }
    377          
    378            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_8:
   \   000165   7402         MOV       A,#0x2
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00016D   EA           MOV       A,R2
   \   00016E   4B           ORL       A,R3
   \   00016F   6011         JZ        ??MT_AfDataRequest_9
    379            {
    380              retValue = afStatus_INVALID_PARAMETER;
    381            }
    382            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   000171   C3           CLR       C
   \   000172   E8           MOV       A,R0
   \   000173   94FB         SUBB      A,#-0x5
   \   000175   E9           MOV       A,R1
   \   000176   9400         SUBB      A,#0x0
   \   000178   5003         JNC       $+5
   \   00017A   02....       LJMP      ??MT_AfDataRequest_10 & 0xFFFF
    383            {
    384              if (pMtAfDataReq != NULL)
   \   00017D   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000180   600B         JZ        ??MT_AfDataRequest_11
    385              {
    386                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_9:
   \   000182   85..82       MOV       DPL,?XSP + 0
   \   000185   85..83       MOV       DPH,?XSP + 1
   \   000188   7402         MOV       A,#0x2
   \   00018A   02....       LJMP      ??MT_AfDataRequest_12 & 0xFFFF
    387              }
    388              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_11:
   \   00018D                ; Setup parameters for call to function osal_mem_alloc
   \   00018D   EE           MOV       A,R6
   \   00018E   2418         ADD       A,#0x18
   \   000190   FA           MOV       R2,A
   \   000191   E4           CLR       A
   \   000192   3F           ADDC      A,R7
   \   000193   FB           MOV       R3,A
   \   000194   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000197   90....       MOV       DPTR,#pMtAfDataReq
   \   00019A   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00019D   F9           MOV       R1,A
   \   00019E   EA           MOV       A,R2
   \   00019F   49           ORL       A,R1
   \   0001A0   85..82       MOV       DPL,?XSP + 0
   \   0001A3   85..83       MOV       DPH,?XSP + 1
   \   0001A6   7005         JNZ       ??MT_AfDataRequest_13
    389              {
    390                retValue = afStatus_MEM_FAIL;
   \   0001A8   7410         MOV       A,#0x10
   \   0001AA   02....       LJMP      ??MT_AfDataRequest_12 & 0xFFFF
    391              }
    392              else
    393              {
    394                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_13:
   \   0001AD   E4           CLR       A
   \   0001AE   F0           MOVX      @DPTR,A
    395          
    396                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   0001AF   90....       MOV       DPTR,#pMtAfDataReq
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   2418         ADD       A,#0x18
   \   0001B5   FA           MOV       R2,A
   \   0001B6   A3           INC       DPTR
   \   0001B7   E0           MOVX      A,@DPTR
   \   0001B8   3400         ADDC      A,#0x0
   \   0001BA   FB           MOV       R3,A
   \   0001BB   90....       MOV       DPTR,#pMtAfDataReq
   \   0001BE   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0001C1   A3           INC       DPTR
   \   0001C2   EB           MOV       A,R3
   \   0001C3   F0           MOVX      @DPTR,A
    397                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0001C4                ; Setup parameters for call to function osal_memcpy
   \   0001C4   7405         MOV       A,#0x5
   \   0001C6   12....       LCALL     ?XSTACK_DISP100_8
   \   0001C9   88..         MOV       ?V0,R0
   \   0001CB   89..         MOV       ?V1,R1
   \   0001CD   75..00       MOV       ?V2,#0x0
   \   0001D0   78..         MOV       R0,#?V0
   \   0001D2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001D5   7C0C         MOV       R4,#0xc
   \   0001D7   7D00         MOV       R5,#0x0
   \   0001D9   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0001DC   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   0001DF   12....       LCALL     ?DEALLOC_XSTACK8
    398                pMtAfDataReq->epDesc = epDesc;
   \   0001E2   7402         MOV       A,#0x2
   \   0001E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E7   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0001EA   90....       MOV       DPTR,#pMtAfDataReq
   \   0001ED   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001F0   12....       LCALL     ?Subroutine43 & 0xFFFF
    399                pMtAfDataReq->cId = cId;
   \                     ??CrossCallReturnLabel_79:
   \   0001F3   90....       MOV       DPTR,#pMtAfDataReq
   \   0001F6   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0001F9   2410         ADD       A,#0x10
   \   0001FB   F582         MOV       DPL,A
   \   0001FD   E4           CLR       A
   \   0001FE   38           ADDC      A,R0
   \   0001FF   F583         MOV       DPH,A
   \   000201   E5..         MOV       A,?V4
   \   000203   F0           MOVX      @DPTR,A
   \   000204   A3           INC       DPTR
   \   000205   E5..         MOV       A,?V5
   \   000207   F0           MOVX      @DPTR,A
    400                pMtAfDataReq->dataLen = dataLen;
   \   000208   90....       MOV       DPTR,#pMtAfDataReq
   \   00020B   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00020E   2412         ADD       A,#0x12
   \   000210   F582         MOV       DPL,A
   \   000212   E4           CLR       A
   \   000213   38           ADDC      A,R0
   \   000214   F583         MOV       DPH,A
   \   000216   EE           MOV       A,R6
   \   000217   F0           MOVX      @DPTR,A
   \   000218   A3           INC       DPTR
   \   000219   EF           MOV       A,R7
   \   00021A   F0           MOVX      @DPTR,A
    401                pMtAfDataReq->transId = transId;
   \   00021B   7401         MOV       A,#0x1
   \   00021D   12....       LCALL     ?XSTACK_DISP0_8
   \   000220   E0           MOVX      A,@DPTR
   \   000221   C0E0         PUSH      A
   \   000223   90....       MOV       DPTR,#pMtAfDataReq
   \   000226   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000229   D0E0         POP       A
   \   00022B   F0           MOVX      @DPTR,A
    402                pMtAfDataReq->txOpts = txOpts;
   \   00022C   90....       MOV       DPTR,#pMtAfDataReq
   \   00022F   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000232   E5..         MOV       A,?V6
   \   000234   F0           MOVX      @DPTR,A
    403                pMtAfDataReq->radius = radius;
   \   000235   90....       MOV       DPTR,#pMtAfDataReq
   \   000238   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00023B   E5..         MOV       A,?V3
   \   00023D   12....       LCALL     ?Subroutine14 & 0xFFFF
    404          
    405                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    406                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_24:
   \   000240   12....       LCALL     ?Subroutine27 & 0xFFFF
    407                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_117:
   \   000243   604E         JZ        ??MT_AfDataRequest_14
    408                {
    409                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000245                ; Setup parameters for call to function osal_set_event
   \   000245   12....       LCALL     ?Subroutine32 & 0xFFFF
    410                }
    411              }
    412            }
   \                     ??CrossCallReturnLabel_54:
   \   000248   8049         SJMP      ??MT_AfDataRequest_14
    413            else
    414            {
    415              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_10:
   \   00024A                ; Setup parameters for call to function AF_DataRequest
   \   00024A   E5..         MOV       A,?V3
   \   00024C   F5..         MOV       ?V2,A
   \   00024E   78..         MOV       R0,#?V2
   \   000250   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000253   7402         MOV       A,#0x2
   \   000255   12....       LCALL     ?XSTACK_DISP100_8
   \   000258   88..         MOV       ?V2,R0
   \   00025A   89..         MOV       ?V3,R1
   \   00025C   78..         MOV       R0,#?V2
   \   00025E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000261   78..         MOV       R0,#?V0
   \   000263   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000266   8E..         MOV       ?V0,R6
   \   000268   8F..         MOV       ?V1,R7
   \   00026A   78..         MOV       R0,#?V0
   \   00026C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00026F   78..         MOV       R0,#?V4
   \   000271   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000274   A9..         MOV       R1,?V6
   \   000276   740B         MOV       A,#0xb
   \   000278   12....       LCALL     ?XSTACK_DISP0_8
   \   00027B   12....       LCALL     ?Subroutine23 & 0xFFFF
    416            }
   \                     ??CrossCallReturnLabel_36:
   \   00027E   740E         MOV       A,#0xe
   \   000280   12....       LCALL     ?XSTACK_DISP101_8
   \   000283   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000286   7409         MOV       A,#0x9
   \   000288   12....       LCALL     ?DEALLOC_XSTACK8
   \   00028B   E9           MOV       A,R1
   \   00028C   85..82       MOV       DPL,?XSP + 0
   \   00028F   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequest_12:
   \   000292   F0           MOVX      @DPTR,A
    417          
    418            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_14:
   \   000293   7404         MOV       A,#0x4
   \   000295   12....       LCALL     ?XSTACK_DISP0_8
   \   000298   E0           MOVX      A,@DPTR
   \   000299   54E0         ANL       A,#0xe0
   \   00029B   6420         XRL       A,#0x20
   \   00029D   700D         JNZ       ??MT_AfDataRequest_15
    419            {
    420              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   00029F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00029F   AC..         MOV       R4,?XSP + 0
   \   0002A1   AD..         MOV       R5,?XSP + 1
   \   0002A3   7B01         MOV       R3,#0x1
   \   0002A5   AA..         MOV       R2,?V7
   \   0002A7   7964         MOV       R1,#0x64
   \   0002A9   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    421            }
    422          }
   \                     ??MT_AfDataRequest_15:
   \   0002AC   7411         MOV       A,#0x11
   \   0002AE                REQUIRE ?Subroutine1
   \   0002AE                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000003   8582..       MOV       ?V0,DPL
   \   000006   8583..       MOV       ?V1,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   740F         MOV       A,#0xf
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                REQUIRE ??Subroutine63_0
   \   000003                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002                REQUIRE ??Subroutine64_0
   \   000002                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   EA           MOV       A,R2
   \   000004   28           ADD       A,R0
   \   000005   FE           MOV       R6,A
   \   000006   E4           CLR       A
   \   000007   39           ADDC      A,R1
   \   000008   FF           MOV       R7,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   C8           XCH       A,R0
   \   000005   F9           MOV       R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?V0
   \   000006                REQUIRE ??Subroutine66_0
   \   000006                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   85..83       MOV       DPH,?V1
   \   000003                REQUIRE ??Subroutine67_0
   \   000003                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000003   2416         ADD       A,#0x16
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000003   2415         ADD       A,#0x15
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   2414         ADD       A,#0x14
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000003   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000003   EA           MOV       A,R2
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine76_0
   \   000002                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2402         ADD       A,#0x2
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   3400         ADDC      A,#0x0
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET
    423          
    424          #if defined ( ZIGBEE_SOURCE_ROUTING )
    425          
    426          /***************************************************************************************************
    427           * @fn      MT_AfDataRequestSrcRtg
    428           *
    429           * @brief   Process AF Register command
    430           *
    431           * @param   pBuf - pointer to the received buffer
    432           *
    433           * @return  none
    434           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8B..         MOV       ?V1,R3
    437            uint8 cmdId, dataLen = 0;
    438            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?Subroutine34 & 0xFFFF
    439            endPointDesc_t *epDesc;
    440            byte transId;
    441            afAddrType_t dstAddr;
    442            cId_t cId;
    443            byte txOpts, radius, srcEP, relayCnt;
    444            uint16 *pRelayList;
    445            uint8 i;
    446          
    447            /* parse header */
    448            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_61:
   \   000017   C0E0         PUSH      A
   \   000019   7403         MOV       A,#0x3
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   D0E0         POP       A
   \   000020   F0           MOVX      @DPTR,A
    449            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000021   EA           MOV       A,R2
   \   000022   2403         ADD       A,#0x3
   \   000024   F5..         MOV       ?V0,A
   \   000026   5002         JNC       ??MT_AfDataRequestSrcRtg_0
   \   000028   05..         INC       ?V1
    450          
    451            /* Destination address */
    452            /* Initialize the panID field to zero to avoid inter-pan */
    453            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   00002A                ; Setup parameters for call to function osal_memset
   \   00002A   7C0C         MOV       R4,#0xc
   \   00002C   7D00         MOV       R5,#0x0
   \   00002E   7900         MOV       R1,#0x0
   \   000030   7406         MOV       A,#0x6
   \   000032   12....       LCALL     ?XSTACK_DISP101_8
   \   000035   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    454            dstAddr.addrMode = afAddr16Bit;
   \   000038   740E         MOV       A,#0xe
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine26 & 0xFFFF
    455            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_128:
   \   000040   7406         MOV       A,#0x6
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   12....       LCALL     ?Subroutine38 & 0xFFFF
    456            pBuf += 2;
    457          
    458            /* Destination endpoint */
    459            dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_72:
   \   000048   C0E0         PUSH      A
   \   00004A   740F         MOV       A,#0xf
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   D0E0         POP       A
   \   000051   12....       LCALL     ?Subroutine33 & 0xFFFF
    460          
    461            /* Source endpoint */
    462            srcEP = *pBuf++;
   \                     ??CrossCallReturnLabel_57:
   \   000054   F9           MOV       R1,A
   \   000055   E5..         MOV       A,?V0
   \   000057   2404         ADD       A,#0x4
   \   000059   F5..         MOV       ?V0,A
   \   00005B   5002         JNC       ??MT_AfDataRequestSrcRtg_1
   \   00005D   05..         INC       ?V1
    463            epDesc = afFindEndPointDesc( srcEP );
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   00005F                ; Setup parameters for call to function afFindEndPointDesc
   \   00005F   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000062   7404         MOV       A,#0x4
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine43 & 0xFFFF
    464          
    465            /* ClusterId */
    466            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_80:
   \   00006A   85..82       MOV       DPL,?V0
   \   00006D   85..83       MOV       DPH,?V1
   \   000070   12....       LCALL     ?Subroutine9 & 0xFFFF
    467            pBuf +=2;
    468          
    469            /* TransId */
    470            transId = *pBuf++;
   \                     ??CrossCallReturnLabel_122:
   \   000073   85..82       MOV       DPL,?V0
   \   000076   85..83       MOV       DPH,?V1
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   C0E0         PUSH      A
   \   00007E   7401         MOV       A,#0x1
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   D0E0         POP       A
   \   000085   12....       LCALL     ?Subroutine33 & 0xFFFF
    471          
    472            /* TxOption */
    473            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_58:
   \   000088   C0E0         PUSH      A
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   D0E0         POP       A
   \   000091   12....       LCALL     ?Subroutine55 & 0xFFFF
    474          
    475            /* Radius */
    476            radius = *pBuf++;
   \                     ??CrossCallReturnLabel_98:
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F5..         MOV       ?V3,A
    477          
    478            /* Source route relay count */
    479            relayCnt = *pBuf++;
   \   000098   85..82       MOV       DPL,?V0
   \   00009B   85..83       MOV       DPH,?V1
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F5..         MOV       ?V2,A
   \   0000A6   E5..         MOV       A,?V0
   \   0000A8   2406         ADD       A,#0x6
   \   0000AA   F5..         MOV       ?V0,A
   \   0000AC   5002         JNC       ??MT_AfDataRequestSrcRtg_2
   \   0000AE   05..         INC       ?V1
    480          
    481            /* Convert the source route relay list */
    482            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   0000B0                ; Setup parameters for call to function osal_mem_alloc
   \   0000B0   AA..         MOV       R2,?V2
   \   0000B2   EA           MOV       A,R2
   \   0000B3   2A           ADD       A,R2
   \   0000B4   FA           MOV       R2,A
   \   0000B5   E4           CLR       A
   \   0000B6   33           RLC       A
   \   0000B7   FB           MOV       R3,A
   \   0000B8   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000BB   8A..         MOV       ?V6,R2
   \   0000BD   8B..         MOV       ?V7,R3
   \   0000BF   EA           MOV       A,R2
   \   0000C0   4B           ORL       A,R3
   \   0000C1   7003         JNZ       $+5
   \   0000C3   02....       LJMP      ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    483            {
    484              for( i = 0; i < relayCnt; i++ )
   \   0000C6   7A00         MOV       R2,#0x0
   \   0000C8   8028         SJMP      ??MT_AfDataRequestSrcRtg_4
    485              {
    486                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0000CA   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0000CD   EC           MOV       A,R4
   \   0000CE   28           ADD       A,R0
   \   0000CF   E4           CLR       A
   \   0000D0   39           ADDC      A,R1
   \   0000D1   FD           MOV       R5,A
   \   0000D2   EA           MOV       A,R2
   \   0000D3   25E0         ADD       A,0xE0 /* A   */
   \   0000D5   F8           MOV       R0,A
   \   0000D6   E4           CLR       A
   \   0000D7   33           RLC       A
   \   0000D8   F9           MOV       R1,A
   \   0000D9   E5..         MOV       A,?V6
   \   0000DB   28           ADD       A,R0
   \   0000DC   F582         MOV       DPL,A
   \   0000DE   EB           MOV       A,R3
   \   0000DF   39           ADDC      A,R1
   \   0000E0   F583         MOV       DPH,A
   \   0000E2   EC           MOV       A,R4
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   ED           MOV       A,R5
   \   0000E6   F0           MOVX      @DPTR,A
    487                pBuf += 2;
   \   0000E7   E5..         MOV       A,?V0
   \   0000E9   2402         ADD       A,#0x2
   \   0000EB   F5..         MOV       ?V0,A
   \   0000ED   5002         JNC       ??MT_AfDataRequestSrcRtg_6
   \   0000EF   05..         INC       ?V1
    488              }
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0000F1   0A           INC       R2
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   0000F2   EA           MOV       A,R2
   \   0000F3   C3           CLR       C
   \   0000F4   95..         SUBB      A,?V2
   \   0000F6   85..82       MOV       DPL,?V0
   \   0000F9   85..83       MOV       DPH,?V1
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   40CB         JC        ??MT_AfDataRequestSrcRtg_5
    489          
    490              /* Data payload Length */
    491              dataLen = *pBuf++;
   \   0000FF   FA           MOV       R2,A
   \   000100   A3           INC       DPTR
   \   000101   8582..       MOV       ?V0,DPL
   \   000104   8583..       MOV       ?V1,DPH
    492          
    493              if ( epDesc == NULL )
   \   000107   7404         MOV       A,#0x4
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   12....       LCALL     ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00010F   700A         JNZ       ??MT_AfDataRequestSrcRtg_7
    494              {
    495                retValue = afStatus_INVALID_PARAMETER;
   \   000111   85..82       MOV       DPL,?XSP + 0
   \   000114   85..83       MOV       DPH,?XSP + 1
   \   000117   7402         MOV       A,#0x2
   \   000119   805D         SJMP      ??MT_AfDataRequestSrcRtg_8
    496              }
    497              else
    498              {
    499                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    500                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   00011B                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   00011B   78..         MOV       R0,#?V6
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000120   78..         MOV       R0,#?V2
   \   000122   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000125   E5..         MOV       A,?V3
   \   000127   F5..         MOV       ?V2,A
   \   000129   78..         MOV       R0,#?V2
   \   00012B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012E   7405         MOV       A,#0x5
   \   000130   12....       LCALL     ?XSTACK_DISP100_8
   \   000133   88..         MOV       ?V2,R0
   \   000135   89..         MOV       ?V3,R1
   \   000137   78..         MOV       R0,#?V2
   \   000139   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013C   78..         MOV       R0,#?V0
   \   00013E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000141   EA           MOV       A,R2
   \   000142   F5..         MOV       ?V0,A
   \   000144   75..00       MOV       ?V1,#0x0
   \   000147   78..         MOV       R0,#?V0
   \   000149   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014C   8E..         MOV       ?V0,R6
   \   00014E   8F..         MOV       ?V1,R7
   \   000150   78..         MOV       R0,#?V0
   \   000152   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000155   740E         MOV       A,#0xe
   \   000157   12....       LCALL     ?XSTACK_DISP0_8
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   F9           MOV       R1,A
   \   00015C   7410         MOV       A,#0x10
   \   00015E   12....       LCALL     ?XSTACK_DISP0_8
   \   000161   12....       LCALL     ?Subroutine23 & 0xFFFF
    501              }
   \                     ??CrossCallReturnLabel_37:
   \   000164   7412         MOV       A,#0x12
   \   000166   12....       LCALL     ?XSTACK_DISP101_8
   \   000169   12....       LCALL     `??AF_DataRequestSrcRtg::?relay`; Banked call to: AF_DataRequestSrcRtg
   \   00016C   740C         MOV       A,#0xc
   \   00016E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000171   E9           MOV       A,R1
   \   000172   85..82       MOV       DPL,?XSP + 0
   \   000175   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   000178   F0           MOVX      @DPTR,A
    502          
    503              /* Free the memory allocated */
    504              osal_mem_free( pRelayList );
   \   000179                ; Setup parameters for call to function osal_mem_free
   \   000179   AA..         MOV       R2,?V6
   \   00017B   AB..         MOV       R3,?V7
   \   00017D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000180   8009         SJMP      ??MT_AfDataRequestSrcRtg_9
    505            }
    506            else
    507            {
    508              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   000182   85..82       MOV       DPL,?XSP + 0
   \   000185   85..83       MOV       DPH,?XSP + 1
   \   000188   7410         MOV       A,#0x10
   \   00018A   F0           MOVX      @DPTR,A
    509            }
    510          
    511          
    512            /* Build and send back the response */
    513            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   00018B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00018B   AC..         MOV       R4,?XSP + 0
   \   00018D   AD..         MOV       R5,?XSP + 1
   \   00018F   7B01         MOV       R3,#0x1
   \   000191   7403         MOV       A,#0x3
   \   000193   12....       LCALL     ?XSTACK_DISP0_8
   \   000196   E0           MOVX      A,@DPTR
   \   000197   FA           MOV       R2,A
   \   000198   7964         MOV       R1,#0x64
   \   00019A   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    514          }
   \   00019D   7412         MOV       A,#0x12
   \   00019F   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   FC           MOV       R4,A
   \   000001                REQUIRE ??Subroutine65_0
   \   000001                ; // Fall through to label ??Subroutine65_0
    515          #endif
    516          
    517          #if defined INTER_PAN
    518          /***************************************************************************************************
    519           * @fn      MT_AfInterPanCtl
    520           *
    521           * @brief   Process the AF Inter Pan control command.
    522           *
    523           * @param   pBuf - pointer to the received buffer
    524           *
    525           * @return  none
    526           ***************************************************************************************************/
    527          static void MT_AfInterPanCtl(uint8 *pBuf)
    528          {
    529            uint8 cmd, rtrn;
    530            uint16 panId;
    531            endPointDesc_t *pEP;
    532          
    533            cmd = pBuf[MT_RPC_POS_CMD1];
    534            pBuf += MT_RPC_FRAME_HDR_SZ;
    535          
    536            switch (*pBuf++)  // Inter-pan request parameter.
    537            {
    538            case InterPanClr:
    539              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    540              break;
    541          
    542            case InterPanSet:
    543              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    544              break;
    545          
    546            case InterPanReg:
    547              if ((pEP = afFindEndPointDesc(*pBuf)))
    548              {
    549                StubAPS_RegisterApp(pEP);
    550                rtrn = SUCCESS;
    551              }
    552              else
    553              {
    554                rtrn = FAILURE;
    555              }
    556              break;
    557          
    558            case InterPanChk:
    559              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    560              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    561              break;
    562          
    563            default:
    564              rtrn = afStatus_INVALID_PARAMETER;
    565              break;
    566            }
    567          
    568            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    569          }
    570          #endif
    571          
    572          /***************************************************************************************************
    573           * @fn      MT_AfDataConfirm
    574           *
    575           * @brief   Process
    576           *
    577           * @param   pBuf - pointer to the received buffer
    578           *
    579           * @return  none
    580           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    581          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    582          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    583            uint8 retArray[3];
    584          
    585            retArray[0] = pMsg->hdr.status;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   12....       LCALL     ?Subroutine34 & 0xFFFF
    586            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_62:
   \   000018   C0E0         PUSH      A
   \   00001A   7401         MOV       A,#0x1
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   12....       LCALL     ?Subroutine42 & 0xFFFF
    587            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_77:
   \   000024   E0           MOVX      A,@DPTR
   \   000025   C0E0         PUSH      A
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   D0E0         POP       A
   \   00002E   F0           MOVX      @DPTR,A
    588          
    589            /* Build and send back the response */
    590            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   00002F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00002F   AC..         MOV       R4,?XSP + 0
   \   000031   AD..         MOV       R5,?XSP + 1
   \   000033   7B03         MOV       R3,#0x3
   \   000035   7A80         MOV       R2,#-0x80
   \   000037   7944         MOV       R1,#0x44
   \   000039   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    591          }
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   D083         POP       DPH
   \   000043   D082         POP       DPL
   \   000045   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET
    592          
    593          /***************************************************************************************************
    594           * @fn          MT_AfIncomingMsg
    595           *
    596           * @brief       Process the callback subscription for AF Incoming data.
    597           *
    598           * @param       pkt - Incoming AF data.
    599           *
    600           * @return      none
    601           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    602          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    603          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   12....       LCALL     ?Subroutine35 & 0xFFFF
    604            #define MT_AF_INC_MSG_LEN  17
    605            #define MT_AF_INC_MSG_EXT  10
    606          
    607            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \                     ??CrossCallReturnLabel_63:
   \   000017   2420         ADD       A,#0x20
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   3B           ADDC      A,R3
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V6,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V7,A
    608            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   000026   E5..         MOV       A,?V6
   \   000028   2411         ADD       A,#0x11
   \   00002A   FE           MOV       R6,A
   \   00002B   E4           CLR       A
   \   00002C   35..         ADDC      A,?V7
   \   00002E   FF           MOV       R7,A
    609            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00002F   7406         MOV       A,#0x6
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   7481         MOV       A,#-0x7f
   \   000036   F0           MOVX      @DPTR,A
    610            uint8 *pRsp, *pTmp;
    611            mtAfInMsgList_t *pItem = NULL;
   \   000037   7404         MOV       A,#0x4
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   E4           CLR       A
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   12....       LCALL     ?Subroutine54 & 0xFFFF
    612          
    613          #if defined INTER_PAN
    614            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    615            {
    616              cmd = MT_AF_INCOMING_MSG_EXT;
    617            }
    618            else
    619          #endif
    620            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    621                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \                     ??CrossCallReturnLabel_95:
   \   000042   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6403         XRL       A,#0x3
   \   000048   6009         JZ        ??MT_AfIncomingMsg_0
   \   00004A   C3           CLR       C
   \   00004B   EE           MOV       A,R6
   \   00004C   94F1         SUBB      A,#-0xf
   \   00004E   EF           MOV       A,R7
   \   00004F   9400         SUBB      A,#0x0
   \   000051   400F         JC        ??MT_AfIncomingMsg_1
    622            {
    623              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   000053   7406         MOV       A,#0x6
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   7482         MOV       A,#-0x7e
   \   00005A   F0           MOVX      @DPTR,A
    624            }
    625          
    626            if (cmd == MT_AF_INCOMING_MSG_EXT)
    627            {
    628              respLen += MT_AF_INC_MSG_EXT;
   \   00005B   EE           MOV       A,R6
   \   00005C   240A         ADD       A,#0xa
   \   00005E   FE           MOV       R6,A
   \   00005F   E4           CLR       A
   \   000060   3F           ADDC      A,R7
   \   000061   FF           MOV       R7,A
    629            }
    630          
    631            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_1:
   \   000062   C3           CLR       C
   \   000063   EE           MOV       A,R6
   \   000064   94FB         SUBB      A,#-0x5
   \   000066   EF           MOV       A,R7
   \   000067   9400         SUBB      A,#0x0
   \   000069   4043         JC        ??MT_AfIncomingMsg_2
    632            {
    633              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   00006B                ; Setup parameters for call to function osal_mem_alloc
   \   00006B   E5..         MOV       A,?V6
   \   00006D   2409         ADD       A,#0x9
   \   00006F   FA           MOV       R2,A
   \   000070   E4           CLR       A
   \   000071   35..         ADDC      A,?V7
   \   000073   FB           MOV       R3,A
   \   000074   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000077   7404         MOV       A,#0x4
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00007F   7404         MOV       A,#0x4
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000087   7003         JNZ       $+5
   \   000089   02....       LJMP      ??CrossCallReturnLabel_20 & 0xFFFF
    634              {
    635                return;  // If cannot hold a huge message, cannot give indication at all.
    636              }
    637          
    638              pItem->data = (uint8 *)(pItem+1);
   \   00008C   7404         MOV       A,#0x4
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   E0           MOVX      A,@DPTR
   \   000092   2409         ADD       A,#0x9
   \   000094   F8           MOV       R0,A
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   3400         ADDC      A,#0x0
   \   000099   F9           MOV       R1,A
   \   00009A   7404         MOV       A,#0x4
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000A2   12....       LCALL     ?Subroutine39 & 0xFFFF
    639              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \                     ??CrossCallReturnLabel_137:
   \   0000A5   C3           CLR       C
   \   0000A6   EE           MOV       A,R6
   \   0000A7   95..         SUBB      A,?V6
   \   0000A9   FE           MOV       R6,A
   \   0000AA   EF           MOV       A,R7
   \   0000AB   95..         SUBB      A,?V7
   \   0000AD   FF           MOV       R7,A
    640            }
    641          
    642            // Attempt to allocate memory for the response packet.
    643            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_2:
   \   0000AE                ; Setup parameters for call to function osal_mem_alloc
   \   0000AE   EE           MOV       A,R6
   \   0000AF   FA           MOV       R2,A
   \   0000B0   EF           MOV       A,R7
   \   0000B1   FB           MOV       R3,A
   \   0000B2   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B5   7402         MOV       A,#0x2
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000BD   7402         MOV       A,#0x2
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL     ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0000C5   7015         JNZ       ??MT_AfIncomingMsg_3
    644            {
    645              if (pItem != NULL)
   \   0000C7   7404         MOV       A,#0x4
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL     ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0000CF   6008         JZ        ??CrossCallReturnLabel_19
    646              {
    647                (void)osal_mem_free(pItem);
   \   0000D1                ; Setup parameters for call to function osal_mem_free
   \   0000D1   7404         MOV       A,#0x4
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL     ?Subroutine12 & 0xFFFF
    648              }
    649              return;
   \                     ??CrossCallReturnLabel_19:
   \   0000D9   02....       LJMP      ??CrossCallReturnLabel_20 & 0xFFFF
    650            }
    651            pTmp = pRsp;
    652          
    653            /* Group ID */
    654            *pTmp++ = LO_UINT16(pMsg->groupId);
   \                     ??MT_AfIncomingMsg_3:
   \   0000DC   85..82       MOV       DPL,?XSP + 0
   \   0000DF   85..83       MOV       DPH,?XSP + 1
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   2402         ADD       A,#0x2
   \   0000E5   12....       LCALL     ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000E8   C0E0         PUSH      A
   \   0000EA   7402         MOV       A,#0x2
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000F2   D0E0         POP       A
   \   0000F4   12....       LCALL     ?Subroutine41 & 0xFFFF
    655            *pTmp++ = HI_UINT16(pMsg->groupId);
   \                     ??CrossCallReturnLabel_73:
   \   0000F7   C0E0         PUSH      A
   \   0000F9   7402         MOV       A,#0x2
   \   0000FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FE   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000101   D0E0         POP       A
   \   000103   12....       LCALL     ?Subroutine35 & 0xFFFF
    656          
    657            /* Cluster ID */
    658            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_64:
   \   000106   2404         ADD       A,#0x4
   \   000108   12....       LCALL     ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00010B   C0E0         PUSH      A
   \   00010D   7402         MOV       A,#0x2
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000115   D0E0         POP       A
   \   000117   12....       LCALL     ?Subroutine41 & 0xFFFF
    659            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_74:
   \   00011A   C0E0         PUSH      A
   \   00011C   7402         MOV       A,#0x2
   \   00011E   12....       LCALL     ?XSTACK_DISP0_8
   \   000121   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000124   D0E0         POP       A
   \   000126   F0           MOVX      @DPTR,A
    660          
    661            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   000127   7406         MOV       A,#0x6
   \   000129   12....       LCALL     ?XSTACK_DISP0_8
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   6482         XRL       A,#0x82
   \   00012F   85..82       MOV       DPL,?XSP + 0
   \   000132   85..83       MOV       DPH,?XSP + 1
   \   000135   6003         JZ        $+5
   \   000137   02....       LJMP      ??MT_AfIncomingMsg_4 & 0xFFFF
    662            {
    663              *pTmp++ = pMsg->srcAddr.addrMode;
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   240E         ADD       A,#0xe
   \   00013D   12....       LCALL     ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000140   C0E0         PUSH      A
   \   000142   7402         MOV       A,#0x2
   \   000144   12....       LCALL     ?XSTACK_DISP0_8
   \   000147   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00014A   D0E0         POP       A
   \   00014C   F0           MOVX      @DPTR,A
   \   00014D   7402         MOV       A,#0x2
   \   00014F   12....       LCALL     ?XSTACK_DISP0_8
   \   000152   E0           MOVX      A,@DPTR
   \   000153   2405         ADD       A,#0x5
   \   000155   F5..         MOV       ?V4,A
   \   000157   A3           INC       DPTR
   \   000158   E0           MOVX      A,@DPTR
   \   000159   3400         ADDC      A,#0x0
   \   00015B   F5..         MOV       ?V5,A
    664          
    665              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   00015D   8882         MOV       DPL,R0
   \   00015F   8983         MOV       DPH,R1
   \   000161   E0           MOVX      A,@DPTR
   \   000162   6403         XRL       A,#0x3
   \   000164   85..82       MOV       DPL,?XSP + 0
   \   000167   85..83       MOV       DPH,?XSP + 1
   \   00016A   7023         JNZ       ??MT_AfIncomingMsg_5
    666              {
    667                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   00016C                ; Setup parameters for call to function osal_memcpy
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   2406         ADD       A,#0x6
   \   00016F   F5..         MOV       ?V0,A
   \   000171   A3           INC       DPTR
   \   000172   E0           MOVX      A,@DPTR
   \   000173   3400         ADDC      A,#0x0
   \   000175   F5..         MOV       ?V1,A
   \   000177   75..00       MOV       ?V2,#0x0
   \   00017A   78..         MOV       R0,#?V0
   \   00017C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00017F   7C08         MOV       R4,#0x8
   \   000181   7D00         MOV       R5,#0x0
   \   000183   AA..         MOV       R2,?V4
   \   000185   AB..         MOV       R3,?V5
   \   000187   12....       LCALL     ??Subroutine75_0 & 0xFFFF
    668              }
   \                     ??CrossCallReturnLabel_178:
   \   00018A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018D   8012         SJMP      ??CrossCallReturnLabel_47
    669              else
    670              {
    671                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_5:
   \   00018F   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000192   85..82       MOV       DPL,?V4
   \   000195   85..83       MOV       DPH,?V5
   \   000198   F0           MOVX      @DPTR,A
    672                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000199   8882         MOV       DPL,R0
   \   00019B   8983         MOV       DPH,R1
   \   00019D   A3           INC       DPTR
   \   00019E   12....       LCALL     ?Subroutine29 & 0xFFFF
    673              }
    674              pTmp += Z_EXTADDR_LEN;
    675          
    676              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_47:
   \   0001A1   12....       LCALL     ??Subroutine72_0 & 0xFFFF
    677          #if defined INTER_PAN
    678              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    679              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    680          #else
    681              *pTmp++ = 0;
    682              *pTmp++ = 0;
    683          #endif
    684            }
   \                     ??CrossCallReturnLabel_159:
   \   0001A4   240F         ADD       A,#0xf
   \   0001A6   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0001A9   E4           CLR       A
   \   0001AA   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0001AD   F0           MOVX      @DPTR,A
   \   0001AE   E5..         MOV       A,?V4
   \   0001B0   240B         ADD       A,#0xb
   \   0001B2   F5..         MOV       ?V4,A
   \   0001B4   5055         JNC       ??MT_AfIncomingMsg_6
   \   0001B6   05..         INC       ?V5
   \                     ??MT_AfIncomingMsg_7:
   \   0001B8   8051         SJMP      ??MT_AfIncomingMsg_6
    685            else
    686            {
    687              /* Source Address */
    688              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_4:
   \   0001BA   12....       LCALL     ?Subroutine5 & 0xFFFF
    689              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
    690          
    691              /* Source EP */
    692              *pTmp++ = pMsg->srcAddr.endPoint;
    693            }
   \                     ??CrossCallReturnLabel_173:
   \   0001BD   C0E0         PUSH      A
   \   0001BF   7402         MOV       A,#0x2
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C4   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0001C7   D0E0         POP       A
   \   0001C9   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0001CC   C0E0         PUSH      A
   \   0001CE   7402         MOV       A,#0x2
   \   0001D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D3   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   D0E0         POP       A
   \   0001DA   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0001DD   240F         ADD       A,#0xf
   \   0001DF   F582         MOV       DPL,A
   \   0001E1   E4           CLR       A
   \   0001E2   38           ADDC      A,R0
   \   0001E3   F583         MOV       DPH,A
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   C0E0         PUSH      A
   \   0001E8   7402         MOV       A,#0x2
   \   0001EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001ED   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   0001F0   2406         ADD       A,#0x6
   \   0001F2   F582         MOV       DPL,A
   \   0001F4   E4           CLR       A
   \   0001F5   38           ADDC      A,R0
   \   0001F6   F583         MOV       DPH,A
   \   0001F8   D0E0         POP       A
   \   0001FA   F0           MOVX      @DPTR,A
   \   0001FB   7402         MOV       A,#0x2
   \   0001FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000200   E0           MOVX      A,@DPTR
   \   000201   2407         ADD       A,#0x7
   \   000203   F5..         MOV       ?V4,A
   \   000205   A3           INC       DPTR
   \   000206   E0           MOVX      A,@DPTR
   \   000207   3400         ADDC      A,#0x0
   \   000209   F5..         MOV       ?V5,A
    694          
    695            /* Destination EP */
    696            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_6:
   \   00020B   85..82       MOV       DPL,?XSP + 0
   \   00020E   85..83       MOV       DPH,?XSP + 1
   \   000211   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000214   E0           MOVX      A,@DPTR
   \   000215   85..82       MOV       DPL,?V4
   \   000218   85..83       MOV       DPH,?V5
   \   00021B   12....       LCALL     ?Subroutine54 & 0xFFFF
    697          
    698            /* WasBroadCast */
    699            *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_96:
   \   00021E   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000221   12....       LCALL     ?Subroutine29 & 0xFFFF
    700          
    701            /* LinkQuality */
    702            *pTmp++ = pMsg->LinkQuality;
   \                     ??CrossCallReturnLabel_48:
   \   000224   85..82       MOV       DPL,?XSP + 0
   \   000227   85..83       MOV       DPH,?XSP + 1
   \   00022A   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00022D   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000230   12....       LCALL     ?Subroutine19 & 0xFFFF
    703          
    704            /* SecurityUse */
    705            *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_154:
   \   000233   2419         ADD       A,#0x19
   \   000235   F582         MOV       DPL,A
   \   000237   E4           CLR       A
   \   000238   38           ADDC      A,R0
   \   000239   F583         MOV       DPH,A
   \   00023B   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00023E   A3           INC       DPTR
   \   00023F   12....       LCALL     ?Subroutine35 & 0xFFFF
    706          
    707            /* Timestamp */
    708            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 0);
   \                     ??CrossCallReturnLabel_65:
   \   000242   241A         ADD       A,#0x1a
   \   000244   FA           MOV       R2,A
   \   000245   A3           INC       DPTR
   \   000246   E0           MOVX      A,@DPTR
   \   000247   3400         ADDC      A,#0x0
   \   000249   FB           MOV       R3,A
   \   00024A   8A82         MOV       DPL,R2
   \   00024C   F583         MOV       DPH,A
   \   00024E   78..         MOV       R0,#?V0
   \   000250   12....       LCALL     ?L_MOV_X
   \   000253   85..82       MOV       DPL,?V4
   \   000256   85..83       MOV       DPH,?V5
   \   000259   12....       LCALL     ?Subroutine40 & 0xFFFF
    709            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 1);
   \                     ??CrossCallReturnLabel_131:
   \   00025C   12....       LCALL     ?L_MOV_X
   \   00025F   E5..         MOV       A,?V1
   \   000261   85..82       MOV       DPL,?V4
   \   000264   85..83       MOV       DPH,?V5
   \   000267   A3           INC       DPTR
   \   000268   A3           INC       DPTR
   \   000269   A3           INC       DPTR
   \   00026A   A3           INC       DPTR
   \   00026B   A3           INC       DPTR
   \   00026C   12....       LCALL     ??Subroutine68_0 & 0xFFFF
    710            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 2);
   \                     ??CrossCallReturnLabel_133:
   \   00026F   12....       LCALL     ?L_MOV_X
   \   000272   7410         MOV       A,#0x10
   \   000274   78..         MOV       R0,#?V0
   \   000276   12....       LCALL     ?UL_SHR
   \   000279   85..82       MOV       DPL,?V4
   \   00027C   85..83       MOV       DPH,?V5
   \   00027F   A3           INC       DPTR
   \   000280   A3           INC       DPTR
   \   000281   12....       LCALL     ?Subroutine40 & 0xFFFF
    711            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 3);
   \                     ??CrossCallReturnLabel_132:
   \   000284   12....       LCALL     ?L_MOV_X
   \   000287   7418         MOV       A,#0x18
   \   000289   78..         MOV       R0,#?V0
   \   00028B   12....       LCALL     ?UL_SHR
   \   00028E   85..82       MOV       DPL,?V4
   \   000291   85..83       MOV       DPH,?V5
   \   000294   A3           INC       DPTR
   \   000295   A3           INC       DPTR
   \   000296   A3           INC       DPTR
   \   000297   A3           INC       DPTR
   \   000298   A3           INC       DPTR
   \   000299   A3           INC       DPTR
   \   00029A   A3           INC       DPTR
   \   00029B   E5..         MOV       A,?V0
   \   00029D   F0           MOVX      @DPTR,A
    712          
    713          
    714            /* Data Length */
    715            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   00029E   7406         MOV       A,#0x6
   \   0002A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A3   E0           MOVX      A,@DPTR
   \   0002A4   6482         XRL       A,#0x82
   \   0002A6   7020         JNZ       ??MT_AfIncomingMsg_8
    716            {
    717              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    718               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    719               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    720               */
    721              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   0002A8   85..82       MOV       DPL,?V4
   \   0002AB   85..83       MOV       DPH,?V5
   \   0002AE   A3           INC       DPTR
   \   0002AF   A3           INC       DPTR
   \   0002B0   A3           INC       DPTR
   \   0002B1   A3           INC       DPTR
   \   0002B2   A3           INC       DPTR
   \   0002B3   A3           INC       DPTR
   \   0002B4   A3           INC       DPTR
   \   0002B5   A3           INC       DPTR
   \   0002B6   E4           CLR       A
   \   0002B7   12....       LCALL     ?Subroutine53 & 0xFFFF
    722              *pTmp++ = LO_UINT16(dataLen);
    723              *pTmp++ = HI_UINT16(dataLen);
    724            }
   \                     ??CrossCallReturnLabel_92:
   \   0002BA   E5..         MOV       A,?V6
   \   0002BC   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0002BF   E5..         MOV       A,?V7
   \   0002C1   F0           MOVX      @DPTR,A
   \   0002C2   E5..         MOV       A,?V4
   \   0002C4   240B         ADD       A,#0xb
   \   0002C6   800F         SJMP      ??MT_AfIncomingMsg_9
    725            else
    726            {
    727              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_8:
   \   0002C8   12....       LCALL     ??Subroutine72_0 & 0xFFFF
    728              *pTmp++ = dataLen;
    729            }
   \                     ??CrossCallReturnLabel_160:
   \   0002CB   241F         ADD       A,#0x1f
   \   0002CD   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0002D0   E5..         MOV       A,?V6
   \   0002D2   F0           MOVX      @DPTR,A
   \   0002D3   E5..         MOV       A,?V4
   \   0002D5   240A         ADD       A,#0xa
   \                     ??MT_AfIncomingMsg_9:
   \   0002D7   F5..         MOV       ?V4,A
   \   0002D9   5002         JNC       ??MT_AfIncomingMsg_10
   \   0002DB   05..         INC       ?V5
    730          
    731            /* Data */
    732            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_10:
   \   0002DD   7404         MOV       A,#0x4
   \   0002DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E2   12....       LCALL     ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0002E5   6068         JZ        ??MT_AfIncomingMsg_11
    733            {
    734              // Enqueue the new huge incoming item.
    735              pItem->next = pMtAfInMsgList;
   \   0002E7   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   0002EA   7404         MOV       A,#0x4
   \   0002EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EF   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0002F2   12....       LCALL     ?Subroutine39 & 0xFFFF
    736              pMtAfInMsgList = pItem;
   \                     ??CrossCallReturnLabel_138:
   \   0002F5   7404         MOV       A,#0x4
   \   0002F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FA   12....       LCALL     ?Subroutine13 & 0xFFFF
    737          
    738              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    739              pItem->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_23:
   \   0002FD   7404         MOV       A,#0x4
   \   0002FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000302   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000305   2408         ADD       A,#0x8
   \   000307   F582         MOV       DPL,A
   \   000309   E4           CLR       A
   \   00030A   38           ADDC      A,R0
   \   00030B   F583         MOV       DPH,A
   \   00030D   12....       LCALL     ?Subroutine27 & 0xFFFF
    740              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_118:
   \   000310   6003         JZ        ??CrossCallReturnLabel_55
    741              {
    742                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000312                ; Setup parameters for call to function osal_set_event
   \   000312   12....       LCALL     ?Subroutine32 & 0xFFFF
    743              }
    744          
    745              pItem->timestamp = pMsg->timestamp;
   \                     ??CrossCallReturnLabel_55:
   \   000315   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000318   241A         ADD       A,#0x1a
   \   00031A   F582         MOV       DPL,A
   \   00031C   E4           CLR       A
   \   00031D   38           ADDC      A,R0
   \   00031E   F583         MOV       DPH,A
   \   000320   12....       LCALL     ?XLOAD_R0123
   \   000323   7404         MOV       A,#0x4
   \   000325   12....       LCALL     ?XSTACK_DISP0_8
   \   000328   E0           MOVX      A,@DPTR
   \   000329   FC           MOV       R4,A
   \   00032A   A3           INC       DPTR
   \   00032B   E0           MOVX      A,@DPTR
   \   00032C   F583         MOV       DPH,A
   \   00032E   8C82         MOV       DPL,R4
   \   000330   A3           INC       DPTR
   \   000331   A3           INC       DPTR
   \   000332   A3           INC       DPTR
   \   000333   A3           INC       DPTR
   \   000334   12....       LCALL     ?XSTORE_R0123
    746              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   000337                ; Setup parameters for call to function osal_memcpy
   \   000337   12....       LCALL     ?Subroutine7 & 0xFFFF
    747            }
   \                     ??CrossCallReturnLabel_9:
   \   00033A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00033D   AC..         MOV       R4,?V6
   \   00033F   AD..         MOV       R5,?V7
   \   000341   7407         MOV       A,#0x7
   \   000343   12....       LCALL     ?XSTACK_DISP0_8
   \   000346   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000349   FA           MOV       R2,A
   \   00034A   A3           INC       DPTR
   \   00034B   E0           MOVX      A,@DPTR
   \   00034C   FB           MOV       R3,A
   \   00034D   800E         SJMP      ??MT_AfIncomingMsg_12
    748            else
    749            {
    750              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_11:
   \   00034F                ; Setup parameters for call to function osal_memcpy
   \   00034F   12....       LCALL     ?Subroutine7 & 0xFFFF
    751            }
   \                     ??CrossCallReturnLabel_10:
   \   000352   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000355   AC..         MOV       R4,?V6
   \   000357   AD..         MOV       R5,?V7
   \   000359   AA..         MOV       R2,?V4
   \   00035B   AB..         MOV       R3,?V5
   \                     ??MT_AfIncomingMsg_12:
   \   00035D   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000360   12....       LCALL     ?DEALLOC_XSTACK8
    752          
    753            /* Build and send back the response */
    754            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \   000363                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000363   7402         MOV       A,#0x2
   \   000365   12....       LCALL     ?XSTACK_DISP0_8
   \   000368   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00036B   EE           MOV       A,R6
   \   00036C   FB           MOV       R3,A
   \   00036D   7406         MOV       A,#0x6
   \   00036F   12....       LCALL     ?XSTACK_DISP0_8
   \   000372   E0           MOVX      A,@DPTR
   \   000373   FA           MOV       R2,A
   \   000374   7944         MOV       R1,#0x44
   \   000376   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    755          
    756            (void)osal_mem_free(pRsp);
   \   000379                ; Setup parameters for call to function osal_mem_free
   \   000379   7402         MOV       A,#0x2
   \   00037B   12....       LCALL     ?XSTACK_DISP0_8
   \   00037E   12....       LCALL     ?Subroutine12 & 0xFFFF
    757          }
   \                     ??CrossCallReturnLabel_20:
   \   000381   7407         MOV       A,#0x7
   \   000383   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V0
   \   000006                REQUIRE ??Subroutine68_0
   \   000006                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   78..         MOV       R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8A82         MOV       DPL,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine71_0
   \   000002                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine72_0
   \   000001                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine73_0
   \   000006                ; // Fall through to label ??Subroutine73_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000009   2422         ADD       A,#0x22
   \   00000B   F582         MOV       DPL,A
   \   00000D   E4           CLR       A
   \   00000E   38           ADDC      A,R0
   \   00000F   F583         MOV       DPH,A
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V0,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V1,A
   \   000018   78..         MOV       R0,#?V0
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003                REQUIRE ??Subroutine74_0
   \   000003                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   8882         MOV       DPL,R0
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET
    758          
    759          /**************************************************************************************************
    760           * @fn          MT_AfDataRetrieve
    761           *
    762           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    763           *          incoming AF message.
    764           *
    765           * input parameters
    766           *
    767           * @param pBuf - pointer to the received buffer
    768           *
    769           * output parameters
    770           *
    771           * @param rtrn - AF-Status of the operation.
    772           *
    773           * @return      None.
    774           **************************************************************************************************
    775           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    776          void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    777          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine43 & 0xFFFF
    778            #define MT_AF_RTV_HDR_SZ  2
    779          
    780            uint32 timestamp;
    781            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??CrossCallReturnLabel_83:
   \   000012   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000015   7403         MOV       A,#0x3
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ?Subroutine39 & 0xFFFF
    782            uint8 rtrn = afStatus_FAILED;
   \                     ??CrossCallReturnLabel_139:
   \   00001D   7A01         MOV       R2,#0x1
    783            uint8 len = 0;
   \   00001F   85..82       MOV       DPL,?XSP + 0
   \   000022   85..83       MOV       DPH,?XSP + 1
   \   000025   E4           CLR       A
   \   000026   F0           MOVX      @DPTR,A
    784          
    785            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000027   04           INC       A
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   2403         ADD       A,#0x3
   \   00002E   F8           MOV       R0,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   3400         ADDC      A,#0x0
   \   000033   F9           MOV       R1,A
   \   000034   EA           MOV       A,R2
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   12....       LCALL     ?Subroutine39 & 0xFFFF
    786            timestamp = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??CrossCallReturnLabel_140:
   \   00003B   EA           MOV       A,R2
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000042   F5..         MOV       ?V0,A
   \   000044   E4           CLR       A
   \   000045   F5..         MOV       ?V1,A
   \   000047   F5..         MOV       ?V2,A
   \   000049   F5..         MOV       ?V3,A
   \   00004B   04           INC       A
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F5..         MOV       ?V4,A
   \   000055   E4           CLR       A
   \   000056   F5..         MOV       ?V5,A
   \   000058   F5..         MOV       ?V6,A
   \   00005A   F5..         MOV       ?V7,A
   \   00005C   7408         MOV       A,#0x8
   \   00005E   78..         MOV       R0,#?V4
   \   000060   12....       LCALL     ?L_SHL
   \   000063   78..         MOV       R0,#?V0
   \   000065   79..         MOV       R1,#?V4
   \   000067   12....       LCALL     ?L_ADD
   \   00006A   EA           MOV       A,R2
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000071   F5..         MOV       ?V4,A
   \   000073   E4           CLR       A
   \   000074   F5..         MOV       ?V5,A
   \   000076   7410         MOV       A,#0x10
   \   000078   78..         MOV       R0,#?V4
   \   00007A   12....       LCALL     ?L_SHL
   \   00007D   78..         MOV       R0,#?V0
   \   00007F   79..         MOV       R1,#?V4
   \   000081   12....       LCALL     ?L_ADD
   \   000084   EA           MOV       A,R2
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   F5..         MOV       ?V4,A
   \   00008E   E4           CLR       A
   \   00008F   F5..         MOV       ?V6,A
   \   000091   7418         MOV       A,#0x18
   \   000093   78..         MOV       R0,#?V4
   \   000095   12....       LCALL     ?L_SHL
   \   000098   78..         MOV       R0,#?V0
   \   00009A   79..         MOV       R1,#?V4
   \   00009C   12....       LCALL     ?L_ADD
   \   00009F   8010         SJMP      ??CrossCallReturnLabel_141
    787          
    788            while (pItem != NULL)
    789            {
    790              pPrev = pItem;
    791              if (pItem->timestamp == timestamp)
    792              {
    793                break;
    794              }
    795              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_0:
   \   0000A1   7403         MOV       A,#0x3
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000A9   7403         MOV       A,#0x3
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   0000B1   7403         MOV       A,#0x3
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL     ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   0000B9   7003         JNZ       $+5
   \   0000BB   02....       LJMP      ??MT_AfDataRetrieve_1 & 0xFFFF
   \   0000BE   E8           MOV       A,R0
   \   0000BF   FC           MOV       R4,A
   \   0000C0   E9           MOV       A,R1
   \   0000C1   FD           MOV       R5,A
   \   0000C2   7403         MOV       A,#0x3
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL     ??Subroutine71_0 & 0xFFFF
    796            }
   \                     ??CrossCallReturnLabel_150:
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   78..         MOV       R0,#?V0
   \   0000CF   12....       LCALL     ?L_EQ_X
   \   0000D2   70CD         JNZ       ??MT_AfDataRetrieve_0
    797          
    798            if (pItem != NULL)
    799            {
    800              uint16 idx;
    801              uint8 *pRsp;
    802          
    803              pBuf += 4;
   \   0000D4   EA           MOV       A,R2
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   2404         ADD       A,#0x4
   \   0000DB   F8           MOV       R0,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   3400         ADDC      A,#0x0
   \   0000E0   F9           MOV       R1,A
   \   0000E1   EA           MOV       A,R2
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL     ?Subroutine39 & 0xFFFF
    804              idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_142:
   \   0000E8   EA           MOV       A,R2
   \   0000E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000EF   FA           MOV       R2,A
   \   0000F0   7401         MOV       A,#0x1
   \   0000F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F5   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   0000F8   12....       LCALL     ??Subroutine64_0 & 0xFFFF
    805              len = pBuf[2];
   \                     ??CrossCallReturnLabel_120:
   \   0000FB   7401         MOV       A,#0x1
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000103   85..82       MOV       DPL,?XSP + 0
   \   000106   85..83       MOV       DPH,?XSP + 1
   \   000109   F0           MOVX      @DPTR,A
    806          
    807              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   00010A   7069         JNZ       ??MT_AfDataRetrieve_2
    808              {
    809                if (pMtAfInMsgList == pItem)
   \   00010C   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00010F   7403         MOV       A,#0x3
   \   000111   12....       LCALL     ?XSTACK_DISP0_8
   \   000114   E0           MOVX      A,@DPTR
   \   000115   68           XRL       A,R0
   \   000116   7003         JNZ       ??MT_AfDataRetrieve_3
   \   000118   A3           INC       DPTR
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   69           XRL       A,R1
   \                     ??MT_AfDataRetrieve_3:
   \   00011B   700D         JNZ       ??MT_AfDataRetrieve_4
    810                {
    811                  pMtAfInMsgList = pItem->next;
   \   00011D   7403         MOV       A,#0x3
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   12....       LCALL     ?Subroutine6 & 0xFFFF
    812                }
   \                     ??CrossCallReturnLabel_7:
   \   000125   90....       MOV       DPTR,#pMtAfInMsgList
   \   000128   800C         SJMP      ??MT_AfDataRetrieve_5
    813                else
    814                {
    815                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_4:
   \   00012A   7403         MOV       A,#0x3
   \   00012C   12....       LCALL     ?XSTACK_DISP0_8
   \   00012F   12....       LCALL     ?Subroutine6 & 0xFFFF
    816                }
   \                     ??CrossCallReturnLabel_8:
   \   000132   8C82         MOV       DPL,R4
   \   000134   8D83         MOV       DPH,R5
   \                     ??MT_AfDataRetrieve_5:
   \   000136   12....       LCALL     ?Subroutine39 & 0xFFFF
    817                (void)osal_mem_free(pItem);
   \                     ??CrossCallReturnLabel_143:
   \   000139                ; Setup parameters for call to function osal_mem_free
   \   000139   7403         MOV       A,#0x3
   \   00013B   12....       LCALL     ?XSTACK_DISP0_8
   \   00013E   12....       LCALL     ?Subroutine12 & 0xFFFF
    818                rtrn = afStatus_SUCCESS;
   \                     ??CrossCallReturnLabel_21:
   \   000141   7A00         MOV       R2,#0x0
    819              }
    820              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    821              {
    822                rtrn = afStatus_MEM_FAIL;
    823                len = 0;
    824              }
    825              else
    826              {
    827                pRsp[0] = ZSuccess;
    828                pRsp[1] = len;
    829                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    830                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    831                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    832                (void)osal_mem_free(pRsp);
    833                return;
    834              }
    835            }
    836          
    837            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_1:
   \   000143   7401         MOV       A,#0x1
   \   000145   12....       LCALL     ?XSTACK_DISP0_8
   \   000148   12....       LCALL     ?Subroutine25 & 0xFFFF
    838            pBuf[1] = len;
   \                     ??CrossCallReturnLabel_44:
   \   00014B   85..82       MOV       DPL,?XSP + 0
   \   00014E   85..83       MOV       DPH,?XSP + 1
   \   000151   E0           MOVX      A,@DPTR
   \   000152   C0E0         PUSH      A
   \   000154   7401         MOV       A,#0x1
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00015C   D0E0         POP       A
   \   00015E   F0           MOVX      @DPTR,A
    839            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    840                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   00015F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00015F   7401         MOV       A,#0x1
   \   000161   12....       LCALL     ?XSTACK_DISP0_8
   \   000164   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000167   7B02         MOV       R3,#0x2
   \   000169   7A12         MOV       R2,#0x12
   \   00016B   7964         MOV       R1,#0x64
   \   00016D   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    841          }
   \                     ??MT_AfDataRetrieve_6:
   \   000170   7405         MOV       A,#0x5
   \   000172   02....       LJMP      ?Subroutine1 & 0xFFFF
   \                     ??MT_AfDataRetrieve_2:
   \   000175                ; Setup parameters for call to function osal_mem_alloc
   \   000175   2402         ADD       A,#0x2
   \   000177   FA           MOV       R2,A
   \   000178   E4           CLR       A
   \   000179   3400         ADDC      A,#0x0
   \   00017B   FB           MOV       R3,A
   \   00017C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00017F   8A..         MOV       ?V0,R2
   \   000181   8B..         MOV       ?V1,R3
   \   000183   EA           MOV       A,R2
   \   000184   4B           ORL       A,R3
   \   000185   700C         JNZ       ??MT_AfDataRetrieve_7
   \   000187   7A10         MOV       R2,#0x10
   \   000189   85..82       MOV       DPL,?XSP + 0
   \   00018C   85..83       MOV       DPH,?XSP + 1
   \   00018F   E4           CLR       A
   \   000190   F0           MOVX      @DPTR,A
   \   000191   80B0         SJMP      ??MT_AfDataRetrieve_1
   \                     ??MT_AfDataRetrieve_7:
   \   000193   8A82         MOV       DPL,R2
   \   000195   8B83         MOV       DPH,R3
   \   000197   E4           CLR       A
   \   000198   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00019B   8A82         MOV       DPL,R2
   \   00019D   8B83         MOV       DPH,R3
   \   00019F   A3           INC       DPTR
   \   0001A0   F0           MOVX      @DPTR,A
   \   0001A1                ; Setup parameters for call to function osal_memcpy
   \   0001A1   7403         MOV       A,#0x3
   \   0001A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A6   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001A9   2E           ADD       A,R6
   \   0001AA   F5..         MOV       ?V4,A
   \   0001AC   A3           INC       DPTR
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   3F           ADDC      A,R7
   \   0001AF   F5..         MOV       ?V5,A
   \   0001B1   78..         MOV       R0,#?V4
   \   0001B3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B6   7403         MOV       A,#0x3
   \   0001B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BB   E0           MOVX      A,@DPTR
   \   0001BC   FC           MOV       R4,A
   \   0001BD   7D00         MOV       R5,#0x0
   \   0001BF   EA           MOV       A,R2
   \   0001C0   2402         ADD       A,#0x2
   \   0001C2   FA           MOV       R2,A
   \   0001C3   E4           CLR       A
   \   0001C4   35..         ADDC      A,?V1
   \   0001C6   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0001C9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CC                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001CC   AC..         MOV       R4,?V0
   \   0001CE   AD..         MOV       R5,?V1
   \   0001D0   85..82       MOV       DPL,?XSP + 0
   \   0001D3   85..83       MOV       DPH,?XSP + 1
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   2402         ADD       A,#0x2
   \   0001D9   FB           MOV       R3,A
   \   0001DA   7A12         MOV       R2,#0x12
   \   0001DC   7964         MOV       R1,#0x64
   \   0001DE   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   0001E1                ; Setup parameters for call to function osal_mem_free
   \   0001E1   AA..         MOV       R2,?V0
   \   0001E3   AB..         MOV       R3,?V1
   \   0001E5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001E8   8086         SJMP      ??MT_AfDataRetrieve_6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine75_0
   \   000001                ; // Fall through to label ??Subroutine75_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000003   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    842          
    843          /**************************************************************************************************
    844           * @fn          MT_AfDataStore
    845           *
    846           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    847           *          outgoing AF message.
    848           *
    849           * input parameters
    850           *
    851           * @param pBuf - pointer to the received buffer
    852           *
    853           * output parameters
    854           *
    855           * @param rtrn - AF-Status of the operation.
    856           *
    857           * @return      None.
    858           **************************************************************************************************
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    861          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    862            uint16 idx;
    863            uint8 len, rtrn = afStatus_FAILED;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7401         MOV       A,#0x1
   \   000012   F0           MOVX      @DPTR,A
    864          
    865            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV       A,R2
   \   000014   2403         ADD       A,#0x3
   \   000016   FA           MOV       R2,A
   \   000017   5001         JNC       ??MT_AfDataStore_0
   \   000019   0B           INC       R3
    866            idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataStore_0:
   \   00001A   F582         MOV       DPL,A
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000022   EC           MOV       A,R4
   \   000023   28           ADD       A,R0
   \   000024   FE           MOV       R6,A
   \   000025   E4           CLR       A
   \   000026   39           ADDC      A,R1
   \   000027   FF           MOV       R7,A
    867            len = pBuf[2];
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FC           MOV       R4,A
    868            pBuf += 3;
   \   000030   EA           MOV       A,R2
   \   000031   2403         ADD       A,#0x3
   \   000033   FA           MOV       R2,A
   \   000034   5001         JNC       ??MT_AfDataStore_1
   \   000036   0B           INC       R3
    869          
    870            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   000037   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00003A   700B         JNZ       ??MT_AfDataStore_2
    871            {
    872              rtrn = afStatus_MEM_FAIL;
   \   00003C   85..82       MOV       DPL,?XSP + 0
   \   00003F   85..83       MOV       DPH,?XSP + 1
   \   000042   7410         MOV       A,#0x10
   \   000044   02....       LJMP      ??MT_AfDataStore_3 & 0xFFFF
    873            }
    874            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   000047   EC           MOV       A,R4
   \   000048   7079         JNZ       ??MT_AfDataStore_4
    875            {
    876              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    877                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    878                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00004A                ; Setup parameters for call to function AF_DataRequest
   \   00004A   E8           MOV       A,R0
   \   00004B   2416         ADD       A,#0x16
   \   00004D   F582         MOV       DPL,A
   \   00004F   E4           CLR       A
   \   000050   39           ADDC      A,R1
   \   000051   F583         MOV       DPH,A
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F5..         MOV       ?V0,A
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005B   90....       MOV       DPTR,#pMtAfDataReq
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   2414         ADD       A,#0x14
   \   000061   F5..         MOV       ?V0,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   3400         ADDC      A,#0x0
   \   000067   F5..         MOV       ?V1,A
   \   000069   78..         MOV       R0,#?V0
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   90....       MOV       DPTR,#pMtAfDataReq
   \   000071   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000074   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000077   E8           MOV       A,R0
   \   000078   2412         ADD       A,#0x12
   \   00007A   F582         MOV       DPL,A
   \   00007C   E4           CLR       A
   \   00007D   39           ADDC      A,R1
   \   00007E   F583         MOV       DPH,A
   \   000080   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000083   90....       MOV       DPTR,#pMtAfDataReq
   \   000086   E0           MOVX      A,@DPTR
   \   000087   2410         ADD       A,#0x10
   \   000089   F582         MOV       DPL,A
   \   00008B   E4           CLR       A
   \   00008C   39           ADDC      A,R1
   \   00008D   F583         MOV       DPH,A
   \   00008F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000092   90....       MOV       DPTR,#pMtAfDataReq
   \   000095   E0           MOVX      A,@DPTR
   \   000096   2415         ADD       A,#0x15
   \   000098   F582         MOV       DPL,A
   \   00009A   E4           CLR       A
   \   00009B   39           ADDC      A,R1
   \   00009C   F583         MOV       DPH,A
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   F9           MOV       R1,A
   \   0000A0   90....       MOV       DPTR,#pMtAfDataReq + 1
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   C8           XCH       A,R0
   \   0000A5   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000A8   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000AB   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000AE   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000B1   7409         MOV       A,#0x9
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   E9           MOV       A,R1
   \   0000B7   85..82       MOV       DPL,?XSP + 0
   \   0000BA   85..83       MOV       DPH,?XSP + 1
   \   0000BD   F0           MOVX      @DPTR,A
    879              (void)osal_mem_free(pMtAfDataReq);
   \   0000BE                ; Setup parameters for call to function osal_mem_free
   \   0000BE   12....       LCALL     ?Subroutine11 & 0xFFFF
    880              pMtAfDataReq = NULL;
    881            }
   \                     ??CrossCallReturnLabel_18:
   \   0000C1   8026         SJMP      ??MT_AfDataStore_3
    882            else
    883            {
    884              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   0000C3                ; Setup parameters for call to function osal_memcpy
   \   0000C3   8A..         MOV       ?V0,R2
   \   0000C5   8B..         MOV       ?V1,R3
   \   0000C7   75..00       MOV       ?V2,#0x0
   \   0000CA   78..         MOV       R0,#?V0
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CF   7D00         MOV       R5,#0x0
   \   0000D1   90....       MOV       DPTR,#pMtAfDataReq
   \   0000D4   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000D7   2E           ADD       A,R6
   \   0000D8   FA           MOV       R2,A
   \   0000D9   A3           INC       DPTR
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   3F           ADDC      A,R7
   \   0000DC   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0000DF   12....       LCALL     ?DEALLOC_XSTACK8
    885              rtrn = afStatus_SUCCESS;
   \   0000E2   85..82       MOV       DPL,?XSP + 0
   \   0000E5   85..83       MOV       DPH,?XSP + 1
   \   0000E8   E4           CLR       A
   \                     ??MT_AfDataStore_3:
   \   0000E9   F0           MOVX      @DPTR,A
    886            }
    887          
    888            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    889                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \   0000EA                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000EA   AC..         MOV       R4,?XSP + 0
   \   0000EC   AD..         MOV       R5,?XSP + 1
   \   0000EE   7B01         MOV       R3,#0x1
   \   0000F0   7A11         MOV       R2,#0x11
   \   0000F2   7964         MOV       R1,#0x64
   \   0000F4   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    890          }
   \   0000F7   7401         MOV       A,#0x1
   \   0000F9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FC   7F03         MOV       R7,#0x3
   \   0000FE   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfExec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfExec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRetrieve::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRetrieve

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataStore
    891          
    892          /**************************************************************************************************
    893           * @fn          MT_AfAPSF_ConfigSet
    894           *
    895           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    896           *
    897           * input parameters
    898           *
    899           * @param       pBuf - Pointer to the received buffer.
    900           *
    901           * output parameters
    902           *
    903           * None.
    904           *
    905           * @return      None.
    906           */
    907          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
    908          {
    909            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
    910            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
    911          
    912            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    913                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
    914          }
    915          
    916          /***************************************************************************************************
    917          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     12   MT_AfCommandProcessing
        0     12   -> MT_AfDataRequest
        0     12   -> MT_AfDataRequestSrcRtg
        0     12   -> MT_AfDataRetrieve
        0     12   -> MT_AfDataStore
        0     12   -> MT_AfRegister
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> afAPSF_ConfigSet
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     54   MT_AfDataRequest
        0     42   -> AF_DataRequest
        0     33   -> MT_BuildAndSendZToolResponse
        0     33   -> afFindEndPointDesc
        0     33   -> osal_mem_alloc
        0     36   -> osal_memcpy
        0     33   -> osal_set_event
        0     33   -> osal_start_timerEx
      1     58   MT_AfDataRequestSrcRtg
        0     46   -> AF_DataRequestSrcRtg
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> afFindEndPointDesc
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
      1     36   MT_AfDataRetrieve
        0     21   -> MT_BuildAndSendZToolResponse
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     24   -> osal_memcpy
      1     33   MT_AfDataStore
        0     21   -> AF_DataRequest
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_mem_free
        0     15   -> osal_memcpy
      0      9   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0      9   -> osal_start_timerEx
      1     26   MT_AfIncomingMsg
        0     23   -> MT_BuildAndSendZToolResponse
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
        0     23   -> osal_set_event
        0     23   -> osal_start_timerEx
      1     27   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ??Subroutine63_0
      10  ??Subroutine64_0
       7  ??Subroutine65_0
       3  ??Subroutine66_0
       6  ??Subroutine67_0
       8  ??Subroutine68_0
       5  ??Subroutine69_0
       4  ??Subroutine70_0
       5  ??Subroutine71_0
       6  ??Subroutine72_0
       4  ??Subroutine73_0
      12  ??Subroutine74_0
       6  ??Subroutine75_0
       7  ??Subroutine76_0
       6  ??Subroutine77_0
       5  ?Subroutine0
       8  ?Subroutine1
       5  ?Subroutine10
      13  ?Subroutine11
       4  ?Subroutine12
      12  ?Subroutine13
      16  ?Subroutine14
       7  ?Subroutine15
      12  ?Subroutine16
      12  ?Subroutine17
      12  ?Subroutine18
       1  ?Subroutine19
       3  ?Subroutine2
       6  ?Subroutine20
       2  ?Subroutine21
       3  ?Subroutine22
       6  ?Subroutine23
       4  ?Subroutine24
       6  ?Subroutine25
       6  ?Subroutine26
       3  ?Subroutine27
      13  ?Subroutine28
       5  ?Subroutine29
      19  ?Subroutine3
       4  ?Subroutine30
       4  ?Subroutine31
      13  ?Subroutine32
       5  ?Subroutine33
       6  ?Subroutine34
       5  ?Subroutine35
       5  ?Subroutine36
      10  ?Subroutine37
      10  ?Subroutine38
       1  ?Subroutine39
       5  ?Subroutine4
       6  ?Subroutine40
       8  ?Subroutine41
       6  ?Subroutine42
       6  ?Subroutine43
       1  ?Subroutine44
       6  ?Subroutine45
       6  ?Subroutine46
      11  ?Subroutine47
       2  ?Subroutine48
       7  ?Subroutine49
       3  ?Subroutine5
       1  ?Subroutine50
       6  ?Subroutine51
       5  ?Subroutine52
      17  ?Subroutine53
       8  ?Subroutine54
       6  ?Subroutine55
       7  ?Subroutine56
       4  ?Subroutine57
       9  ?Subroutine58
       6  ?Subroutine59
       7  ?Subroutine6
       9  ?Subroutine60
       9  ?Subroutine61
       9  ?Subroutine62
      27  ?Subroutine7
       5  ?Subroutine8
       2  ?Subroutine9
     157  MT_AfCommandProcessing
       6  MT_AfCommandProcessing::?relay
      72  MT_AfDataConfirm
       6  MT_AfDataConfirm::?relay
     686  MT_AfDataRequest
       6  MT_AfDataRequest::?relay
     418  MT_AfDataRequestSrcRtg
       6  MT_AfDataRequestSrcRtg::?relay
     490  MT_AfDataRetrieve
       6  MT_AfDataRetrieve::?relay
     257  MT_AfDataStore
       6  MT_AfDataStore::?relay
     128  MT_AfExec
       6  MT_AfExec::?relay
     902  MT_AfIncomingMsg
       6  MT_AfIncomingMsg::?relay
     132  MT_AfRegister
       6  MT_AfRegister::?relay
       2  pMtAfDataReq
       2  pMtAfInMsgList

 
 3 799 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_Z
 
    54 bytes of CODE     memory
 3 799 bytes of HUGECODE memory
     4 bytes of XDATA    memory

Errors: none
Warnings: none
