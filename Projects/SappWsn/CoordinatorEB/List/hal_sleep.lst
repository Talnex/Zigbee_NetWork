###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               14/Jul/2019  17:09:39
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Components\hal\target\CC2530EB\hal_sleep.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWDB15.tmp
#        ("C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Components\hal\target\CC2530EB\hal_sleep.c" -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D SAPP_ZSTACK -lC
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List" -lA
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -f "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x4545
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\Source\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\ZMain\TI2530DB\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\include\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\include\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\high_level\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mt\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\osal\include\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\saddr\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\sdata\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\af\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\nwk\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sapi\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sec\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sys\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\zdo\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List\hal_sleep.lst
#    Object file        =  
#        C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\Obj\hal_sleep.r51
#
###############################################################################

C:\Users\Administrator\Desktop\111 - ¸±±¾\ZStack-CC2530-r200\Components\hal\target\CC2530EB\hal_sleep.c
      1          /**************************************************************************************************
      2            Filename:       hal_sleep.c
      3            Revised:        $Date: 2011-04-04 09:40:22 -0700 (Mon, 04 Apr 2011) $
      4            Revision:       $Revision: 25578 $
      5          
      6            Description:    This module contains the HAL power management procedures for the CC2530.
      7          
      8          
      9            Copyright 2006-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "hal_types.h"
     45          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x87
   \   unsigned char volatile __sfr PCON
   \                     PCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x96
   \   unsigned char volatile __sfr ST1
   \                     ST1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x97
   \   unsigned char volatile __sfr ST2
   \                     ST2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr STLOAD
   \                     STLOAD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1
     46          #include "hal_board.h"
     47          #include "hal_sleep.h"
     48          #include "hal_led.h"
     49          #include "hal_key.h"
     50          #include "mac_api.h"
     51          #include "OSAL.h"
     52          #include "OSAL_Timers.h"
     53          #include "OSAL_Tasks.h"
     54          #include "OSAL_PwrMgr.h"
     55          #include "OnBoard.h"
     56          #include "hal_drivers.h"
     57          #include "hal_assert.h"
     58          #include "mac_mcu.h"
     59          
     60          #ifndef ZG_BUILD_ENDDEVICE_TYPE
     61          # define ZG_BUILD_ENDDEVICE_TYPE FALSE
     62          #endif
     63          
     64          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
     65          #include "nwk_globals.h"
     66          #include "ZGlobals.h"
     67          #endif
     68          
     69          /* ------------------------------------------------------------------------------------------------
     70           *                                           Macros
     71           * ------------------------------------------------------------------------------------------------
     72           */
     73          
     74          /* POWER CONSERVATION DEFINITIONS
     75           * Sleep mode H/W definitions (enabled with POWER_SAVING compile option)
     76           */
     77          #define CC2530_PM0            0  /* PM0, Clock oscillators on, voltage regulator on */
     78          #define CC2530_PM1            1  /* PM1, 32.768 kHz oscillators on, voltage regulator on */
     79          #define CC2530_PM2            2  /* PM2, 32.768 kHz oscillators on, voltage regulator off */
     80          #define CC2530_PM3            3  /* PM3, All clock oscillators off, voltage regulator off */
     81          
     82          /* HAL power management mode is set according to the power management state. The default
     83           * setting is HAL_SLEEP_OFF. The actual value is tailored to different HW platform. Both
     84           * HAL_SLEEP_TIMER and HAL_SLEEP_DEEP selections will:
     85           *   1. turn off the system clock, and
     86           *   2. halt the MCU.
     87           * HAL_SLEEP_TIMER can be woken up by sleep timer interrupt, I/O interrupt and reset.
     88           * HAL_SLEEP_DEEP can be woken up by I/O interrupt and reset.
     89           */
     90          #define HAL_SLEEP_OFF         CC2530_PM0
     91          #define HAL_SLEEP_TIMER       CC2530_PM2
     92          #define HAL_SLEEP_DEEP        CC2530_PM3
     93          
     94          /* MAX_SLEEP_TIME calculation:
     95           *   Sleep timer maximum duration = 0xFFFF7F / 32768 Hz = 511.996 seconds
     96           *   Round it to 510 seconds or 510000 ms
     97           */
     98          #define MAX_SLEEP_TIME                   510000             /* maximum time to sleep allowed by ST */
     99          
    100          
    101          /* minimum time to sleep, this macro is to:
    102           * 1. avoid thrashing in-and-out of sleep with short OSAL timer (~2ms)
    103           * 2. define minimum safe sleep period
    104           */
    105          #if !defined (PM_MIN_SLEEP_TIME)
    106          #define PM_MIN_SLEEP_TIME                14                 /* default to minimum safe sleep time minimum CAP */
    107          #endif
    108          
    109          /* The PCON instruction must be 4-byte aligned. The following code may cause excessive power
    110           * consumption if not aligned. See linker file ".xcl" for actual placement.
    111           */
    112          #pragma location = "SLEEP_CODE"
    113          void halSetSleepMode(void);
    114          
    115          /* This value is used to adjust the sleep timer compare value such that the sleep timer
    116           * compare takes into account the amount of processing time spent in function halSleep().
    117           * The first value is determined by measuring the number of sleep timer ticks it from
    118           * the beginning of the function to entering sleep mode or more precisely, when
    119           * MAC_PwrNextTimeout() is called.  The second value is determined by measuring the number
    120           * of sleep timer ticks from exit of sleep mode to the call to MAC_PwrOnReq() where the
    121           * MAC timer is restarted.
    122           */
    123          #define HAL_SLEEP_ADJ_TICKS   (11 + 12)
    124          
    125          #ifndef HAL_SLEEP_DEBUG_POWER_MODE
    126          /* set CC2530 power mode; always use PM2 */
    127          #define HAL_SLEEP_PREP_POWER_MODE(mode)     st( SLEEPCMD &= ~PMODE; /* clear mode bits */    \
    128                                                          SLEEPCMD |= mode;   /* set mode bits   */    \
    129                                                          while (!(STLOAD & LDRDY));                   \
    130                                                          halSleepPconValue = PCON_IDLE;               \
    131                                                        )
    132          #define HAL_SLEEP_SET_POWER_MODE()          halSetSleepMode()
    133          #else
    134          /* Debug: don't set power mode, just block until sleep timer interrupt */
    135          #define HAL_SLEEP_PREP_POWER_MODE(mode)     /* nothing */
    136          #define HAL_SLEEP_SET_POWER_MODE()          st( while(halSleepInt == FALSE); \
    137                                                          halSleepInt = FALSE;         \
    138                                                          HAL_DISABLE_INTERRUPTS();    \
    139                                                        )
    140          #endif
    141          
    142          /* sleep and external interrupt port masks */
    143          #define STIE_BV                             BV(5)
    144          #define P0IE_BV                             BV(5)
    145          #define P1IE_BV                             BV(4)
    146          #define P2IE_BV                             BV(1)
    147          
    148          /* sleep timer interrupt control */
    149          #define HAL_SLEEP_TIMER_ENABLE_INT()        st(IEN0 |= STIE_BV;)     /* enable sleep timer interrupt */
    150          #define HAL_SLEEP_TIMER_DISABLE_INT()       st(IEN0 &= ~STIE_BV;)    /* disable sleep timer interrupt */
    151          #define HAL_SLEEP_TIMER_CLEAR_INT()         st(STIF = 0;)            /* clear sleep interrupt flag */
    152          
    153          /* backup interrupt enable registers before sleep */
    154          #define HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2) st(ien0  = IEN0;    /* backup IEN0 register */ \
    155                                                                       ien1  = IEN1;    /* backup IEN1 register */ \
    156                                                                       ien2  = IEN2;    /* backup IEN2 register */ \
    157                                                                       IEN0 &= STIE_BV; /* disable IEN0 except STIE */ \
    158                                                                       IEN1 &= P0IE_BV; /* disable IEN1 except P0IE */ \
    159                                                                       IEN2 &= (P1IE_BV|P2IE_BV);) /* disable IEN2 except P1IE, P2IE */
    160          
    161          /* restore interrupt enable registers before sleep */
    162          #define HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2) st(IEN0 = ien0;   /* restore IEN0 register */ \
    163                                                            IEN1 = ien1;   /* restore IEN1 register */ \
    164                                                            IEN2 = ien2;)  /* restore IEN2 register */
    165          
    166          /* convert msec to 320 usec units with round */
    167          #define HAL_SLEEP_MS_TO_320US(ms)           (((((uint32) (ms)) * 100) + 31) / 32)
    168          
    169          /* for optimized indexing of uint32's */
    170          #if HAL_MCU_LITTLE_ENDIAN()
    171          #define UINT32_NDX0   0
    172          #define UINT32_NDX1   1
    173          #define UINT32_NDX2   2
    174          #define UINT32_NDX3   3
    175          #else
    176          #define UINT32_NDX0   3
    177          #define UINT32_NDX1   2
    178          #define UINT32_NDX2   1
    179          #define UINT32_NDX3   0
    180          #endif
    181          
    182          /* ------------------------------------------------------------------------------------------------
    183           *                                        Global Variables
    184           * ------------------------------------------------------------------------------------------------
    185           */
    186          /* PCON register value to program when setting power mode */

   \                                 In  segment DATA_I, align 1, keep-with-next
    187          volatile __data uint8 halSleepPconValue = PCON_IDLE;
   \                     halSleepPconValue:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for halSleepPconValue>`
   \   000001                REQUIRE __INIT_DATA_I
    188          
    189          /* ------------------------------------------------------------------------------------------------
    190           *                                        Local Variables
    191           * ------------------------------------------------------------------------------------------------
    192           */
    193          
    194          /* HAL power management mode is set according to the power management state.
    195           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          static uint8 halPwrMgtMode = HAL_SLEEP_OFF;
   \                     halPwrMgtMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    197          
    198          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    199          static bool halSleepInt = FALSE;
    200          #endif
    201          
    202          /* ------------------------------------------------------------------------------------------------
    203           *                                      Function Prototypes
    204           * ------------------------------------------------------------------------------------------------
    205           */
    206          
    207          void halSleepSetTimer(uint32 timeout);
    208          
    209          /**************************************************************************************************
    210           * @fn          halSleep
    211           *
    212           * @brief       This function put the CC2530 to sleep. The PCON instruction must be 4-byte aligned.
    213           *              The following code may cause excessive power consumption if not aligned. See linker
    214           *              file ".xcl" for actual placement.
    215           *
    216           * input parameters
    217           *
    218           * @param       None.
    219           *
    220           * output parameters
    221           *
    222           * None.
    223           *
    224           * @return      None.
    225           **************************************************************************************************
    226           */

   \                                 In  segment SLEEP_CODE, align 1, keep-with-next
    227          void halSetSleepMode(void)
   \                     halSetSleepMode:
    228          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    229            PCON = halSleepPconValue;
   \   000000   85..87       MOV       0x87,halSleepPconValue
    230            HAL_DISABLE_INTERRUPTS();
   \   000003   C2AF         CLR       0xa8.7
    231          }
   \   000005   02....       LJMP      ?BRET
   \   000008                REQUIRE PCON
   \   000008                REQUIRE _A_IEN0
    232          
    233          /**************************************************************************************************
    234           * @fn          halSleep
    235           *
    236           * @brief       This function is called from the OSAL task loop using and existing OSAL
    237           *              interface.  It sets the low power mode of the MAC and the CC2530.
    238           *
    239           * input parameters
    240           *
    241           * @param       osal_timeout - Next OSAL timer timeout.
    242           *
    243           * output parameters
    244           *
    245           * None.
    246           *
    247           * @return      None.
    248           **************************************************************************************************
    249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    250          void halSleep( uint16 osal_timeout )
   \                     halSleep:
    251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    252            uint32        timeout;
    253            uint32        macTimeout = 0;
    254          
    255            /* get next OSAL timer expiration converted to 320 usec units */
    256            timeout = HAL_SLEEP_MS_TO_320US(osal_timeout);
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E4           CLR       A
   \   00000A   F5..         MOV       ?V2,A
   \   00000C   F5..         MOV       ?V3,A
   \   00000E   90....       MOV       DPTR,#__Constant_64
   \   000011   78..         MOV       R0,#?V4
   \   000013   12....       LCALL     ?L_MOV_X
   \   000016   78..         MOV       R0,#?V0
   \   000018   79..         MOV       R1,#?V4
   \   00001A   12....       LCALL     ?L_MUL
   \   00001D   90....       MOV       DPTR,#__Constant_1f
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?L_ADD_X
   \   000025   7405         MOV       A,#0x5
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?UL_SHR
    257            if (timeout == 0)
   \   00002C   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00002F   7019         JNZ       ??halSleep_0
    258            {
    259              timeout = MAC_PwrNextTimeout();
   \   000031                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   000031   12....       LCALL     `??MAC_PwrNextTimeout::?relay`; Banked call to: MAC_PwrNextTimeout
   \   000034   8A..         MOV       ?V0,R2
   \   000036   8B..         MOV       ?V1,R3
   \   000038   8C..         MOV       ?V2,R4
   \   00003A   8D..         MOV       ?V3,R5
    260            }
    261            else
    262            {
    263              /* get next MAC timer expiration */
    264              macTimeout = MAC_PwrNextTimeout();
    265          
    266              /* get lesser of two timeouts */
    267              if ((macTimeout != 0) && (macTimeout < timeout))
    268              {
    269                timeout = macTimeout;
    270              }
    271            }
    272          
    273            /* HAL_SLEEP_PM2 is entered only if the timeout is zero and
    274             * the device is a stimulated device.
    275             */
    276            halPwrMgtMode = (timeout == 0) ? HAL_SLEEP_DEEP : HAL_SLEEP_TIMER;
   \   00003C   EA           MOV       A,R2
   \   00003D   4B           ORL       A,R3
   \   00003E   4C           ORL       A,R4
   \   00003F   4D           ORL       A,R5
   \   000040   702A         JNZ       ??halSleep_1
   \   000042   90....       MOV       DPTR,#halPwrMgtMode
   \   000045   7403         MOV       A,#0x3
   \   000047   F0           MOVX      @DPTR,A
   \   000048   8037         SJMP      ??halSleep_2
   \                     ??halSleep_0:
   \   00004A                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   00004A   12....       LCALL     `??MAC_PwrNextTimeout::?relay`; Banked call to: MAC_PwrNextTimeout
   \   00004D   8A..         MOV       ?V4,R2
   \   00004F   8B..         MOV       ?V5,R3
   \   000051   8C..         MOV       ?V6,R4
   \   000053   8D..         MOV       ?V7,R5
   \   000055   EA           MOV       A,R2
   \   000056   4B           ORL       A,R3
   \   000057   4C           ORL       A,R4
   \   000058   4D           ORL       A,R5
   \   000059   6011         JZ        ??halSleep_1
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   79..         MOV       R1,#?V4
   \   00005F   12....       LCALL     ?UL_GT
   \   000062   5008         JNC       ??halSleep_1
   \   000064   8A..         MOV       ?V0,R2
   \   000066   8B..         MOV       ?V1,R3
   \   000068   8C..         MOV       ?V2,R4
   \   00006A   8D..         MOV       ?V3,R5
   \                     ??halSleep_1:
   \   00006C   90....       MOV       DPTR,#halPwrMgtMode
   \   00006F   7402         MOV       A,#0x2
   \   000071   F0           MOVX      @DPTR,A
    277          
    278            /* DEEP sleep can only be entered when zgPollRate == 0.
    279             * This is to eliminate any possibility of entering PM3 between
    280             * two network timers.
    281             */
    282          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
    283            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    284                (timeout == 0 && zgPollRate == 0))
    285          #else
    286            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    287                (timeout == 0))
   \   000072   90....       MOV       DPTR,#__Constant_2d
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?UL_GE_X
   \   00007A   4005         JC        ??halSleep_2
   \   00007C   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00007F   707D         JNZ       ??halSleep_3
    288          #endif
    289            {
    290              halIntState_t ien0, ien1, ien2;
    291          
    292              HAL_ASSERT(HAL_INTERRUPTS_ARE_ENABLED());
   \                     ??halSleep_2:
   \   000081   A2AF         MOV       C,0xa8.7
   \   000083   4003         JC        ??halSleep_4
   \   000085                ; Setup parameters for call to function halAssertHandler
   \   000085   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    293              HAL_DISABLE_INTERRUPTS();
   \                     ??halSleep_4:
   \   000088   C2AF         CLR       0xa8.7
    294          
    295              /* always use "deep sleep" to turn off radio VREG on CC2530 */
    296              if (halSleepPconValue != 0 && MAC_PwrOffReq(MAC_PWR_SLEEP_DEEP) == MAC_SUCCESS)
   \   00008A   E5..         MOV       A,halSleepPconValue
   \   00008C   606E         JZ        ??halSleep_5
   \   00008E                ; Setup parameters for call to function MAC_PwrOffReq
   \   00008E   7902         MOV       R1,#0x2
   \   000090   12....       LCALL     `??MAC_PwrOffReq::?relay`; Banked call to: MAC_PwrOffReq
   \   000093   E9           MOV       A,R1
   \   000094   7066         JNZ       ??halSleep_5
    297              {
    298                /* The PCON value is not zero. There is no interrupt overriding the 
    299                 * sleep decision. Also, the radio granted the sleep request.
    300                 */
    301          
    302          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    303                /* get peripherals ready for sleep */
    304                HalKeyEnterSleep();
    305          #endif
    306          
    307          #ifdef HAL_SLEEP_DEBUG_LED
    308                HAL_TURN_OFF_LED3();
    309          #else
    310                /* use this to turn LEDs off during sleep */
    311                HalLedEnterSleep();
   \   000096                ; Setup parameters for call to function HalLedEnterSleep
   \   000096   12....       LCALL     `??HalLedEnterSleep::?relay`; Banked call to: HalLedEnterSleep
    312          #endif
    313          
    314                /* enable sleep timer interrupt */
    315                if (timeout != 0)
   \   000099   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00009C   6021         JZ        ??halSleep_6
    316                {
    317                  if (timeout > HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ))
   \   00009E   90....       MOV       DPTR,#__Constant_185197
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?UL_GE_X
   \   0000A6   5008         JNC       ??halSleep_7
    318                  {
    319                    timeout -= HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME );
    320                    halSleepSetTimer(HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ));
   \   0000A8                ; Setup parameters for call to function halSleepSetTimer
   \   0000A8   90....       MOV       DPTR,#__Constant_185196
   \   0000AB   12....       LCALL     ?XLOAD_R2345
   \   0000AE   8008         SJMP      ??halSleep_8
    321                  }
    322                  else
    323                  {
    324                    /* set sleep timer */
    325                    halSleepSetTimer(timeout);
   \                     ??halSleep_7:
   \   0000B0                ; Setup parameters for call to function halSleepSetTimer
   \   0000B0   AA..         MOV       R2,?V0
   \   0000B2   AB..         MOV       R3,?V1
   \   0000B4   AC..         MOV       R4,?V2
   \   0000B6   AD..         MOV       R5,?V3
   \                     ??halSleep_8:
   \   0000B8   12....       LCALL     `??halSleepSetTimer::?relay`; Banked call to: halSleepSetTimer
    326                  }
    327          
    328                  /* set up sleep timer interrupt */
    329                  HAL_SLEEP_TIMER_CLEAR_INT();
   \   0000BB   C2C7         CLR       0xc0.7
    330                  HAL_SLEEP_TIMER_ENABLE_INT();
   \   0000BD   D2AD         SETB      0xa8.5
    331                }
    332          
    333          #ifdef HAL_SLEEP_DEBUG_LED
    334                if (halPwrMgtMode == CC2530_PM1)
    335                {
    336                  HAL_TURN_ON_LED1();
    337                }
    338                else
    339                {
    340                  HAL_TURN_OFF_LED1();
    341                }
    342          #endif
    343          
    344                /* Prep CC2530 power mode */
    345                HAL_SLEEP_PREP_POWER_MODE(halPwrMgtMode);
   \                     ??halSleep_6:
   \   0000BF   53BEFC       ANL       0xbe,#0xfc
   \   0000C2   90....       MOV       DPTR,#halPwrMgtMode
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   42BE         ORL       0xbe,A
   \                     ??halSleep_9:
   \   0000C8   E5AD         MOV       A,0xad
   \   0000CA   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000CC   50FA         JNC       ??halSleep_9
   \   0000CE   75..01       MOV       halSleepPconValue,#0x1
    346          
    347                /* save interrupt enable registers and disable all interrupts */
    348                HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2);
   \   0000D1   85A8..       MOV       ?V0,0xa8+0x0
   \   0000D4   AFB8         MOV       R7,0xb8+0x0
   \   0000D6   AE9A         MOV       R6,0x9a+0x0
   \   0000D8   53A820       ANL       0xa8,#0x20
   \   0000DB   53B820       ANL       0xb8,#0x20
   \   0000DE   539A12       ANL       0x9a,#0x12
    349                HAL_ENABLE_INTERRUPTS();
   \   0000E1   D2AF         SETB      0xa8.7
    350          
    351                /* set CC2530 power mode, interrupt is disabled after this function
    352                 * Note that an ISR (that could wake up from power mode) which runs
    353                 * between the previous instruction enabling interrupts and before
    354                 * power mode is set would switch the halSleepPconValue so that
    355                 * power mode shall not be entered in such a case. 
    356                 */
    357                HAL_SLEEP_SET_POWER_MODE();
   \   0000E3                ; Setup parameters for call to function halSetSleepMode
   \   0000E3   12....       LCALL     `??halSetSleepMode::?relay`; Banked call to: halSetSleepMode
    358          
    359                /* the interrupt is disabled - see halSetSleepMode() */
    360          
    361                /* restore interrupt enable registers */
    362                HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2);
   \   0000E6   85..A8       MOV       0xa8,?V0
   \   0000E9   8FB8         MOV       0xb8,R7
   \   0000EB   8E9A         MOV       0x9a,R6
    363          
    364                /* disable sleep timer interrupt */
    365                HAL_SLEEP_TIMER_DISABLE_INT();
   \   0000ED   C2AD         CLR       0xa8.5
    366          
    367          #ifdef HAL_SLEEP_DEBUG_LED
    368                HAL_TURN_ON_LED3();
    369          #else
    370                /* use this to turn LEDs back on after sleep */
    371                HalLedExitSleep();
   \   0000EF                ; Setup parameters for call to function HalLedExitSleep
   \   0000EF   12....       LCALL     `??HalLedExitSleep::?relay`; Banked call to: HalLedExitSleep
    372          #endif
    373          
    374          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    375                /* handle peripherals */
    376                (void)HalKeyExitSleep();
    377          #endif
    378          
    379                /* power on the MAC; blocks until completion */
    380                MAC_PwrOnReq();
   \   0000F2                ; Setup parameters for call to function MAC_PwrOnReq
   \   0000F2   12....       LCALL     `??MAC_PwrOnReq::?relay`; Banked call to: MAC_PwrOnReq
    381          
    382                HAL_ENABLE_INTERRUPTS();
   \   0000F5   D2AF         SETB      0xa8.7
    383          
    384                /* For CC2530, T2 interrupt won’t be generated when the current count is greater than
    385                 * the comparator. The interrupt is only generated when the current count is equal to
    386                 * the comparator. When the CC2530 is waking up from sleep, there is a small window
    387                 * that the count may be grater than the comparator, therefore, missing the interrupt.
    388                 * This workaround will call the T2 ISR when the current T2 count is greater than the
    389                 * comparator. The problem only occurs when POWER_SAVING is turned on, i.e. the 32KHz
    390                 * drives the chip in sleep and SYNC start is used.
    391                 */
    392                macMcuTimer2OverflowWorkaround();
   \   0000F7                ; Setup parameters for call to function macMcuTimer2OverflowWorkaround
   \   0000F7   12....       LCALL     `??macMcuTimer2OverflowWorkaround::?relay`; Banked call to: macMcuTimer2OverflowWorkaround
   \   0000FA   8002         SJMP      ??halSleep_3
    393              }
    394              else
    395              {
    396                /* An interrupt may have changed the sleep decision. Do not sleep at all. Turn on
    397                 * the interrupt, exit normally, and the next sleep will be allowed.
    398                 */
    399                HAL_ENABLE_INTERRUPTS();
   \                     ??halSleep_5:
   \   0000FC   D2AF         SETB      0xa8.7
    400              }
    401            }
    402          }
   \                     ??halSleep_3:
   \   0000FE                REQUIRE ?Subroutine0
   \   0000FE                REQUIRE _A_IEN0
   \   0000FE                REQUIRE _A_IRCON
   \   0000FE                REQUIRE SLEEPCMD
   \   0000FE                REQUIRE STLOAD
   \   0000FE                REQUIRE _A_IEN1
   \   0000FE                REQUIRE IEN2
   \   0000FE                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E5..         MOV       A,?V0
   \   000002   45..         ORL       A,?V1
   \   000004   45..         ORL       A,?V2
   \   000006   45..         ORL       A,?V3
   \   000008   22           RET
    403          
    404          /**************************************************************************************************
    405           * @fn          halSleepSetTimer
    406           *
    407           * @brief       This function sets the CC2530 sleep timer compare value.  First it reads and
    408           *              stores the value of the sleep timer; this value is used later to update OSAL
    409           *              timers.  Then the timeout value is converted from 320 usec units to 32 kHz
    410           *              period units and the compare value is set to the timeout.
    411           *
    412           * input parameters
    413           *
    414           * @param       timeout - Timeout value in 320 usec units.  The sleep timer compare is set to
    415           *                        this value.
    416           *
    417           * output parameters
    418           *
    419           * None.
    420           *
    421           * @return      None.
    422           **************************************************************************************************
    423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          void halSleepSetTimer(uint32 timeout)
   \                     halSleepSetTimer:
    425          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
    426            uint32 ticks;
    427          
    428            /* read the sleep timer; ST0 must be read first */
    429            ((uint8 *) &ticks)[UINT32_NDX0] = ST0;
   \   000012   E595         MOV       A,0x95
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   F0           MOVX      @DPTR,A
    430            ((uint8 *) &ticks)[UINT32_NDX1] = ST1;
   \   00001B   E596         MOV       A,0x96
   \   00001D   C0E0         PUSH      A
   \   00001F   7401         MOV       A,#0x1
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   D0E0         POP       A
   \   000026   F0           MOVX      @DPTR,A
    431            ((uint8 *) &ticks)[UINT32_NDX2] = ST2;
   \   000027   E597         MOV       A,0x97
   \   000029   C0E0         PUSH      A
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   D0E0         POP       A
   \   000032   F0           MOVX      @DPTR,A
    432            ((uint8 *) &ticks)[UINT32_NDX3] = 0;
   \   000033   7403         MOV       A,#0x3
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   E4           CLR       A
   \   000039   F0           MOVX      @DPTR,A
    433          
    434            /* Compute sleep timer compare value.  The ratio of 32 kHz ticks to 320 usec ticks
    435             * is 32768/3125 = 10.48576.  This is nearly 671/64 = 10.484375.
    436             */
    437            ticks += (timeout * 671) / 64;
    438          
    439            /* subtract the processing time spent in function halSleep() */
    440            ticks -= HAL_SLEEP_ADJ_TICKS;
   \   00003A   90....       MOV       DPTR,#__Constant_29f
   \   00003D   78..         MOV       R0,#?V4
   \   00003F   12....       LCALL     ?L_MOV_X
   \   000042   78..         MOV       R0,#?V0
   \   000044   79..         MOV       R1,#?V4
   \   000046   12....       LCALL     ?L_MUL
   \   000049   7406         MOV       A,#0x6
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?UL_SHR
   \   000050   90....       MOV       DPTR,#__Constant_ffffffe9
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?L_ADD_X
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?L_ADD_TO_X
    441          
    442            /* set sleep timer compare; ST0 must be written last */
    443            ST2 = ((uint8 *) &ticks)[UINT32_NDX2];
   \   000063   7402         MOV       A,#0x2
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F597         MOV       0x97,A
    444            ST1 = ((uint8 *) &ticks)[UINT32_NDX1];
   \   00006B   7401         MOV       A,#0x1
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F596         MOV       0x96,A
    445            ST0 = ((uint8 *) &ticks)[UINT32_NDX0];
   \   000073   85..82       MOV       DPL,?XSP + 0
   \   000076   85..83       MOV       DPH,?XSP + 1
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F595         MOV       0x95,A
    446          }
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000081   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   000084                REQUIRE ST0
   \   000084                REQUIRE ST1
   \   000084                REQUIRE ST2
    447          
    448          /**************************************************************************************************
    449           * @fn          TimerElapsed
    450           *
    451           * @brief       Determine the number of OSAL timer ticks elapsed during sleep.
    452           *              Deprecated for CC2530 and CC2430 SoC.
    453           *
    454           * input parameters
    455           *
    456           * @param       None.
    457           *
    458           * output parameters
    459           *
    460           * None.
    461           *
    462           * @return      Number of timer ticks elapsed during sleep.
    463           **************************************************************************************************
    464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    465          uint32 TimerElapsed( void )
   \                     TimerElapsed:
    466          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    467            /* Stubs */
    468            return (0);
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B00         MOV       R3,#0x0
   \   000004   7C00         MOV       R4,#0x0
   \   000006   7D00         MOV       R5,#0x0
   \   000008   02....       LJMP      ?BRET
    469          }
    470          
    471          /**************************************************************************************************
    472           * @fn          halRestoreSleepLevel
    473           *
    474           * @brief       Restore the deepest timer sleep level.
    475           *
    476           * input parameters
    477           *
    478           * @param       None
    479           *
    480           * output parameters
    481           *
    482           *              None.
    483           *
    484           * @return      None.
    485           **************************************************************************************************
    486           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    487          void halRestoreSleepLevel( void )
   \                     halRestoreSleepLevel:
    488          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    489            /* Stubs */
    490          }
   \   000000   02....       LJMP      ?BRET
    491          
    492          /**************************************************************************************************
    493           * @fn          halSleepTimerIsr
    494           *
    495           * @brief       Sleep timer ISR.
    496           *
    497           * input parameters
    498           *
    499           * None.
    500           *
    501           * output parameters
    502           *
    503           * None.
    504           *
    505           * @return      None.
    506           **************************************************************************************************
    507           */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    508          HAL_ISR_FUNCTION(halSleepTimerIsr, ST_VECTOR)
   \                     halSleepTimerIsr:
    509          {
   \   000000   C0E0         PUSH      A
   \   000002   C0D0         PUSH      PSW
   \   000004   E8           MOV       A,R0
   \   000005   C0E0         PUSH      A
   \   000007                ; Saved register size: 3
   \   000007                ; Auto size: 0
    510            HAL_ENTER_ISR();
   \   000007   A8A8         MOV       R0,0xa8+0x0
   \   000009   D2AF         SETB      0xa8.7
    511            HAL_SLEEP_TIMER_CLEAR_INT();
   \   00000B   C2C7         CLR       0xc0.7
    512          
    513          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    514            halSleepInt = TRUE;
    515          #endif
    516            
    517            CLEAR_SLEEP_MODE();
    518            HAL_EXIT_ISR();
   \   00000D   E8           MOV       A,R0
   \   00000E   A2E7         MOV       C,0xE0 /* A   */.7
   \   000010   92AF         MOV       0xa8.7,C
    519          }
   \   000012   D0E0         POP       A
   \   000014   F8           MOV       R0,A
   \   000015   D0D0         POP       PSW
   \   000017   D0E0         POP       A
   \   000019   32           RETI
   \   00001A                REQUIRE _A_IEN0
   \   00001A                REQUIRE _A_IRCON

   \                                 In  segment INTVEC, offset 0x2b, root
   \                     `??halSleepTimerIsr::??INTVEC 43`:
   \   00002B   02....       LJMP       (halSleepTimerIsr)

   \                                 In  segment DATA_ID, align 1, keep-with-next
   \                     `?<Initializer for halSleepPconValue>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f:
   \   000000   1F000000     DD 31

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2d:
   \   000000   2D000000     DD 45

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185197:
   \   000000   97511800     DD 1593751

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185196:
   \   000000   96511800     DD 1593750

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_29f:
   \   000000   9F020000     DD 671

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffe9:
   \   000000   E9FFFFFF     DD 4294967273

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSetSleepMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSetSleepMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSleepSetTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleepSetTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TimerElapsed::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TimerElapsed

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halRestoreSleepLevel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halRestoreSleepLevel
    520          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   TimerElapsed
      0      0   halRestoreSleepLevel
      0     16   halSetSleepMode
      0     16   halSleep
        0     16   -> HalLedEnterSleep
        0     16   -> HalLedExitSleep
        0     16   -> MAC_PwrNextTimeout
        0     16   -> MAC_PwrOffReq
        0     16   -> MAC_PwrOnReq
        0     16   -> halAssertHandler
        0     16   -> halSetSleepMode
        0     16   -> halSleepSetTimer
        0     16   -> macMcuTimer2OverflowWorkaround
      1     36   halSleepSetTimer
      3      0   halSleepTimerIsr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for halSleepPconValue>
       5  ?Subroutine0
       9  ?Subroutine1
       1  IEN2
       1  PCON
       1  SLEEPCMD
       1  ST0
       1  ST1
       1  ST2
       1  STLOAD
      11  TimerElapsed
       6  TimerElapsed::?relay
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       4  __Constant_185196
       4  __Constant_185197
       4  __Constant_1f
       4  __Constant_29f
       4  __Constant_2d
       4  __Constant_64
       4  __Constant_ffffffe9
       1  halPwrMgtMode
       3  halRestoreSleepLevel
       6  halRestoreSleepLevel::?relay
       8  halSetSleepMode
       6  halSetSleepMode::?relay
     254  halSleep
       6  halSleep::?relay
       1  halSleepPconValue
     132  halSleepSetTimer
       6  halSleepSetTimer::?relay
      26  halSleepTimerIsr
       3  halSleepTimerIsr::??INTVEC 43

 
 414 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   1 byte  in segment DATA_I
   1 byte  in segment DATA_ID
   3 bytes in segment INTVEC
  26 bytes in segment NEAR_CODE
  10 bytes in segment SFR_AN
   8 bytes in segment SLEEP_CODE
  28 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
  57 bytes of CODE     memory (+  3 bytes shared)
   0 bytes of CONST    memory (+ 28 bytes shared)
   1 byte  of DATA     memory (+ 10 bytes shared)
 422 bytes of HUGECODE memory
   1 byte  of XDATA    memory

Errors: none
Warnings: none
