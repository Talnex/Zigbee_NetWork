###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               14/Jul/2019  20:14:17
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Components\hal\target\CC2530EB\sht10.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWDB13.tmp
#        (D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Components\hal\target\CC2530EB\sht10.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D SAPP_ZSTACK
#        -lC
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\List
#        -lA
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x4545
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\ -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\Source\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\ZMain\TI2530DB\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\include\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\include\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\high_level\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mt\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\osal\include\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\saddr\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\sdata\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\af\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\nwk\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sapi\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sec\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sys\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\zdo\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\List\sht10.lst
#    Object file        =  
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\CoordinatorEB\Obj\sht10.r51
#
###############################################################################

D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Components\hal\target\CC2530EB\sht10.c
      1          
      2          #include "sht10.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
      3          
      4          /***********************************************
      5          **Function Name:      SHT10_Transstart
      6          **Description:        发送开始时序
      7          **
      8          **                    generates a transmission start
      9          **                          _____         ________
     10          **                    DATA:      |_______|
     11          **                              ___     ___
     12          **                    SCK : ___|   |___|   |______
     13          **Input Parameters:   	无
     14          **Output Parameters: 	无
     15          ************************************************/
     16          
     17          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     18          void SHT10_Transstart(void)
   \                     SHT10_Transstart:
     19          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     20              SDIO_DIR_OUT;
   \   000000   12....       LCALL     ?Subroutine5 & 0xFFFF
     21              SCLK_DIR_OUT;
     22              SCLK_LOW;
   \                     ??CrossCallReturnLabel_21:
   \   000003   C280         CLR       0x80.0
     23              SDIO_HIGH;
   \   000005   D286         SETB      0x80.6
     24              DELAY(DURATION1);
   \   000007   78E8         MOV       R0,#-0x18
   \   000009   7903         MOV       R1,#0x3
   \                     ??SHT10_Transstart_0:
   \   00000B   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00000E   70FB         JNZ       ??SHT10_Transstart_0
     25              DELAY(DURATION1);
   \   000010   78E8         MOV       R0,#-0x18
   \   000012   7903         MOV       R1,#0x3
   \                     ??SHT10_Transstart_1:
   \   000014   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000017   70FB         JNZ       ??SHT10_Transstart_1
     26              SCLK_HIGH;
   \   000019   D280         SETB      0x80.0
     27              DELAY(DURATION1);
   \   00001B   78E8         MOV       R0,#-0x18
   \   00001D   7903         MOV       R1,#0x3
   \                     ??SHT10_Transstart_2:
   \   00001F   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000022   70FB         JNZ       ??SHT10_Transstart_2
     28              SDIO_LOW;
   \   000024   C286         CLR       0x80.6
     29              DELAY(DURATION1);
   \   000026   78E8         MOV       R0,#-0x18
   \   000028   7903         MOV       R1,#0x3
   \                     ??SHT10_Transstart_3:
   \   00002A   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00002D   70FB         JNZ       ??SHT10_Transstart_3
     30              SCLK_LOW;
   \   00002F   C280         CLR       0x80.0
     31              DELAY(DURATION1);
   \   000031   78E8         MOV       R0,#-0x18
   \   000033   7903         MOV       R1,#0x3
   \                     ??SHT10_Transstart_4:
   \   000035   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000038   70FB         JNZ       ??SHT10_Transstart_4
     32              SCLK_HIGH;
   \   00003A   D280         SETB      0x80.0
     33              DELAY(DURATION1);
   \   00003C   78E8         MOV       R0,#-0x18
   \   00003E   7903         MOV       R1,#0x3
   \                     ??SHT10_Transstart_5:
   \   000040   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000043   70FB         JNZ       ??SHT10_Transstart_5
     34              SDIO_HIGH;
   \   000045   D286         SETB      0x80.6
     35              DELAY(DURATION1);
   \   000047   78E8         MOV       R0,#-0x18
   \   000049   7903         MOV       R1,#0x3
   \                     ??SHT10_Transstart_6:
   \   00004B   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00004E   70FB         JNZ       ??SHT10_Transstart_6
     36              SCLK_LOW;	
   \   000050   C280         CLR       0x80.0
     37          }
   \   000052   02....       LJMP      ?BRET
   \   000055                REQUIRE P0DIR
   \   000055                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   43FD40       ORL       0xfd,#0x40
   \   000003   43FD01       ORL       0xfd,#0x1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E8           MOV       A,R0
   \   000001   FA           MOV       R2,A
   \   000002   E9           MOV       A,R1
   \   000003   FB           MOV       R3,A
   \   000004   EA           MOV       A,R2
   \   000005   24FF         ADD       A,#-0x1
   \   000007   18           DEC       R0
   \   000008   EB           MOV       A,R3
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   F9           MOV       R1,A
   \   00000C   EA           MOV       A,R2
   \   00000D   4B           ORL       A,R3
   \   00000E   22           RET
     38          
     39          /**********************************************************************************************************
     40          **Function Name:      SHT10_WriteByte
     41          **Description:        写时序
     42          **Input Parameters:   无
     43          **Output Parameters: 无
     44          **************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     45          unsigned char SHT10_WriteByte(unsigned char data)
   \                     SHT10_WriteByte:
     46          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   FB           MOV       R3,A
     47            unsigned char i;
     48            SDIO_DIR_OUT;
   \   000002   12....       LCALL     ?Subroutine5 & 0xFFFF
     49            SCLK_DIR_OUT;
     50            for(i=0x80;i>0;i=(i>>1))              //shift bit for masking
   \                     ??CrossCallReturnLabel_22:
   \   000005   7A80         MOV       R2,#-0x80
     51            {
     52              if(i&data)
   \                     ??SHT10_WriteByte_0:
   \   000007   EA           MOV       A,R2
   \   000008   5B           ANL       A,R3
   \   000009   6004         JZ        ??SHT10_WriteByte_1
     53                SDIO_HIGH;                        //masking value with i , write to SENSI-BUS
   \   00000B   D286         SETB      0x80.6
   \   00000D   8002         SJMP      ??SHT10_WriteByte_2
     54              else
     55                SDIO_LOW;
   \                     ??SHT10_WriteByte_1:
   \   00000F   C286         CLR       0x80.6
     56              DELAY(DURATION1);          //pulswith approx. 5 us
   \                     ??SHT10_WriteByte_2:
   \   000011   78E8         MOV       R0,#-0x18
   \   000013   7903         MOV       R1,#0x3
   \                     ??SHT10_WriteByte_3:
   \   000015   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000018   70FB         JNZ       ??SHT10_WriteByte_3
     57              SCLK_HIGH;                          //clk for SENSI-BUS
   \   00001A   D280         SETB      0x80.0
     58              DELAY(DURATION1);          //pulswith approx. 5 us
   \   00001C   78E8         MOV       R0,#-0x18
   \   00001E   7903         MOV       R1,#0x3
   \                     ??SHT10_WriteByte_4:
   \   000020   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000023   70FB         JNZ       ??SHT10_WriteByte_4
     59              SCLK_LOW;
   \   000025   C280         CLR       0x80.0
     60              DELAY(DURATION1);          //pulswith approx. 5 us
   \   000027   78E8         MOV       R0,#-0x18
   \   000029   7903         MOV       R1,#0x3
   \                     ??SHT10_WriteByte_5:
   \   00002B   12....       LCALL     ?Subroutine3 & 0xFFFF
     61            }
   \                     ??CrossCallReturnLabel_13:
   \   00002E   70FB         JNZ       ??SHT10_WriteByte_5
   \   000030   EA           MOV       A,R2
   \   000031   C3           CLR       C
   \   000032   13           RRC       A
   \   000033   FA           MOV       R2,A
   \   000034   70D1         JNZ       ??SHT10_WriteByte_0
     62            SDIO_HIGH;                            //release DATA-line
   \   000036   D286         SETB      0x80.6
     63                      //pulswith approx. 5 us
     64            SDIO_DIR_IN;                     	 //Change SDA to be input
   \   000038   53FDBF       ANL       0xfd,#0xbf
     65            DELAY(DURATION1);
   \   00003B   78E8         MOV       R0,#-0x18
   \   00003D   7903         MOV       R1,#0x3
   \                     ??SHT10_WriteByte_6:
   \   00003F   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000042   70FB         JNZ       ??SHT10_WriteByte_6
     66            SCLK_HIGH;                          //clk for SENSI-BUS
   \   000044   D280         SETB      0x80.0
     67            if(READ_SDIO)
   \   000046   A286         MOV       C,0x80.6
   \   000048   5004         JNC       ??SHT10_WriteByte_7
     68            {
     69                    return 1; 						//error=1 in case of no acknowledge
   \   00004A   7901         MOV       R1,#0x1
   \   00004C   800D         SJMP      ??SHT10_WriteByte_8
     70            }
     71            DELAY(DURATION1);          //pulswith approx. 5 us
   \                     ??SHT10_WriteByte_7:
   \   00004E   78E8         MOV       R0,#-0x18
   \   000050   7903         MOV       R1,#0x3
   \                     ??SHT10_WriteByte_9:
   \   000052   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000055   70FB         JNZ       ??SHT10_WriteByte_9
     72            SCLK_LOW;
   \   000057   C280         CLR       0x80.0
     73            return 0;
   \   000059   7900         MOV       R1,#0x0
   \                     ??SHT10_WriteByte_8:
   \   00005B   02....       LJMP      ?BRET
   \   00005E                REQUIRE P0DIR
   \   00005E                REQUIRE _A_P0
     74          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E8           MOV       A,R0
   \   000001   FC           MOV       R4,A
   \   000002   E9           MOV       A,R1
   \   000003   FD           MOV       R5,A
   \   000004   EC           MOV       A,R4
   \   000005   24FF         ADD       A,#-0x1
   \   000007   18           DEC       R0
   \   000008   ED           MOV       A,R5
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   F9           MOV       R1,A
   \   00000C   EC           MOV       A,R4
   \   00000D   4D           ORL       A,R5
   \   00000E   22           RET
     75          
     76          /**********************************************************************************************************
     77          **Function Name:      SHT10_ReadByte
     78          **Description:        读时序
     79          **Input Parameters:   ack--->reads a byte form the Sensibus and gives an acknowledge in case of "ack=1"
     80          **Output Parameters: 无
     81          **********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     82          unsigned char SHT10_ReadByte(unsigned char ack)
   \                     SHT10_ReadByte:
     83          {
   \   000000   EE           MOV       A,R6
   \   000001   C0E0         PUSH      A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
   \   000003   E9           MOV       A,R1
   \   000004   FE           MOV       R6,A
     84            unsigned char i,val=0;
   \   000005   7900         MOV       R1,#0x0
     85            SDIO_DIR_OUT;
   \   000007   43FD40       ORL       0xfd,#0x40
     86            SDIO_HIGH;                            //release DATA-line
   \   00000A   D286         SETB      0x80.6
     87            SDIO_DIR_IN;
   \   00000C   53FDBF       ANL       0xfd,#0xbf
     88            for(i=0x80;i>0;i=(i>>1))             //shift bit for masking
   \   00000F   7880         MOV       R0,#-0x80
     89            {
     90                SCLK_HIGH;                          //clk for SENSI-BUS
   \                     ??SHT10_ReadByte_0:
   \   000011   D280         SETB      0x80.0
     91                DELAY(DURATION1);
   \   000013   7AE8         MOV       R2,#-0x18
   \   000015   7B03         MOV       R3,#0x3
   \                     ??SHT10_ReadByte_1:
   \   000017   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00001A   70FB         JNZ       ??SHT10_ReadByte_1
     92                if(READ_SDIO)
   \   00001C   A286         MOV       C,0x80.6
   \   00001E   5004         JNC       ??SHT10_ReadByte_2
     93                  val=(val|i);                  //read bit
   \   000020   E8           MOV       A,R0
   \   000021   C9           XCH       A,R1
   \   000022   49           ORL       A,R1
   \   000023   F9           MOV       R1,A
     94                SCLK_LOW;
   \                     ??SHT10_ReadByte_2:
   \   000024   C280         CLR       0x80.0
     95                DELAY(DURATION1);
   \   000026   7AE8         MOV       R2,#-0x18
   \   000028   7B03         MOV       R3,#0x3
   \                     ??SHT10_ReadByte_3:
   \   00002A   12....       LCALL     ?Subroutine4 & 0xFFFF
     96            }
   \                     ??CrossCallReturnLabel_17:
   \   00002D   70FB         JNZ       ??SHT10_ReadByte_3
   \   00002F   E8           MOV       A,R0
   \   000030   C3           CLR       C
   \   000031   13           RRC       A
   \   000032   F8           MOV       R0,A
   \   000033   70DC         JNZ       ??SHT10_ReadByte_0
     97            SDIO_DIR_OUT;
   \   000035   43FD40       ORL       0xfd,#0x40
     98            if(ack)                           //in case of "ack==1" pull down DATA-Line
   \   000038   EE           MOV       A,R6
   \   000039   6004         JZ        ??SHT10_ReadByte_4
     99                SDIO_LOW;
   \   00003B   C286         CLR       0x80.6
   \   00003D   8002         SJMP      ??SHT10_ReadByte_5
    100            else
    101                SDIO_HIGH;
   \                     ??SHT10_ReadByte_4:
   \   00003F   D286         SETB      0x80.6
    102            SCLK_HIGH;                            //clk #9 for ack
   \                     ??SHT10_ReadByte_5:
   \   000041   D280         SETB      0x80.0
    103            DELAY(DURATION1);              //pulswith approx. 5 us
   \   000043   7AE8         MOV       R2,#-0x18
   \   000045   7B03         MOV       R3,#0x3
   \                     ??SHT10_ReadByte_6:
   \   000047   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00004A   70FB         JNZ       ??SHT10_ReadByte_6
    104            SCLK_LOW;
   \   00004C   C280         CLR       0x80.0
    105            DELAY(DURATION1);
   \   00004E   7AE8         MOV       R2,#-0x18
   \   000050   7B03         MOV       R3,#0x3
   \                     ??SHT10_ReadByte_7:
   \   000052   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000055   70FB         JNZ       ??SHT10_ReadByte_7
    106            SDIO_HIGH;                            //release DATA-line
   \   000057   D286         SETB      0x80.6
    107            DELAY(DURATION1);
   \   000059   7AE8         MOV       R2,#-0x18
   \   00005B   7B03         MOV       R3,#0x3
   \                     ??SHT10_ReadByte_8:
   \   00005D   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000060   70FB         JNZ       ??SHT10_ReadByte_8
    108            SDIO_DIR_IN;
   \   000062   53FDBF       ANL       0xfd,#0xbf
    109            return val;
   \   000065   D0E0         POP       A
   \   000067   FE           MOV       R6,A
   \   000068   02....       LJMP      ?BRET
   \   00006B                REQUIRE P0DIR
   \   00006B                REQUIRE _A_P0
    110          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EA           MOV       A,R2
   \   000001   FC           MOV       R4,A
   \   000002   EB           MOV       A,R3
   \   000003   FD           MOV       R5,A
   \   000004   EC           MOV       A,R4
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1A           DEC       R2
   \   000008   ED           MOV       A,R5
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FB           MOV       R3,A
   \   00000C   EC           MOV       A,R4
   \   00000D   4D           ORL       A,R5
   \   00000E   22           RET
    111          
    112          /**********************************************************************************************************
    113          **Function Name:      SHT10_Connectionreset
    114          **Description:        通讯复位时序
    115          **                   communication reset: DATA-line=1 and at least 9 SCK cycles followed by transstart
    116          **                          _____________________________________________________         ________
    117          **                    DATA:                                                      |_______|
    118          **                             _    _    _    _    _    _    _    _    _        ___     ___
    119          **                    SCK : __| |__| |__| |__| |__| |__| |__| |__| |__| |______|   |___|   |______
    120          **Input Parameters:   无
    121          **Output Parameters: 无
    122          **********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          void SHT10_Connectionreset(void)
   \                     SHT10_Connectionreset:
    124          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    125            unsigned char ClkCnt;
    126            SDIO_DIR_OUT;
   \   000004   12....       LCALL     ?Subroutine5 & 0xFFFF
    127            SCLK_DIR_OUT;
    128            SDIO_HIGH;
   \                     ??CrossCallReturnLabel_23:
   \   000007   D286         SETB      0x80.6
    129            SCLK_LOW;                              //Initial state
   \   000009   C280         CLR       0x80.0
    130            DELAY(DURATION1);
   \   00000B   78E8         MOV       R0,#-0x18
   \   00000D   7903         MOV       R1,#0x3
   \                     ??SHT10_Connectionreset_0:
   \   00000F   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000012   70FB         JNZ       ??SHT10_Connectionreset_0
    131            for(ClkCnt=0;ClkCnt<9;ClkCnt++)           //9 SCK cycles
   \   000014   7C09         MOV       R4,#0x9
    132            {
    133              SCLK_HIGH;
   \                     ??SHT10_Connectionreset_1:
   \   000016   D280         SETB      0x80.0
    134                  DELAY(DURATION1); 	
   \   000018   78E8         MOV       R0,#-0x18
   \   00001A   7903         MOV       R1,#0x3
   \                     ??SHT10_Connectionreset_2:
   \   00001C   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00001F   70FB         JNZ       ??SHT10_Connectionreset_2
    135              SCLK_LOW;
   \   000021   C280         CLR       0x80.0
    136              DELAY(DURATION1);
   \   000023   78E8         MOV       R0,#-0x18
   \   000025   7903         MOV       R1,#0x3
   \                     ??SHT10_Connectionreset_3:
   \   000027   12....       LCALL     ?Subroutine2 & 0xFFFF
    137            }
   \                     ??CrossCallReturnLabel_9:
   \   00002A   70FB         JNZ       ??SHT10_Connectionreset_3
   \   00002C   1C           DEC       R4
   \   00002D   EC           MOV       A,R4
   \   00002E   70E6         JNZ       ??SHT10_Connectionreset_1
    138            SHT10_Transstart();                           //transmission start
   \   000030                ; Setup parameters for call to function SHT10_Transstart
   \   000030   12....       LCALL     `??SHT10_Transstart::?relay`; Banked call to: SHT10_Transstart
    139          }
   \   000033                REQUIRE ?Subroutine0
   \   000033                REQUIRE P0DIR
   \   000033                REQUIRE _A_P0
   \   000033                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    140          
    141          /**********************************************************************************************************
    142          **Function Name:      SHT10_Softreset
    143          **Description:        软件复位时序resets the sensor by a softreset
    144          **Input Parameters:   无
    145          **Output Parameters: 无
    146          **********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          unsigned char SHT10_Softreset(void)
   \                     SHT10_Softreset:
    148          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    149            unsigned char error=0;
    150            SHT10_Connectionreset();              //reset communication
   \   000004                ; Setup parameters for call to function SHT10_Connectionreset
   \   000004   12....       LCALL     `??SHT10_Connectionreset::?relay`; Banked call to: SHT10_Connectionreset
    151            error+=SHT10_WriteByte(CMD_Soft_Reset);        //send RESET-command to sensor
    152            return error;                     //error=1 in case of no response form the sensor
   \   000007                ; Setup parameters for call to function SHT10_WriteByte
   \   000007   791E         MOV       R1,#0x1e
   \   000009   12....       LCALL     `??SHT10_WriteByte::?relay`; Banked call to: SHT10_WriteByte
   \   00000C   80..         SJMP      ?Subroutine0
    153          }
    154          
    155          /**********************************************************************************************************
    156          **Function Name:      SHT10_WriteStatusReg
    157          **Description:        写状态寄存器
    158          **Input Parameters:   *p_value
    159          **Output Parameters: 无
    160          **********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    161          unsigned char SHT10_WriteStatusReg(unsigned char RegVlaue)
   \                     SHT10_WriteStatusReg:
    162          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    163            unsigned char error=0;
    164            SHT10_Transstart();                           //transmission start
   \   000007                ; Setup parameters for call to function SHT10_Transstart
   \   000007   12....       LCALL     `??SHT10_Transstart::?relay`; Banked call to: SHT10_Transstart
    165            error+=SHT10_WriteByte(CMD_Write_STATUS_REG); //send command to sensor
   \   00000A                ; Setup parameters for call to function SHT10_WriteByte
   \   00000A   7906         MOV       R1,#0x6
   \   00000C   12....       LCALL     `??SHT10_WriteByte::?relay`; Banked call to: SHT10_WriteByte
   \   00000F   E9           MOV       A,R1
   \   000010   FE           MOV       R6,A
    166            error+=SHT10_WriteByte(RegVlaue);             //send value of status register
    167            return error;                             //error>=1 in case of no response form the sensor
   \   000011                ; Setup parameters for call to function SHT10_WriteByte
   \   000011   EF           MOV       A,R7
   \   000012   F9           MOV       R1,A
   \   000013   12....       LCALL     `??SHT10_WriteByte::?relay`; Banked call to: SHT10_WriteByte
   \   000016   E9           MOV       A,R1
   \   000017   2E           ADD       A,R6
   \   000018   F9           MOV       R1,A
   \   000019                REQUIRE ?Subroutine1
   \   000019                ; // Fall through to label ?Subroutine1
    168          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    169          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    170          unsigned char SHT10_ReadStatusReg(void)
   \                     SHT10_ReadStatusReg:
    171          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    172            unsigned char tmp=0;
    173            SHT10_Transstart();                           //transmission start
   \   000004                ; Setup parameters for call to function SHT10_Transstart
   \   000004   12....       LCALL     `??SHT10_Transstart::?relay`; Banked call to: SHT10_Transstart
    174            SHT10_WriteByte(CMD_Read_STATUS_REG);         //send command to sensor
   \   000007                ; Setup parameters for call to function SHT10_WriteByte
   \   000007   7907         MOV       R1,#0x7
   \   000009   12....       LCALL     `??SHT10_WriteByte::?relay`; Banked call to: SHT10_WriteByte
    175            tmp = SHT10_ReadByte(ACK);             				//send value of status register
    176            return tmp;                             			//error>=1 in case of no response form the sensor
   \   00000C                ; Setup parameters for call to function SHT10_ReadByte
   \   00000C   7901         MOV       R1,#0x1
   \   00000E   12....       LCALL     `??SHT10_ReadByte::?relay`; Banked call to: SHT10_ReadByte
   \   000011   80..         SJMP      ?Subroutine0
    177          }
    178          /**********************************************************************************************************
    179          **Function Name:      SHT10_Mearsure
    180          **Description:        读时序      makes a measurement (humidity/temperature) with checksum
    181          **Input Parameters:   *p_value       ,*p_checknum       ,mode
    182          **Output Parameters: 无
    183          **********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          unsigned char SHT10_Measure(unsigned int *p_value, unsigned char *p_checksum, unsigned char mode)
   \                     SHT10_Measure:
    185          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   89..         MOV       ?V4,R1
    186            unsigned error=0;
   \   00000F   75..00       MOV       ?V0,#0x0
    187            unsigned int i;
    188            SHT10_Transstart();                   //transmission start
   \   000012                ; Setup parameters for call to function SHT10_Transstart
   \   000012   12....       LCALL     `??SHT10_Transstart::?relay`; Banked call to: SHT10_Transstart
    189            switch(mode)
   \   000015   E5..         MOV       A,?V4
   \   000017   14           DEC       A
   \   000018   6005         JZ        ??SHT10_Measure_0
   \   00001A   14           DEC       A
   \   00001B   6006         JZ        ??SHT10_Measure_1
   \   00001D   800C         SJMP      ??SHT10_Measure_2
    190            {                                 //send command to sensor
    191              case TEMPERATURE:
    192                  error+=SHT10_WriteByte(CMD_TEM_MES);
   \                     ??SHT10_Measure_0:
   \   00001F                ; Setup parameters for call to function SHT10_WriteByte
   \   00001F   7903         MOV       R1,#0x3
   \   000021   8002         SJMP      ??SHT10_Measure_3
    193                  break;
    194              case HUMIDITY:
    195                  error+=SHT10_WriteByte(CMD_HUMI_MES);
   \                     ??SHT10_Measure_1:
   \   000023                ; Setup parameters for call to function SHT10_WriteByte
   \   000023   7905         MOV       R1,#0x5
   \                     ??SHT10_Measure_3:
   \   000025   12....       LCALL     `??SHT10_WriteByte::?relay`; Banked call to: SHT10_WriteByte
   \   000028   E9           MOV       A,R1
   \   000029   F5..         MOV       ?V0,A
    196                  break;
    197            }
    198            SDIO_DIR_IN;
   \                     ??SHT10_Measure_2:
   \   00002B   53FDBF       ANL       0xfd,#0xbf
    199            for(i=0;i<1500;i++)              //wait until sensor has finished the measurement
   \   00002E   7CDC         MOV       R4,#-0x24
   \   000030   7D05         MOV       R5,#0x5
    200            {
    201                if(READ_SDIO == 0)
   \                     ??SHT10_Measure_4:
   \   000032   A286         MOV       C,0x80.6
   \   000034   5015         JNC       ??SHT10_Measure_5
    202                  break;
    203                else
    204                  DELAY(100);
   \   000036   7864         MOV       R0,#0x64
   \   000038   7900         MOV       R1,#0x0
   \                     ??SHT10_Measure_6:
   \   00003A   12....       LCALL     ?Subroutine2 & 0xFFFF
    205            }
   \                     ??CrossCallReturnLabel_10:
   \   00003D   70FB         JNZ       ??SHT10_Measure_6
   \   00003F   EC           MOV       A,R4
   \   000040   24FF         ADD       A,#-0x1
   \   000042   1C           DEC       R4
   \   000043   ED           MOV       A,R5
   \   000044   34FF         ADDC      A,#-0x1
   \   000046   FD           MOV       R5,A
   \   000047   EC           MOV       A,R4
   \   000048   4D           ORL       A,R5
   \   000049   70E7         JNZ       ??SHT10_Measure_4
    206            if(READ_SDIO)
   \                     ??SHT10_Measure_5:
   \   00004B   A286         MOV       C,0x80.6
   \   00004D   5004         JNC       ??SHT10_Measure_7
    207                error+=1;                       			//or timeout (~2 sec.) is reached
   \   00004F   05..         INC       ?V0
   \   000051   E5..         MOV       A,?V0
    208            *(p_value)=SHT10_ReadByte(ACK);      		 		//read the first byte (MSB)
   \                     ??SHT10_Measure_7:
   \   000053                ; Setup parameters for call to function SHT10_ReadByte
   \   000053   7901         MOV       R1,#0x1
   \   000055   12....       LCALL     `??SHT10_ReadByte::?relay`; Banked call to: SHT10_ReadByte
   \   000058   E9           MOV       A,R1
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   A3           INC       DPTR
   \   00005F   E4           CLR       A
   \   000060   F0           MOVX      @DPTR,A
    209            *(p_value)=SHT10_ReadByte(ACK)+(*(p_value)<<8);     //read the second byte (LSB)
   \   000061                ; Setup parameters for call to function SHT10_ReadByte
   \   000061   7901         MOV       R1,#0x1
   \   000063   12....       LCALL     `??SHT10_ReadByte::?relay`; Banked call to: SHT10_ReadByte
   \   000066   E9           MOV       A,R1
   \   000067   FA           MOV       R2,A
   \   000068   8E82         MOV       DPL,R6
   \   00006A   8F83         MOV       DPH,R7
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F9           MOV       R1,A
   \   00006E   EA           MOV       A,R2
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   A3           INC       DPTR
   \   000071   E9           MOV       A,R1
   \   000072   F0           MOVX      @DPTR,A
    210            *p_checksum=SHT10_ReadByte(noACK);    				//read checksum
   \   000073                ; Setup parameters for call to function SHT10_ReadByte
   \   000073   7900         MOV       R1,#0x0
   \   000075   12....       LCALL     `??SHT10_ReadByte::?relay`; Banked call to: SHT10_ReadByte
   \   000078   E9           MOV       A,R1
   \   000079   85..82       MOV       DPL,?V2
   \   00007C   85..83       MOV       DPH,?V3
   \   00007F   F0           MOVX      @DPTR,A
    211            return(error);
   \   000080   A9..         MOV       R1,?V0
   \   000082   7F05         MOV       R7,#0x5
   \   000084   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000087                REQUIRE P0DIR
   \   000087                REQUIRE _A_P0
    212          }
    213          
    214          /**********************************************************************************************************
    215          **Function Name:      SHT10_Calculate
    216          **Description:        计算
    217          **Input Parameters:   humi [Ticks] (12 bit)
    218          **                    temp [Ticks] (14 bit)
    219          **Output Parameters: humi [%RH]
    220          **                    temp []
    221          **********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    222          float SHT10_Calculate(unsigned int data,unsigned char mode)
   \                     SHT10_Calculate:
    223          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    224            const float C1=-4.0;              // for 8 Bit
    225            const float C2=+0.648;            // for 8 Bit
    226            const float C3=-0.0000072;        // for 8 Bit
    227            const float D1=-39.6;             // for 12 Bit @ 3V
    228            const float D2=+0.04;             // for 12 Bit @ 3V
    229            const float T1=0.01;              // for 8 bit
    230            const float T2=0.00128;           // for 8 bit
    231            float rh_lin;                     // rh_lin: Humidity linear
    232            float rh_true;                    // rh_true: Temperature compensated humidity
    233            float t_C;                        // t_C   : Temperature []
    234            if (mode == 1)
   \   00000C   7401         MOV       A,#0x1
   \   00000E   6E           XRL       A,R6
   \   00000F   7037         JNZ       ??SHT10_Calculate_0
    235            {
    236              t_C=data*D2+D1;                      //calc. temperature from ticks to []
    237              return (t_C);
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   \   000015   E4           CLR       A
   \   000016   F5..         MOV       ?V2,A
   \   000018   F5..         MOV       ?V3,A
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?UL_TO_FLT
   \   00001F   90....       MOV       DPTR,#__Constant_3d23d70a
   \   000022   78..         MOV       R0,#?V4
   \   000024   12....       LCALL     ?L_MOV_X
   \   000027   78..         MOV       R0,#?V0
   \   000029   79..         MOV       R1,#?V4
   \   00002B   12....       LCALL     ?FLT_MUL
   \   00002E   90....       MOV       DPTR,#__Constant_c21e6666
   \   000031   78..         MOV       R0,#?V4
   \   000033   12....       LCALL     ?L_MOV_X
   \   000036   78..         MOV       R0,#?V0
   \   000038   79..         MOV       R1,#?V4
   \   00003A   12....       LCALL     ?FLT_ADD
   \   00003D   AA..         MOV       R2,?V0
   \   00003F   AB..         MOV       R3,?V1
   \   000041   AC..         MOV       R4,?V2
   \   000043   AD..         MOV       R5,?V3
   \   000045   02....       LJMP      ??SHT10_Calculate_1 & 0xFFFF
    238            }
    239            else if(mode == 2)
   \                     ??SHT10_Calculate_0:
   \   000048   7402         MOV       A,#0x2
   \   00004A   6E           XRL       A,R6
   \   00004B   6003         JZ        $+5
   \   00004D   02....       LJMP      ??SHT10_Calculate_2 & 0xFFFF
    240            {
    241              rh_lin=C3*data*data + C2*data + C1;     //calc. humidity from ticks to [%RH]
    242              rh_true=(t_C-25)*(T1+T2*data)+rh_lin;   //calc. temperature compensated humidity [%RH]
   \   000050   8A..         MOV       ?V4,R2
   \   000052   8B..         MOV       ?V5,R3
   \   000054   E4           CLR       A
   \   000055   F5..         MOV       ?V6,A
   \   000057   F5..         MOV       ?V7,A
   \   000059   78..         MOV       R0,#?V4
   \   00005B   12....       LCALL     ?UL_TO_FLT
   \   00005E   85..82       MOV       DPL,?XSP + 0
   \   000061   85..83       MOV       DPH,?XSP + 1
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?L_MOV_TO_X
   \   000069   90....       MOV       DPTR,#__Constant_c1c80000
   \   00006C   78..         MOV       R0,#?V4
   \   00006E   12....       LCALL     ?L_MOV_X
   \   000071   78..         MOV       R0,#?V0
   \   000073   79..         MOV       R1,#?V4
   \   000075   12....       LCALL     ?FLT_ADD
   \   000078   C0..         PUSH      ?V0
   \   00007A   C0..         PUSH      ?V1
   \   00007C   C0..         PUSH      ?V2
   \   00007E   C0..         PUSH      ?V3
   \   000080   85..82       MOV       DPL,?XSP + 0
   \   000083   85..83       MOV       DPH,?XSP + 1
   \   000086   78..         MOV       R0,#?V0
   \   000088   12....       LCALL     ?L_MOV_X
   \   00008B   90....       MOV       DPTR,#__Constant_3aa7c5ac
   \   00008E   78..         MOV       R0,#?V4
   \   000090   12....       LCALL     ?L_MOV_X
   \   000093   78..         MOV       R0,#?V0
   \   000095   79..         MOV       R1,#?V4
   \   000097   12....       LCALL     ?FLT_MUL
   \   00009A   90....       MOV       DPTR,#__Constant_3c23d70a
   \   00009D   78..         MOV       R0,#?V4
   \   00009F   12....       LCALL     ?L_MOV_X
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   79..         MOV       R1,#?V4
   \   0000A6   12....       LCALL     ?FLT_ADD
   \   0000A9   D0..         POP       ?V7
   \   0000AB   D0..         POP       ?V6
   \   0000AD   D0..         POP       ?V5
   \   0000AF   D0..         POP       ?V4
   \   0000B1   78..         MOV       R0,#?V4
   \   0000B3   79..         MOV       R1,#?V0
   \   0000B5   12....       LCALL     ?FLT_MUL
   \   0000B8   C0..         PUSH      ?V4
   \   0000BA   C0..         PUSH      ?V5
   \   0000BC   C0..         PUSH      ?V6
   \   0000BE   C0..         PUSH      ?V7
   \   0000C0   85..82       MOV       DPL,?XSP + 0
   \   0000C3   85..83       MOV       DPH,?XSP + 1
   \   0000C6   78..         MOV       R0,#?V0
   \   0000C8   12....       LCALL     ?L_MOV_X
   \   0000CB   90....       MOV       DPTR,#__Constant_b6f19787
   \   0000CE   78..         MOV       R0,#?V4
   \   0000D0   12....       LCALL     ?L_MOV_X
   \   0000D3   78..         MOV       R0,#?V0
   \   0000D5   79..         MOV       R1,#?V4
   \   0000D7   12....       LCALL     ?FLT_MUL
   \   0000DA   85..82       MOV       DPL,?XSP + 0
   \   0000DD   85..83       MOV       DPH,?XSP + 1
   \   0000E0   78..         MOV       R0,#?V4
   \   0000E2   12....       LCALL     ?L_MOV_X
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   79..         MOV       R1,#?V4
   \   0000E9   12....       LCALL     ?FLT_MUL
   \   0000EC   C0..         PUSH      ?V0
   \   0000EE   C0..         PUSH      ?V1
   \   0000F0   C0..         PUSH      ?V2
   \   0000F2   C0..         PUSH      ?V3
   \   0000F4   85..82       MOV       DPL,?XSP + 0
   \   0000F7   85..83       MOV       DPH,?XSP + 1
   \   0000FA   78..         MOV       R0,#?V4
   \   0000FC   12....       LCALL     ?L_MOV_X
   \   0000FF   90....       MOV       DPTR,#__Constant_3f25e354
   \   000102   78..         MOV       R0,#?V0
   \   000104   12....       LCALL     ?L_MOV_X
   \   000107   78..         MOV       R0,#?V4
   \   000109   79..         MOV       R1,#?V0
   \   00010B   12....       LCALL     ?FLT_MUL
   \   00010E   D0..         POP       ?V3
   \   000110   D0..         POP       ?V2
   \   000112   D0..         POP       ?V1
   \   000114   D0..         POP       ?V0
   \   000116   78..         MOV       R0,#?V0
   \   000118   79..         MOV       R1,#?V4
   \   00011A   12....       LCALL     ?FLT_ADD
   \   00011D   90....       MOV       DPTR,#__Constant_c0800000
   \   000120   78..         MOV       R0,#?V4
   \   000122   12....       LCALL     ?L_MOV_X
   \   000125   78..         MOV       R0,#?V0
   \   000127   79..         MOV       R1,#?V4
   \   000129   12....       LCALL     ?FLT_ADD
   \   00012C   D0..         POP       ?V7
   \   00012E   D0..         POP       ?V6
   \   000130   D0..         POP       ?V5
   \   000132   D0..         POP       ?V4
   \   000134   78..         MOV       R0,#?V4
   \   000136   79..         MOV       R1,#?V0
   \   000138   12....       LCALL     ?FLT_ADD
    243              if(rh_true>100)rh_true=100;       //cut if the value is outside of
   \   00013B   90....       MOV       DPTR,#__Constant_42c80001
   \   00013E   78..         MOV       R0,#?V0
   \   000140   12....       LCALL     ?L_MOV_X
   \   000143   78..         MOV       R0,#?V4
   \   000145   79..         MOV       R1,#?V0
   \   000147   12....       LCALL     ?FLT_GE
   \   00014A   500E         JNC       ??SHT10_Calculate_3
   \   00014C   75..00       MOV       ?V4,#0x0
   \   00014F   75..00       MOV       ?V5,#0x0
   \   000152   75..C8       MOV       ?V6,#-0x38
   \   000155   75..42       MOV       ?V7,#0x42
   \   000158   801D         SJMP      ??SHT10_Calculate_4
    244              if(rh_true<0.1)rh_true=0.1;       //the physical possible range
   \                     ??SHT10_Calculate_3:
   \   00015A   90....       MOV       DPTR,#__Constant_3dcccccd
   \   00015D   78..         MOV       R0,#?V0
   \   00015F   12....       LCALL     ?L_MOV_X
   \   000162   78..         MOV       R0,#?V4
   \   000164   79..         MOV       R1,#?V0
   \   000166   12....       LCALL     ?FLT_LT
   \   000169   500C         JNC       ??SHT10_Calculate_4
   \   00016B   75..CD       MOV       ?V4,#-0x33
   \   00016E   75..CC       MOV       ?V5,#-0x34
   \   000171   75..CC       MOV       ?V6,#-0x34
   \   000174   75..3D       MOV       ?V7,#0x3d
    245              return (rh_true);
   \                     ??SHT10_Calculate_4:
   \   000177   AA..         MOV       R2,?V4
   \   000179   AB..         MOV       R3,?V5
   \   00017B   AC..         MOV       R4,?V6
   \   00017D   AD..         MOV       R5,?V7
   \   00017F   8008         SJMP      ??SHT10_Calculate_1
    246            }
    247            else
    248              return 0;
   \                     ??SHT10_Calculate_2:
   \   000181   7A00         MOV       R2,#0x0
   \   000183   7B00         MOV       R3,#0x0
   \   000185   7C00         MOV       R4,#0x0
   \   000187   7D00         MOV       R5,#0x0
   \                     ??SHT10_Calculate_1:
   \   000189   7404         MOV       A,#0x4
   \   00018B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018E   7F08         MOV       R7,#0x8
   \   000190   02....       LJMP      ?BANKED_LEAVE_XDATA
    249          }
    250          /**********************************************************************************************************
    251          **Function Name:      SHT10_init
    252          **Description:        初始化SHT10
    253          **********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          void SHT10_init(unsigned int Initial_Reg)
   \                     SHT10_init:
    255          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    256            SHT10_Connectionreset();
   \   000007                ; Setup parameters for call to function SHT10_Connectionreset
   \   000007   12....       LCALL     `??SHT10_Connectionreset::?relay`; Banked call to: SHT10_Connectionreset
    257            SHT10_WriteStatusReg(Initial_Reg);
   \   00000A                ; Setup parameters for call to function SHT10_WriteStatusReg
   \   00000A   EE           MOV       A,R6
   \   00000B   F9           MOV       R1,A
   \   00000C   12....       LCALL     `??SHT10_WriteStatusReg::?relay`; Banked call to: SHT10_WriteStatusReg
    258          }
   \   00000F   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3d23d70a:
   \   000000   0AD7233D     DD 3D23D70AH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c21e6666:
   \   000000   66661EC2     DD 0C21E6666H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c1c80000:
   \   000000   0000C8C1     DD 0C1C80000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3aa7c5ac:
   \   000000   ACC5A73A     DD 3AA7C5ACH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3c23d70a:
   \   000000   0AD7233C     DD 3C23D70AH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_b6f19787:
   \   000000   8797F1B6     DD 0B6F19787H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f25e354:
   \   000000   54E3253F     DD 3F25E354H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c0800000:
   \   000000   000080C0     DD 0C0800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42c80001:
   \   000000   0100C842     DD 42C80001H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3dcccccd:
   \   000000   CDCCCC3D     DD 3DCCCCCDH

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SHT10_Transstart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SHT10_Transstart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SHT10_WriteByte::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SHT10_WriteByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SHT10_ReadByte::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SHT10_ReadByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SHT10_Connectionreset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SHT10_Connectionreset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SHT10_Softreset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SHT10_Softreset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SHT10_WriteStatusReg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SHT10_WriteStatusReg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SHT10_ReadStatusReg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SHT10_ReadStatusReg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SHT10_Measure::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SHT10_Measure

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SHT10_Calculate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SHT10_Calculate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SHT10_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SHT10_init
    259          
    260          
    261          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      8     20   SHT10_Calculate
      2      9   SHT10_Connectionreset
        2      0   -> SHT10_Transstart
      1     13   SHT10_Measure
        0     13   -> SHT10_ReadByte
        0     13   -> SHT10_Transstart
        0     13   -> SHT10_WriteByte
      1     13   SHT10_ReadByte
      2      0   SHT10_ReadStatusReg
        2      0   -> SHT10_ReadByte
        2      0   -> SHT10_Transstart
        2      0   -> SHT10_WriteByte
      2      0   SHT10_Softreset
        2      0   -> SHT10_Connectionreset
        2      0   -> SHT10_WriteByte
      0     13   SHT10_Transstart
      0     13   SHT10_WriteByte
      0     18   SHT10_WriteStatusReg
        0      9   -> SHT10_Transstart
        0      9   -> SHT10_WriteByte
      0      9   SHT10_init
        0      9   -> SHT10_Connectionreset
        0      9   -> SHT10_WriteStatusReg


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
       5  ?Subroutine1
      15  ?Subroutine2
      15  ?Subroutine3
      15  ?Subroutine4
       7  ?Subroutine5
       1  P0DIR
     403  SHT10_Calculate
       6  SHT10_Calculate::?relay
      51  SHT10_Connectionreset
       6  SHT10_Connectionreset::?relay
     135  SHT10_Measure
       6  SHT10_Measure::?relay
     107  SHT10_ReadByte
       6  SHT10_ReadByte::?relay
      19  SHT10_ReadStatusReg
       6  SHT10_ReadStatusReg::?relay
      14  SHT10_Softreset
       6  SHT10_Softreset::?relay
      85  SHT10_Transstart
       6  SHT10_Transstart::?relay
      94  SHT10_WriteByte
       6  SHT10_WriteByte::?relay
      25  SHT10_WriteStatusReg
       6  SHT10_WriteStatusReg::?relay
      18  SHT10_init
       6  SHT10_init::?relay
       1  _A_P0
       4  __Constant_3aa7c5ac
       4  __Constant_3c23d70a
       4  __Constant_3d23d70a
       4  __Constant_3dcccccd
       4  __Constant_3f25e354
       4  __Constant_42c80001
       4  __Constant_b6f19787
       4  __Constant_c0800000
       4  __Constant_c1c80000
       4  __Constant_c21e6666

 
 1 015 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
    40 bytes in segment XDATA_ROM_C
 
    60 bytes of CODE     memory
     0 bytes of CONST    memory (+ 40 bytes shared)
     0 bytes of DATA     memory (+  2 bytes shared)
 1 015 bytes of HUGECODE memory

Errors: none
Warnings: none
