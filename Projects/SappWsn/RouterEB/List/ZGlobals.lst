###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               03/Sep/2019  15:28:17
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Components\stack\sys\ZGlobals.c
#    Command line       =  
#        -f C:\Users\talnex\AppData\Local\Temp\EW3CEB.tmp
#        (\\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Components\stack\sys\ZGlobals.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -D SAPP_ZSTACK -lC
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\RouterEB\List
#        -lA
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x4545
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\ -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\Source\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\zstack\ZMain\TI2530DB\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\include\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\include\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\high_level\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mt\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\osal\include\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\saddr\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\sdata\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\af\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\nwk\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sapi\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sec\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sys\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\zdo\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\
#        -I
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\f8w\
#        -Ohz --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\RouterEB\List\ZGlobals.lst
#    Object file        =  
#        \\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Projects\SappWsn\RouterEB\Obj\ZGlobals.r51
#
###############################################################################

\\Mac\Home\Documents\GitHub\Kraken\Zigbee_NetWork\Components\stack\sys\ZGlobals.c
      1          /**************************************************************************************************
      2            Filename:       ZGlobals.c
      3            Revised:        $Date: 2011-05-25 19:35:25 -0700 (Wed, 25 May 2011) $
      4            Revision:       $Revision: 26100 $
      5          
      6            Description:    User definable Z-Stack parameters.
      7          
      8          
      9            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL_Nv.h"
     46          #include "ZDObject.h"
     47          #include "ZGlobals.h"
     48          #include "ZDNwkMgr.h"
     49          #include "OnBoard.h"
     50          #include "ZDSecMgr.h"
     51          
     52          /*********************************************************************
     53           * MACROS
     54           */
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          /*********************************************************************
     61           * TYPEDEFS
     62           */
     63          
     64          typedef struct zgItem
     65          {
     66            uint16 id;
     67            uint16 len;
     68            void *buf;
     69          } zgItem_t;
     70          
     71          /*********************************************************************
     72           * NWK GLOBAL VARIABLES
     73           */
     74          
     75          // Polling values

   \                                 In  segment XDATA_I, align 1, keep-with-next
     76          uint16 zgPollRate = POLL_RATE;
   \                     zgPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     77          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     zgQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgQueuedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     78          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     zgResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgResponsePollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     79          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
   \                     zgRejoinPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgRejoinPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
     80          
     81          // Transmission retries numbers

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
   \                     zgMaxDataRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxDataRetries>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     83          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
   \                     zgMaxPollFailureRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
     84          
     85          // Default channel list

   \                                 In  segment XDATA_I, align 1, keep-with-next
     86          uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
   \                     zgDefaultChannelList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultChannelList>`
   \   000004                REQUIRE __INIT_XDATA_I
     87          
     88          // Default starting scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     89          uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
   \                     zgDefaultStartingScanDuration:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
   \   000001                REQUIRE __INIT_XDATA_I
     90          
     91          // Stack profile Id

   \                                 In  segment XDATA_I, align 1, keep-with-next
     92          uint8 zgStackProfile = STACK_PROFILE_ID;
   \                     zgStackProfile:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStackProfile>`
   \   000001                REQUIRE __INIT_XDATA_I
     93          
     94          // Default indirect message holding timeout

   \                                 In  segment XDATA_I, align 1, keep-with-next
     95          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
   \                     zgIndirectMsgTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I
     96          
     97          // Security mode

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint8 zgSecurityMode = ZG_SECURITY_MODE;
   \                     zgSecurityMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99          
    100          // Secure permit join

   \                                 In  segment XDATA_I, align 1, keep-with-next
    101          uint8 zgSecurePermitJoin = true;
   \                     zgSecurePermitJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurePermitJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    102          
    103          // Trust center address

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint16 zgTrustCenterAddr = ZG_TRUSTCENTER_ADDR;
   \                     zgTrustCenterAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          // Route Discovery Time - amount of time that a route request lasts

   \                                 In  segment XDATA_I, align 1, keep-with-next
    107          uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
   \                     zgRouteDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    108          
    109          // Route expiry

   \                                 In  segment XDATA_I, align 1, keep-with-next
    110          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
   \                     zgRouteExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    111          
    112          // Extended PAN Id

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
   \                     zgExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    114          
    115          // Broadcast parameters

   \                                 In  segment XDATA_I, align 1, keep-with-next
    116          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
   \                     zgMaxBcastRetires:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxBcastRetires>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    117          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
   \                     zgPassiveAckTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPassiveAckTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    118          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
   \                     zgBcastDeliveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgBcastDeliveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    119          
    120          // Network mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    121          uint8 zgNwkMode = NWK_MODE;
   \                     zgNwkMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    122          
    123          // Many-to-one values

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
   \                     zgConcentratorEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
   \                     zgConcentratorDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
   \                     zgConcentratorRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgConcentratorRadius>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
   \                     zgConcentratorRC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    128          uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \                     zgNwkSrcRtgExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    129          
    130          /*********************************************************************
    131           * APS GLOBAL VARIABLES
    132           */
    133          
    134          // The maximum number of retries allowed after a transmission failure

   \                                 In  segment XDATA_I, align 1, keep-with-next
    135          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
   \                     zgApscMaxFrameRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
    136          
    137          // The maximum number of seconds (milliseconds) to wait for an
    138          // acknowledgement to a transmitted frame.
    139          
    140          // This number is used by polled devices.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    141          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
   \                     zgApscAckWaitDurationPolled:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
   \   000002                REQUIRE __INIT_XDATA_I
    142          
    143          // This number is used by non-polled devices in the following formula:
    144          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145          uint8 zgApsAckWaitMultiplier = 2;
   \                     zgApsAckWaitMultiplier:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
   \   000001                REQUIRE __INIT_XDATA_I
    146          
    147          // The maximum number of milliseconds for the end device binding

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
   \                     zgApsDefaultMaxBindingTime:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          // The 64-big identifier of the network to join or form.
    151          // Default set to all zeros

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
   \                     zgApsUseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    153          
    154          // A boolean flag that indicates whether it is OK to use insecure join
    155          // on startup. Default set to true

   \                                 In  segment XDATA_I, align 1, keep-with-next
    156          uint8 zgApsUseInsecureJoin = TRUE;
   \                     zgApsUseInsecureJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    157          
    158          // The radius of broadcast multicast transmissions

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
   \                     zgApsNonMemberRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsNonMemberRadius>`
   \   000001                REQUIRE __INIT_XDATA_I
    160          
    161          /*********************************************************************
    162           * SECURITY GLOBAL VARIABLES
    163           */
    164          
    165          // If true, preConfigKey should be configured on all devices on the network
    166          // If false, it is configured only on the coordinator and sent to other
    167          // devices upon joining.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          uint8 zgPreConfigKeys = FALSE;// TRUE;
   \                     zgPreConfigKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    169          
    170          // If true, defaultTCLinkKey should be configured on all devices on the
    171          // network. If false, individual trust center link key between each device and
    172          // the trust center should be manually configured via MT_WRITE_NV

   \                                 In  segment XDATA_I, align 1, keep-with-next
    173          uint8 zgUseDefaultTCLK = TRUE; // FALSE
   \                     zgUseDefaultTCLK:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgUseDefaultTCLK>`
   \   000001                REQUIRE __INIT_XDATA_I
    174          
    175          /*********************************************************************
    176           * ZDO GLOBAL VARIABLES
    177           */
    178          
    179          // Configured PAN ID

   \                                 In  segment XDATA_I, align 1, keep-with-next
    180          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
   \                     zgConfigPANID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgConfigPANID>`
   \   000002                REQUIRE __INIT_XDATA_I
    181          
    182          // Device Logical Type

   \                                 In  segment XDATA_I, align 1, keep-with-next
    183          uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
   \                     zgDeviceLogicalType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDeviceLogicalType>`
   \   000001                REQUIRE __INIT_XDATA_I
    184          
    185          // Startup Delay

   \                                 In  segment XDATA_I, align 1, keep-with-next
    186          uint8 zgStartDelay = START_DELAY;
   \                     zgStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    187          
    188          #if !defined MT_TASK
    189          // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().
    190          uint8 zgZdoDirectCB = FALSE;
    191          #endif
    192          
    193          // Min number of attempted transmissions for Channel Interference detection

   \                                 In  segment XDATA_I, align 1, keep-with-next
    194          uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
   \                     zgNwkMgrMinTransmissions:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
   \   000001                REQUIRE __INIT_XDATA_I
    195          
    196          /*********************************************************************
    197           * APPLICATION GLOBAL VARIABLES
    198           */
    199          
    200          // Network Manager Mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    201          uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
   \                     zgNwkMgrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    202          
    203          /*********************************************************************
    204           * NON-STANDARD GLOBAL VARIABLES
    205           */
    206          
    207          // Simple API Endpoint

   \                                 In  segment XDATA_I, align 1, keep-with-next
    208          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
   \                     zgSapiEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSapiEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
    209          
    210          /*********************************************************************
    211           * LOCAL VARIABLES
    212           */
    213          
    214          /*********************************************************************
    215           * ZGlobal Item Table
    216           */

   \                                 In  segment CODE_C, align 1
    217          static CONST zgItem_t zgItemTable[] =
   \                     zgItemTable:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0H
    218          {
    219          #if defined ( NV_INIT )
    220          #if !defined MT_TASK
    221            {
    222              ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
    223            },
    224          #endif
    225            {
    226              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    227            },
    228            {
    229              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    230            },
    231            {
    232              ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    233            },
    234            {
    235              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    236            },
    237            {
    238              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    239            },
    240            {
    241              ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    242            },
    243            {
    244              ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    245            },
    246            {
    247              ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    248            },
    249            {
    250              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    251            },
    252            {
    253              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    254            },
    255            {
    256              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    257            },
    258            {
    259              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    260            },
    261            {
    262              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
    263            },
    264            {
    265              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    266            },
    267            {
    268              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    269            },
    270            {
    271              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    272            },
    273            {
    274              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    275            },
    276            {
    277              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    278            },
    279            {
    280              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    281            },
    282            {
    283              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    284            },
    285            {
    286              ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
    287            },
    288            {
    289              ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
    290            },
    291            {
    292              ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
    293            },
    294          #ifndef NONWK
    295            {
    296              ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    297            },
    298            {
    299              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    300            },
    301            {
    302              ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
    303            },
    304            {
    305              ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
    306            },
    307            {
    308              ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
    309            },
    310            {
    311              ZCD_NV_TRUSTCENTER_ADDR, sizeof(zgTrustCenterAddr), &zgTrustCenterAddr
    312            },
    313          #endif // NONWK
    314            {
    315              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    316            },
    317            {
    318              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    319            },
    320            {
    321              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    322            },
    323            {
    324              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    325            },
    326            {
    327              ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
    328            },
    329            {
    330              ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
    331            },
    332            {
    333              ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
    334            },
    335            {
    336              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    337            },
    338            {
    339              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    340            },
    341            {
    342              ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
    343            },
    344            {
    345              ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
    346            },
    347          #endif // NV_INIT
    348            // Last item -- DO NOT MOVE IT!
    349            {
    350              0x00, 0, NULL
    351            }
    352          };
    353          
    354          /*********************************************************************
    355           * LOCAL FUNCTIONS
    356           */
    357          
    358          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    359          
    360          #ifndef NONWK
    361          static uint8 zgPreconfigKeyInit( uint8 setDefault );
    362          #endif
    363          
    364          /*********************************************************************
    365           * @fn       zgItemInit()
    366           *
    367           * @brief
    368           *
    369           *   Initialize a global item. If the item doesn't exist in NV memory,
    370           *   write the system default (value passed in) into NV memory. But if
    371           *   it exists, set the item to the value stored in NV memory.
    372           *
    373           *   Also, if setDefault is TRUE and the item exists, we will write
    374           *   the default value to NV space.
    375           *
    376           * @param   id - item id
    377           * @param   len - item len
    378           * @param   buf - pointer to the item
    379           * @param   setDefault - TRUE to set default, not read
    380           *
    381           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    382           *          exist in NV, NV_OPER_FAILED if failure.
    383           */
    384          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
    385          {
    386            uint8 status;
    387          
    388            // If the item doesn't exist in NV memory, create and initialize
    389            // it with the value passed in.
    390            status = osal_nv_item_init( id, len, buf );
    391            if ( status == ZSUCCESS )
    392            {
    393              if ( setDefault )
    394              {
    395                // Write the default value back to NV
    396                status = osal_nv_write( id, 0, len, buf );
    397              }
    398              else
    399              {
    400                // The item exists in NV memory, read it from NV memory
    401                status = osal_nv_read( id, 0, len, buf );
    402              }
    403            }
    404          
    405            return (status);
    406          }
    407          
    408          /*********************************************************************
    409           * API FUNCTIONS
    410           */
    411          
    412          /*********************************************************************
    413           * @fn          zgInit
    414           *
    415           * @brief
    416           *
    417           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    418           *   NV memory, write the system default into NV memory. But if
    419           *   it exists, set the item to the value stored in NV memory.
    420           *
    421           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    422           *       that the Config state items (zgItemTable) need to be
    423           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    424           *
    425           * @param       none
    426           *
    427           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    428           *              exist in NV, NV_OPER_FAILED if failure.
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          uint8 zgInit( void )
   \                     zgInit:
    431          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    432            uint8  setDefault = FALSE;
   \   000005   7E00         MOV       R6,#0x0
    433          
    434            // Do we want to default the Config state values
    435            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV       A,R1
   \   00000B   F8           MOV       R0,A
   \   00000C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000E   5002         JNC       ??zgInit_0
    436            {
    437              setDefault = TRUE;
   \   000010   7E01         MOV       R6,#0x1
    438            }
    439          
    440          #if 0
    441            // Enable this section if you need to track the number of resets
    442            // This section is normally disabled to minimize "wear" on NV memory
    443            uint16 bootCnt = 0;
    444          
    445            // Update the Boot Counter
    446            if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
    447            {
    448              // Get the old value from NV memory
    449              osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    450            }
    451          
    452            // Increment the Boot Counter and store it into NV memory
    453            if ( setDefault )
    454              bootCnt = 0;
    455            else
    456              bootCnt++;
    457            osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    458          #endif
    459          
    460            // Initialize the Extended PAN ID as my own extended address
    461            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
   \                     ??zgInit_0:
   \   000012                ; Setup parameters for call to function ZMacGetReq
   \   000012   7A..         MOV       R2,#zgExtendedPANID & 0xff
   \   000014   7B..         MOV       R3,#(zgExtendedPANID >> 8) & 0xff
   \   000016   79E2         MOV       R1,#-0x1e
   \   000018   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    462          
    463            // Initialize the items table
    464            zgInitItems( setDefault );
   \   00001B                ; Setup parameters for call to function zgInitItems
   \   00001B   EE           MOV       A,R6
   \   00001C   F9           MOV       R1,A
   \   00001D   12....       LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
    465          
    466          #ifndef NONWK
    467            if ( ZG_SECURE_ENABLED )
    468            {
    469              // Initialize the Pre-Configured Key to the default key
    470              zgPreconfigKeyInit( setDefault );
    471          
    472              // Initialize NV items for all Keys: NWK, APS, TCLK and Master
    473              ZDSecMgrInitNVKeyTables( setDefault );
    474            }
    475          #endif // NONWK
    476          
    477            // Clear the Config State default
    478            if ( setDefault )
   \   000020   EE           MOV       A,R6
   \   000021   A2E0         MOV       C,0xE0 /* A   */.0
   \   000023   5007         JNC       ??zgInit_1
    479            {
    480              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   000025                ; Setup parameters for call to function zgWriteStartupOptions
   \   000025   7A01         MOV       R2,#0x1
   \   000027   7900         MOV       R1,#0x0
   \   000029   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    481            }
    482          
    483            return ( ZSUCCESS );
   \                     ??zgInit_1:
   \   00002C   7900         MOV       R1,#0x0
   \   00002E   7F01         MOV       R7,#0x1
   \   000030   02....       LJMP      ?BANKED_LEAVE_XDATA
    484          }
    485          
    486          /*********************************************************************
    487           * @fn          zgInitItems
    488           *
    489           * @brief       Initializes RAM variables from NV.  If NV items don't
    490           *              exist, then the NV is initialize with what is in RAM
    491           *              variables.
    492           *
    493           * @param       none
    494           *
    495           * @return      none
    496           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          void zgInitItems( uint8 setDefault )
   \                     zgInitItems:
    498          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
    499            uint8  i = 0;
   \   000007   75..00       MOV       ?V2,#0x0
   \   00000A   801A         SJMP      ??zgInitItems_0
    500          
    501            while ( zgItemTable[i].id != 0x00 )
    502            {
   \                     ??zgInitItems_1:
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   7C00         MOV       R4,#0x0
   \   000016   7D00         MOV       R5,#0x0
   \   000018   EE           MOV       A,R6
   \   000019   FA           MOV       R2,A
   \   00001A   EF           MOV       A,R7
   \   00001B   FB           MOV       R3,A
   \   00001C   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \                     ??zgInitItems_2:
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
    503              // Initialize the item
    504              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
    505          
    506              // Move on to the next item
    507              i++;
   \                     ??zgInitItems_3:
   \   000024   05..         INC       ?V2
   \                     ??zgInitItems_0:
   \   000026   E5..         MOV       A,?V2
   \   000028   75F006       MOV       B,#0x6
   \   00002B   A4           MUL       AB
   \   00002C   F8           MOV       R0,A
   \   00002D   AAF0         MOV       R2,B
   \   00002F   EA           MOV       A,R2
   \   000030   F9           MOV       R1,A
   \   000031   74..         MOV       A,#zgItemTable & 0xff
   \   000033   28           ADD       A,R0
   \   000034   F582         MOV       DPL,A
   \   000036   74..         MOV       A,#(zgItemTable >> 8) & 0xff
   \   000038   39           ADDC      A,R1
   \   000039   F583         MOV       DPH,A
   \   00003B   E4           CLR       A
   \   00003C   93           MOVC      A,@A+DPTR
   \   00003D   F8           MOV       R0,A
   \   00003E   7401         MOV       A,#0x1
   \   000040   93           MOVC      A,@A+DPTR
   \   000041   F9           MOV       R1,A
   \   000042   E8           MOV       A,R0
   \   000043   49           ORL       A,R1
   \   000044   7003         JNZ       $+5
   \   000046   02....       LJMP      ??zgInitItems_4 & 0xFFFF
   \   000049   E5..         MOV       A,?V2
   \   00004B   75F006       MOV       B,#0x6
   \   00004E   A4           MUL       AB
   \   00004F   F8           MOV       R0,A
   \   000050   EA           MOV       A,R2
   \   000051   F9           MOV       R1,A
   \   000052   74..         MOV       A,#zgItemTable & 0xff
   \   000054   28           ADD       A,R0
   \   000055   F8           MOV       R0,A
   \   000056   74..         MOV       A,#(zgItemTable >> 8) & 0xff
   \   000058   39           ADDC      A,R1
   \   000059   F9           MOV       R1,A
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E4           CLR       A
   \   00005F   93           MOVC      A,@A+DPTR
   \   000060   F5..         MOV       ?V4,A
   \   000062   7401         MOV       A,#0x1
   \   000064   93           MOVC      A,@A+DPTR
   \   000065   F5..         MOV       ?V5,A
   \   000067   8882         MOV       DPL,R0
   \   000069   8983         MOV       DPH,R1
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   E4           CLR       A
   \   00006E   93           MOVC      A,@A+DPTR
   \   00006F   C0E0         PUSH      A
   \   000071   7401         MOV       A,#0x1
   \   000073   93           MOVC      A,@A+DPTR
   \   000074   F583         MOV       DPH,A
   \   000076   D082         POP       DPL
   \   000078   8582..       MOV       ?V0,DPL
   \   00007B   8583..       MOV       ?V1,DPH
   \   00007E   8882         MOV       DPL,R0
   \   000080   8983         MOV       DPH,R1
   \   000082   E4           CLR       A
   \   000083   93           MOVC      A,@A+DPTR
   \   000084   C0E0         PUSH      A
   \   000086   7401         MOV       A,#0x1
   \   000088   93           MOVC      A,@A+DPTR
   \   000089   F583         MOV       DPH,A
   \   00008B   D082         POP       DPL
   \   00008D   AE82         MOV       R6,DPL
   \   00008F   AF83         MOV       R7,DPH
   \   000091                ; Setup parameters for call to function osal_nv_item_init
   \   000091   78..         MOV       R0,#?V4
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000096   AC..         MOV       R4,?V0
   \   000098   AD..         MOV       R5,?V1
   \   00009A   EE           MOV       A,R6
   \   00009B   FA           MOV       R2,A
   \   00009C   EF           MOV       A,R7
   \   00009D   FB           MOV       R3,A
   \   00009E   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000A1   7402         MOV       A,#0x2
   \   0000A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV       A,R1
   \   0000A7   6003         JZ        $+5
   \   0000A9   02....       LJMP      ??zgInitItems_3 & 0xFFFF
   \   0000AC   E5..         MOV       A,?V3
   \   0000AE   78..         MOV       R0,#?V4
   \   0000B0   7003         JNZ       $+5
   \   0000B2   02....       LJMP      ??zgInitItems_1 & 0xFFFF
   \   0000B5                ; Setup parameters for call to function osal_nv_write
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B8   78..         MOV       R0,#?V0
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BD   7C00         MOV       R4,#0x0
   \   0000BF   7D00         MOV       R5,#0x0
   \   0000C1   EE           MOV       A,R6
   \   0000C2   FA           MOV       R2,A
   \   0000C3   EF           MOV       A,R7
   \   0000C4   FB           MOV       R3,A
   \   0000C5   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000C8   02....       LJMP      ??zgInitItems_2 & 0xFFFF
    508            }
    509          }
   \                     ??zgInitItems_4:
   \   0000CB   7F06         MOV       R7,#0x6
   \   0000CD   02....       LJMP      ?BANKED_LEAVE_XDATA
    510          
    511          /*********************************************************************
    512           * @fn          zgReadStartupOptions
    513           *
    514           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    515           *
    516           * @param       none
    517           *
    518           * @return      the ZCD_NV_STARTUP_OPTION NV item
    519           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    520          uint8 zgReadStartupOptions( void )
   \                     zgReadStartupOptions:
    521          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    522            // Default to Use Config State and Use Network State
    523            uint8 startupOption = 0;
   \   00000A   12....       LCALL     ?Subroutine1 & 0xFFFF
    524          
    525            // This should have been done in ZMain.c, but just in case.
    526            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    527                                        sizeof(startupOption),
    528                                        &startupOption ) == ZSUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   7C01         MOV       R4,#0x1
   \   000012   7D00         MOV       R5,#0x0
   \   000014   7A03         MOV       R2,#0x3
   \   000016   7B00         MOV       R3,#0x0
   \   000018   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001B   7402         MOV       A,#0x2
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000020   E9           MOV       A,R1
   \   000021   7020         JNZ       ??zgReadStartupOptions_0
    529            {
    530              // Read saved startup control
    531              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    532                            0,
    533                            sizeof( startupOption ),
    534                            &startupOption);
   \   000023                ; Setup parameters for call to function osal_nv_read
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75..01       MOV       ?V0,#0x1
   \   00002B   75..00       MOV       ?V1,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV       R4,#0x0
   \   000035   7D00         MOV       R5,#0x0
   \   000037   7A03         MOV       R2,#0x3
   \   000039   7B00         MOV       R3,#0x0
   \   00003B   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
    535            }
    536            return ( startupOption );
   \                     ??zgReadStartupOptions_0:
   \   000043   85..82       MOV       DPL,?XSP + 0
   \   000046   85..83       MOV       DPH,?XSP + 1
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F9           MOV       R1,A
   \   00004B                REQUIRE ?Subroutine0
   \   00004B                ; // Fall through to label ?Subroutine0
    537          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005   7F02         MOV       R7,#0x2
   \   000007   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007                REQUIRE ??Subroutine2_0
   \   000007                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
    538          
    539          /*********************************************************************
    540           * @fn          zgWriteStartupOptions
    541           *
    542           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    543           *
    544           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    545           *               clear bit. The set bit is an OR operation, and the
    546           *               clear bit is an AND ~(bitOptions) operation.
    547           *
    548           * @param       bitOptions - which bits to perform action on:
    549           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    550           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    551           *
    552           * @return      ZSUCCESS if successful
    553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
   \                     zgWriteStartupOptions:
    555          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EA           MOV       A,R2
   \   00000D   FF           MOV       R7,A
    556            uint8 status;
    557            uint8 startupOptions = 0;
   \   00000E   12....       LCALL     ?Subroutine1 & 0xFFFF
    558          
    559            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    560                          0,
    561                          sizeof( startupOptions ),
    562                          &startupOptions );
   \                     ??CrossCallReturnLabel_1:
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   75..01       MOV       ?V0,#0x1
   \   000017   75..00       MOV       ?V1,#0x0
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7C00         MOV       R4,#0x0
   \   000021   7D00         MOV       R5,#0x0
   \   000023   7A03         MOV       R2,#0x3
   \   000025   7B00         MOV       R3,#0x0
   \   000027   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002F   E9           MOV       A,R1
   \   000030   F9           MOV       R1,A
    563          
    564            if ( status == ZSUCCESS )
   \   000031   703E         JNZ       ??zgWriteStartupOptions_0
    565            {
    566              if ( action == ZG_STARTUP_SET )
   \   000033   74FF         MOV       A,#-0x1
   \   000035   6E           XRL       A,R6
   \   000036   700A         JNZ       ??zgWriteStartupOptions_1
    567              {
    568                // Set bits
    569                startupOptions |= bitOptions;
   \   000038   85..82       MOV       DPL,?XSP + 0
   \   00003B   85..83       MOV       DPH,?XSP + 1
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   4F           ORL       A,R7
   \   000040   800C         SJMP      ??zgWriteStartupOptions_2
    570              }
    571              else
    572              {
    573                // Clear bits
    574                startupOptions &= (bitOptions ^ 0xFF);
   \                     ??zgWriteStartupOptions_1:
   \   000042   74FF         MOV       A,#-0x1
   \   000044   6F           XRL       A,R7
   \   000045   F8           MOV       R0,A
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   58           ANL       A,R0
    575              }
    576          
    577              // Changed?
    578              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    579                           0,
    580                           sizeof( startupOptions ),
    581                           &startupOptions );
    582            }
   \                     ??zgWriteStartupOptions_2:
   \   00004E   12....       LCALL     ??Subroutine2_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   75..01       MOV       ?V0,#0x1
   \   000057   75..00       MOV       ?V1,#0x0
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   7C00         MOV       R4,#0x0
   \   000061   7D00         MOV       R5,#0x0
   \   000063   7A03         MOV       R2,#0x3
   \   000065   7B00         MOV       R3,#0x0
   \   000067   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006F   E9           MOV       A,R1
   \   000070   F9           MOV       R1,A
    583          
    584            return ( status );
   \                     ??zgWriteStartupOptions_0:
   \   000071   02....       LJMP      ?Subroutine0 & 0xFFFF
    585          }
    586          
    587          /*********************************************************************
    588           * @fn          zgSetItem
    589           *
    590           * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
    591           *
    592           * @param       id - NV ID
    593           *              len - NV item length
    594           *              buf - pointer to the input buffer
    595           *
    596           * @return      none
    597           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    598          void zgSetItem( uint16 id, uint16 len, void *buf )
   \                     zgSetItem:
    599          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    600          
    601            uint8  i = 0;
   \   000005   7900         MOV       R1,#0x0
   \   000007   8001         SJMP      ??zgSetItem_0
    602          
    603            // Look up the NV item table
    604            while ( zgItemTable[i].id != 0x00 )
    605            {
    606              if( zgItemTable[i].id == id )
    607              {
    608                if ( zgItemTable[i].len == len )
    609                {
    610                  osal_memcpy( zgItemTable[i].buf, buf, len );
    611                }
    612                break;
    613              }
    614              // Move on to the next item
    615              i++;
   \                     ??zgSetItem_1:
   \   000009   09           INC       R1
   \                     ??zgSetItem_0:
   \   00000A   E9           MOV       A,R1
   \   00000B   75F006       MOV       B,#0x6
   \   00000E   A4           MUL       AB
   \   00000F   FE           MOV       R6,A
   \   000010   A8F0         MOV       R0,B
   \   000012   E8           MOV       A,R0
   \   000013   FF           MOV       R7,A
   \   000014   74..         MOV       A,#zgItemTable & 0xff
   \   000016   2E           ADD       A,R6
   \   000017   F582         MOV       DPL,A
   \   000019   74..         MOV       A,#(zgItemTable >> 8) & 0xff
   \   00001B   3F           ADDC      A,R7
   \   00001C   F583         MOV       DPH,A
   \   00001E   E4           CLR       A
   \   00001F   93           MOVC      A,@A+DPTR
   \   000020   FE           MOV       R6,A
   \   000021   7401         MOV       A,#0x1
   \   000023   93           MOVC      A,@A+DPTR
   \   000024   FF           MOV       R7,A
   \   000025   EE           MOV       A,R6
   \   000026   4F           ORL       A,R7
   \   000027   6065         JZ        ??zgSetItem_2
   \   000029   E4           CLR       A
   \   00002A   93           MOVC      A,@A+DPTR
   \   00002B   FE           MOV       R6,A
   \   00002C   7401         MOV       A,#0x1
   \   00002E   93           MOVC      A,@A+DPTR
   \   00002F   FF           MOV       R7,A
   \   000030   EA           MOV       A,R2
   \   000031   6E           XRL       A,R6
   \   000032   7002         JNZ       ??zgSetItem_3
   \   000034   EB           MOV       A,R3
   \   000035   6F           XRL       A,R7
   \                     ??zgSetItem_3:
   \   000036   70D1         JNZ       ??zgSetItem_1
   \   000038   E9           MOV       A,R1
   \   000039   75F006       MOV       B,#0x6
   \   00003C   A4           MUL       AB
   \   00003D   FA           MOV       R2,A
   \   00003E   E8           MOV       A,R0
   \   00003F   FB           MOV       R3,A
   \   000040   74..         MOV       A,#(zgItemTable + 2) & 0xff
   \   000042   2A           ADD       A,R2
   \   000043   F582         MOV       DPL,A
   \   000045   74..         MOV       A,#((zgItemTable + 2) >> 8) & 0xff
   \   000047   3B           ADDC      A,R3
   \   000048   F583         MOV       DPH,A
   \   00004A   E4           CLR       A
   \   00004B   93           MOVC      A,@A+DPTR
   \   00004C   FA           MOV       R2,A
   \   00004D   7401         MOV       A,#0x1
   \   00004F   93           MOVC      A,@A+DPTR
   \   000050   FB           MOV       R3,A
   \   000051   EC           MOV       A,R4
   \   000052   6A           XRL       A,R2
   \   000053   7002         JNZ       ??zgSetItem_4
   \   000055   ED           MOV       A,R5
   \   000056   6B           XRL       A,R3
   \                     ??zgSetItem_4:
   \   000057   7035         JNZ       ??zgSetItem_2
   \   000059                ; Setup parameters for call to function osal_memcpy
   \   000059   740B         MOV       A,#0xb
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F5..         MOV       ?V0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V1,A
   \   000065   75..00       MOV       ?V2,#0x0
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006D   E9           MOV       A,R1
   \   00006E   75F006       MOV       B,#0x6
   \   000071   A4           MUL       AB
   \   000072   F8           MOV       R0,A
   \   000073   A9F0         MOV       R1,B
   \   000075   74..         MOV       A,#(zgItemTable + 4) & 0xff
   \   000077   28           ADD       A,R0
   \   000078   F582         MOV       DPL,A
   \   00007A   74..         MOV       A,#((zgItemTable + 4) >> 8) & 0xff
   \   00007C   39           ADDC      A,R1
   \   00007D   F583         MOV       DPH,A
   \   00007F   E4           CLR       A
   \   000080   93           MOVC      A,@A+DPTR
   \   000081   FA           MOV       R2,A
   \   000082   7401         MOV       A,#0x1
   \   000084   93           MOVC      A,@A+DPTR
   \   000085   FB           MOV       R3,A
   \   000086   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000089   7403         MOV       A,#0x3
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
    616            }
    617          }
   \                     ??zgSetItem_2:
   \   00008E   7F03         MOV       R7,#0x3
   \   000090   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgQueuedPollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgResponsePollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRejoinPollRate>`:
   \   000000   B801         DW 440

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxDataRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxPollFailureRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultChannelList>`:
   \   000000   00080000     DD 2048

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultStartingScanDuratio`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStackProfile>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgIndirectMsgTimeout>`:
   \   000000   07           DB 7

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurePermitJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteDiscoveryTime>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteExpiryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxBcastRetires>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPassiveAckTimeout>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBcastDeliveryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConcentratorRadius>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkSrcRtgExpiryTime>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscMaxFrameRetries>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscAckWaitDurationPolled>`:
   \   000000   B80B         DW 3000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsAckWaitMultiplier>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsDefaultMaxBindingTime>`:
   \   000000   803E         DW 16000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsUseInsecureJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsNonMemberRadius>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgUseDefaultTCLK>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConfigPANID>`:
   \   000000   4545         DW 17733

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDeviceLogicalType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMinTransmissions>`:
   \   000000   14           DB 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSapiEndpoint>`:
   \   000000   E0           DB 224

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInitItems::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInitItems

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgReadStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgReadStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgWriteStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgWriteStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgSetItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgSetItem
    618          
    619          #ifndef NONWK
    620          /*********************************************************************
    621           * @fn       zgPreconfigKeyInit()
    622           *
    623           * @brief
    624           *
    625           *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
    626           *   write the system default (value passed in) into NV memory. But if
    627           *   it exists do not overwrite it.
    628           *
    629           *   Also, if setDefault is TRUE and the item exists, we will write
    630           *   the default value to NV space.
    631           *
    632           * @param   setDefault - TRUE to set default
    633           *
    634           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    635           *          exist in NV, NV_OPER_FAILED if failure.
    636           */
    637          static uint8 zgPreconfigKeyInit( uint8 setDefault )
    638          {
    639            uint8 zgPreConfigKey[SEC_KEY_LEN];
    640            uint8 status;
    641          
    642            // Initialize the Pre-Configured Key to the default key
    643            osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
    644          
    645            // If the item doesn't exist in NV memory, create and initialize it
    646            status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
    647            if ( status == ZSUCCESS )
    648            {
    649              if ( setDefault )
    650              {
    651                // Write the default value back to NV
    652                status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
    653              }
    654            }
    655          
    656            // clear local copy of default key
    657            osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    658          
    659            return (status);
    660          }
    661          #endif
    662          
    663          /*********************************************************************
    664          *********************************************************************/

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
      9   zgInit
        9   -> ZMacGetReq
        9   -> zgInitItems
        9   -> zgReadStartupOptions
        9   -> zgWriteStartupOptions
     27   zgInitItems
       16   -> osal_nv_item_init
       18   -> osal_nv_read
       18   -> osal_nv_write
     24   zgReadStartupOptions
       13   -> osal_nv_item_init
       15   -> osal_nv_read
     16   zgSetItem
       14   -> osal_memcpy
     24   zgWriteStartupOptions
       15   -> osal_nv_read
       15   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for zgApsAckWaitMultiplier>
       2  ?<Initializer for zgApsDefaultMaxBindingTime>
       1  ?<Initializer for zgApsNonMemberRadius>
       1  ?<Initializer for zgApsUseInsecureJoin>
       2  ?<Initializer for zgApscAckWaitDurationPolled>
       1  ?<Initializer for zgApscMaxFrameRetries>
       1  ?<Initializer for zgBcastDeliveryTime>
       1  ?<Initializer for zgConcentratorRadius>
       2  ?<Initializer for zgConfigPANID>
       4  ?<Initializer for zgDefaultChannelList>
       1  ?<Initializer for zgDefaultStartingScanDuratio
       1  ?<Initializer for zgDeviceLogicalType>
       1  ?<Initializer for zgIndirectMsgTimeout>
       1  ?<Initializer for zgMaxBcastRetires>
       1  ?<Initializer for zgMaxDataRetries>
       1  ?<Initializer for zgMaxPollFailureRetries>
       1  ?<Initializer for zgNwkMgrMinTransmissions>
       1  ?<Initializer for zgNwkMgrMode>
       1  ?<Initializer for zgNwkMode>
       1  ?<Initializer for zgNwkSrcRtgExpiryTime>
       1  ?<Initializer for zgPassiveAckTimeout>
       2  ?<Initializer for zgPollRate>
       2  ?<Initializer for zgQueuedPollRate>
       2  ?<Initializer for zgRejoinPollRate>
       2  ?<Initializer for zgResponsePollRate>
       1  ?<Initializer for zgRouteDiscoveryTime>
       1  ?<Initializer for zgRouteExpiryTime>
       1  ?<Initializer for zgSapiEndpoint>
       1  ?<Initializer for zgSecurePermitJoin>
       1  ?<Initializer for zgStackProfile>
       1  ?<Initializer for zgStartDelay>
       1  ?<Initializer for zgUseDefaultTCLK>
      12  ??Subroutine2_0
      10  ?Subroutine0
       7  ?Subroutine1
       1  zgApsAckWaitMultiplier
       2  zgApsDefaultMaxBindingTime
       1  zgApsNonMemberRadius
       8  zgApsUseExtendedPANID
       1  zgApsUseInsecureJoin
       2  zgApscAckWaitDurationPolled
       1  zgApscMaxFrameRetries
       1  zgBcastDeliveryTime
       1  zgConcentratorDiscoveryTime
       1  zgConcentratorEnable
       1  zgConcentratorRC
       1  zgConcentratorRadius
       2  zgConfigPANID
       4  zgDefaultChannelList
       1  zgDefaultStartingScanDuration
       1  zgDeviceLogicalType
       8  zgExtendedPANID
       1  zgIndirectMsgTimeout
      51  zgInit
       6  zgInit::?relay
     208  zgInitItems
       6  zgInitItems::?relay
       6  zgItemTable
       1  zgMaxBcastRetires
       1  zgMaxDataRetries
       1  zgMaxPollFailureRetries
       1  zgNwkMgrMinTransmissions
       1  zgNwkMgrMode
       1  zgNwkMode
       1  zgNwkSrcRtgExpiryTime
       1  zgPassiveAckTimeout
       2  zgPollRate
       1  zgPreConfigKeys
       2  zgQueuedPollRate
      75  zgReadStartupOptions
       6  zgReadStartupOptions::?relay
       2  zgRejoinPollRate
       2  zgResponsePollRate
       1  zgRouteDiscoveryTime
       1  zgRouteExpiryTime
       1  zgSapiEndpoint
       1  zgSecurePermitJoin
       1  zgSecurityMode
     147  zgSetItem
       6  zgSetItem::?relay
       1  zgStackProfile
       1  zgStartDelay
       2  zgTrustCenterAddr
       1  zgUseDefaultTCLK
     116  zgWriteStartupOptions
       6  zgWriteStartupOptions::?relay

 
 626 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   6 bytes in segment CODE_C
  42 bytes in segment XDATA_I
  42 bytes in segment XDATA_ID
  23 bytes in segment XDATA_Z
 
  78 bytes of CODE     memory
 626 bytes of HUGECODE memory
  65 bytes of XDATA    memory

Errors: none
Warnings: none
