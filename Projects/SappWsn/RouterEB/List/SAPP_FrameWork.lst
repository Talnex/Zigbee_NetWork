###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               14/Jul/2019  19:53:28
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\Source\SAPP_FrameWork.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWCE91.tmp
#        (D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\Source\SAPP_FrameWork.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -D SAPP_ZSTACK -lC
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\RouterEB\List
#        -lA
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x4545
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\ -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\Source\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\ZMain\TI2530DB\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\include\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\include\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\high_level\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mt\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\osal\include\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\saddr\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\sdata\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\af\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\nwk\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sapi\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sec\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sys\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\zdo\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\
#        -I
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\RouterEB\List\SAPP_FrameWork.lst
#    Object file        =  
#        D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\RouterEB\Obj\SAPP_FrameWork.r51
#
###############################################################################

D:\课设勿动\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\Source\SAPP_FrameWork.c
      1          #if defined(SAPP_ZSTACK)
      2          #include "SAPP_FrameWork.h"
      3          #include <string.h>
      4          
      5          /*********************************************************************
      6           * FUNCTIONS
      7           *********************************************************************/
      8          static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep);
      9          #if defined(ZDO_COORDINATOR)
     10          static uint8 uartMsgProcesser(uint8 *msg);
     11          #endif
     12          static uint8 uartMsgProcesser1(uint8 *msg);
     13          
     14          /*********************************************************************
     15           * Local Variables
     16           *********************************************************************/
     17          //uint8 ctrlBuffer[sizeof(TOPOINFO) + sizeof(FUNCTABLE) + FUNC_NUM * sizeof(FUNCINFO)];

   \                                 In  segment XDATA_I, align 1, keep-with-next
     18          static TOPOINFO topoBuffer = { 0x02 };
   \                     topoBuffer:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for topoBuffer>`
   \   00000E                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     19          FUNCTABLE *funcTableBuffer;// = (FUNCTABLE *)(&ctrlBuffer[sizeof(TOPOINFO)]);
   \                     funcTableBuffer:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     20          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          static devStates_t curNwkState;
   \                     curNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          static uint8 controlTaskId;
   \                     controlTaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     23          static uint8 functionTaskId;
   \                     functionTaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     24          static struct ep_info_t controlEndPointInfo;
   \                     controlEndPointInfo:
   \   000000                DS 33
   \   000021                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     25          static uint8 isUserTimerRunning = 0;
   \                     isUserTimerRunning:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     26          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     27          void sapp_taskInitProcess(void)
   \                     sapp_taskInitProcess:
     28          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     29           #if defined ( BUILD_ALL_DEVICES )
     30              // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
     31              // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
     32              // together - if they are - we will start up a coordinator. Otherwise,
     33              // the device will start as a router.
     34              if ( readCoordinatorJumper() )
     35                  zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
     36              else
     37                  zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
     38          #endif // BUILD_ALL_DEVICES
     39          
     40          #if defined ( HOLD_AUTO_START )
     41              // HOLD_AUTO_START is a compile option that will surpress ZDApp
     42              //  from starting the device and wait for the application to
     43              //  start the device.
     44              ZDOInitDevice(0);
     45          #endif
     46          
     47              // 构造功能列表
     48              funcTableBuffer = createFuncTable(funcCount);
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   90....       MOV       DPTR,#funcCount
   \   000008   E0           MOVX      A,@DPTR
   \   000009   75F003       MOV       B,#0x3
   \   00000C   A4           MUL       AB
   \   00000D   A9F0         MOV       R1,B
   \   00000F   2402         ADD       A,#0x2
   \   000011   FA           MOV       R2,A
   \   000012   E4           CLR       A
   \   000013   39           ADDC      A,R1
   \   000014   FB           MOV       R3,A
   \   000015   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000018   90....       MOV       DPTR,#funcTableBuffer
   \   00001B   EA           MOV       A,R2
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   EB           MOV       A,R3
   \   00001F   F0           MOVX      @DPTR,A
     49              funcTableBuffer->ft_type = 0x01;
   \   000020   F583         MOV       DPH,A
   \   000022   8A82         MOV       DPL,R2
   \   000024   7401         MOV       A,#0x1
   \   000026   F0           MOVX      @DPTR,A
     50              funcTableBuffer->ft_count = funcCount;
   \   000027   90....       MOV       DPTR,#funcCount
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   C0E0         PUSH      A
   \   00002D   90....       MOV       DPTR,#funcTableBuffer
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000035   A3           INC       DPTR
   \   000036   D0E0         POP       A
   \   000038   F0           MOVX      @DPTR,A
     51              int i;
     52              for(i = 0; i < funcCount; i++)
   \   000039   7E00         MOV       R6,#0x0
   \   00003B   7F00         MOV       R7,#0x0
   \   00003D   804F         SJMP      ??sapp_taskInitProcess_0
     53              {
     54                  funcTableBuffer->ft_list[i].type = funcList[i].function.type;
   \                     ??sapp_taskInitProcess_1:
   \   00003F   12....       LCALL     ?Subroutine16 & 0xFFFF
     55                  funcTableBuffer->ft_list[i].id = funcList[i].function.id;
     56                  funcTableBuffer->ft_list[i].cycle = funcList[i].function.cycle;
     57              }
   \                     ??CrossCallReturnLabel_49:
   \   000042   F8           MOV       R0,A
   \   000043   74..         MOV       A,#(funcList >> 8) & 0xff
   \   000045   39           ADDC      A,R1
   \   000046   F9           MOV       R1,A
   \   000047   E8           MOV       A,R0
   \   000048   FA           MOV       R2,A
   \   000049   E9           MOV       A,R1
   \   00004A   FB           MOV       R3,A
   \   00004B   EE           MOV       A,R6
   \   00004C   F8           MOV       R0,A
   \   00004D   EF           MOV       A,R7
   \   00004E   F9           MOV       R1,A
   \   00004F   E8           MOV       A,R0
   \   000050   75F003       MOV       B,#0x3
   \   000053   A4           MUL       AB
   \   000054   F8           MOV       R0,A
   \   000055   ACF0         MOV       R4,B
   \   000057   75F003       MOV       B,#0x3
   \   00005A   E9           MOV       A,R1
   \   00005B   A4           MUL       AB
   \   00005C   2C           ADD       A,R4
   \   00005D   F9           MOV       R1,A
   \   00005E   8A82         MOV       DPL,R2
   \   000060   8B83         MOV       DPH,R3
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   C0E0         PUSH      A
   \   00006D   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000070   D0E0         POP       A
   \   000072   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000075   E0           MOVX      A,@DPTR
   \   000076   C0E0         PUSH      A
   \   000078   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00007B   A3           INC       DPTR
   \   00007C   D0E0         POP       A
   \   00007E   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000081   C0E0         PUSH      A
   \   000083   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000086   D0E0         POP       A
   \   000088   F0           MOVX      @DPTR,A
   \   000089   0E           INC       R6
   \   00008A   EE           MOV       A,R6
   \   00008B   7001         JNZ       ??sapp_taskInitProcess_0
   \   00008D   0F           INC       R7
   \                     ??sapp_taskInitProcess_0:
   \   00008E   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000091   40AC         JC        ??sapp_taskInitProcess_1
     58              controlTaskId = tasksCnt - 2;
   \   000093   90....       MOV       DPTR,#tasksCnt
   \   000096   E0           MOVX      A,@DPTR
   \   000097   24FE         ADD       A,#-0x2
   \   000099   90....       MOV       DPTR,#controlTaskId
   \   00009C   F0           MOVX      @DPTR,A
     59              functionTaskId = tasksCnt - 1;
   \   00009D   90....       MOV       DPTR,#tasksCnt
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   14           DEC       A
   \   0000A2   90....       MOV       DPTR,#functionTaskId
   \   0000A5   F0           MOVX      @DPTR,A
     60              HalIOInit(functionTaskId);
   \   0000A6                ; Setup parameters for call to function HalIOInit
   \   0000A6   F9           MOV       R1,A
   \   0000A7   12....       LCALL     `??HalIOInit::?relay`; Banked call to: HalIOInit
     61              createEndPoint(&controlEndPointInfo, &controlTaskId, CONTROL_ENDPOINT);
   \   0000AA                ; Setup parameters for call to function createEndPoint
   \   0000AA   79F0         MOV       R1,#-0x10
   \   0000AC   7C..         MOV       R4,#controlTaskId & 0xff
   \   0000AE   7D..         MOV       R5,#(controlTaskId >> 8) & 0xff
   \   0000B0   7A..         MOV       R2,#controlEndPointInfo & 0xff
   \   0000B2   7B..         MOV       R3,#(controlEndPointInfo >> 8) & 0xff
   \   0000B4   12....       LCALL     `??createEndPoint::?relay`; Banked call to: createEndPoint
     62              for(i = 0; i < funcCount; i++)
   \   0000B7   7E00         MOV       R6,#0x0
   \   0000B9   7F00         MOV       R7,#0x0
   \   0000BB   8038         SJMP      ??sapp_taskInitProcess_2
     63              {
     64                  struct ep_info_t *ep = &funcList[i];
   \                     ??sapp_taskInitProcess_3:
   \   0000BD   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000C0   F5..         MOV       ?V0,A
   \   0000C2   74..         MOV       A,#(funcList >> 8) & 0xff
   \   0000C4   39           ADDC      A,R1
   \   0000C5   F5..         MOV       ?V1,A
     65                  createEndPoint(ep, &functionTaskId, i + 1);
   \   0000C7                ; Setup parameters for call to function createEndPoint
   \   0000C7   EE           MOV       A,R6
   \   0000C8   04           INC       A
   \   0000C9   F9           MOV       R1,A
   \   0000CA   7C..         MOV       R4,#functionTaskId & 0xff
   \   0000CC   7D..         MOV       R5,#(functionTaskId >> 8) & 0xff
   \   0000CE   AA..         MOV       R2,?V0
   \   0000D0   AB..         MOV       R3,?V1
   \   0000D2   12....       LCALL     `??createEndPoint::?relay`; Banked call to: createEndPoint
     66                  if(ep->res_available)
   \   0000D5   85..82       MOV       DPL,?V0
   \   0000D8   85..83       MOV       DPH,?V1
   \   0000DB   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000DE   6010         JZ        ??sapp_taskInitProcess_4
     67                    (*ep->res_available)(ep, ResInit, NULL);
   \   0000E0                ; Setup parameters for indirect call
   \   0000E0   7C00         MOV       R4,#0x0
   \   0000E2   7D00         MOV       R5,#0x0
   \   0000E4   7901         MOV       R1,#0x1
   \   0000E6   AA..         MOV       R2,?V0
   \   0000E8   AB..         MOV       R3,?V1
   \   0000EA   12....       LCALL     ?Subroutine6 & 0xFFFF
     68              }
   \                     ??CrossCallReturnLabel_58:
   \   0000ED   12....       LCALL     ?CALL_IND
   \                     ??sapp_taskInitProcess_4:
   \   0000F0   0E           INC       R6
   \   0000F1   EE           MOV       A,R6
   \   0000F2   7001         JNZ       ??sapp_taskInitProcess_2
   \   0000F4   0F           INC       R7
   \                     ??sapp_taskInitProcess_2:
   \   0000F5   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000F8   40C3         JC        ??sapp_taskInitProcess_3
     69          //#if defined(ZDO_COORDINATOR)// || defined(RTR_NWK)
     70          //    RegisterForKeys( SampleApp_TaskID );
     71              MT_UartRegisterTaskID(controlTaskId);
   \   0000FA                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   0000FA   90....       MOV       DPTR,#controlTaskId
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F9           MOV       R1,A
   \   0000FF   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
     72          //#endif
     73          }
   \   000102                REQUIRE ?Subroutine0
   \   000102                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   EE           MOV       A,R6
   \   000001   F8           MOV       R0,A
   \   000002   EF           MOV       A,R7
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   75F021       MOV       B,#0x21
   \   000008   A4           MUL       AB
   \   000009   F8           MOV       R0,A
   \   00000A   AAF0         MOV       R2,B
   \   00000C   75F021       MOV       B,#0x21
   \   00000F   E9           MOV       A,R1
   \   000010                REQUIRE ??Subroutine30_0
   \   000010                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   A4           MUL       AB
   \   000001   2A           ADD       A,R2
   \   000002   F9           MOV       R1,A
   \   000003   74..         MOV       A,#funcList & 0xff
   \   000005   28           ADD       A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV       DPTR,#funcTableBuffer
   \   000003   E0           MOVX      A,@DPTR
   \   000004   28           ADD       A,R0
   \   000005   FC           MOV       R4,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   39           ADDC      A,R1
   \   000009   8C82         MOV       DPL,R4
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV       DPTR,#funcCount
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   C3           CLR       C
   \   000006   EE           MOV       A,R6
   \   000007   98           SUBB      A,R0
   \   000008   EF           MOV       A,R7
   \   000009   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV       DPTR,#funcTableBuffer
   \   000003   E0           MOVX      A,@DPTR
   \   000004   28           ADD       A,R0
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   39           ADDC      A,R1
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A                REQUIRE ??Subroutine31_0
   \   00000A                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine33_0
   \   000002                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine34_0
   \   000002                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine35_0
   \   000002                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   9400         SUBB      A,#0x0
   \   000002   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000004   65D0         XRL       A,PSW
   \   000006   33           RLC       A
   \   000007   22           RET
     74          /*********************************************************************
     75           * LOCAL FUNCTIONS
     76           */
     77          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     78          static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep)
   \                     createEndPoint:
     79          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
     80              static cId_t commonClusterId = SAPP_PERIODIC_CLUSTERID;
     81              // Fill out the endpoint description.
     82              epInfo->task_id = *task_id;
   \   000007   8C82         MOV       DPL,R4
   \   000009   8D83         MOV       DPH,R5
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   C0E0         PUSH      A
   \   00000E   EA           MOV       A,R2
   \   00000F   240C         ADD       A,#0xc
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3B           ADDC      A,R3
   \   000015   F583         MOV       DPH,A
   \   000017   D0E0         POP       A
   \   000019   F0           MOVX      @DPTR,A
     83              epInfo->ep = ep;
   \   00001A   EA           MOV       A,R2
   \   00001B   240B         ADD       A,#0xb
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   3B           ADDC      A,R3
   \   000021   F583         MOV       DPH,A
   \   000023   E9           MOV       A,R1
   \   000024   12....       LCALL     ?Subroutine14 & 0xFFFF
     84              epInfo->timerTick = epInfo->function.cycle;
   \                     ??CrossCallReturnLabel_16:
   \   000027   C0E0         PUSH      A
   \   000029   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00002C   D0E0         POP       A
   \   00002E   F0           MOVX      @DPTR,A
     85              epInfo->userTimer = 0;
   \   00002F   12....       LCALL     ?Subroutine19 & 0xFFFF
     86          
     87              epInfo->simpleDesc.EndPoint = ep;
   \                     ??CrossCallReturnLabel_24:
   \   000032   EA           MOV       A,R2
   \   000033   2415         ADD       A,#0x15
   \   000035   F5..         MOV       ?V0,A
   \   000037   E4           CLR       A
   \   000038   3B           ADDC      A,R3
   \   000039   F5..         MOV       ?V1,A
   \   00003B   E9           MOV       A,R1
   \   00003C   85..82       MOV       DPL,?V0
   \   00003F   85..83       MOV       DPH,?V1
   \   000042   F0           MOVX      @DPTR,A
     88              epInfo->simpleDesc.AppProfId = SAPP_PROFID;
   \   000043   EA           MOV       A,R2
   \   000044   2416         ADD       A,#0x16
   \   000046   F582         MOV       DPL,A
   \   000048   E4           CLR       A
   \   000049   3B           ADDC      A,R3
   \   00004A   F583         MOV       DPH,A
   \   00004C   7408         MOV       A,#0x8
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   740F         MOV       A,#0xf
   \   000052   F0           MOVX      @DPTR,A
     89              epInfo->simpleDesc.AppDeviceId = SAPP_DEVICEID;
   \   000053   EA           MOV       A,R2
   \   000054   2418         ADD       A,#0x18
   \   000056   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000059   A3           INC       DPTR
   \   00005A   E4           CLR       A
   \   00005B   F0           MOVX      @DPTR,A
     90              epInfo->simpleDesc.AppDevVer = SAPP_DEVICE_VERSION;
     91              epInfo->simpleDesc.Reserved = 0;
   \   00005C   EA           MOV       A,R2
   \   00005D   241A         ADD       A,#0x1a
   \   00005F   F582         MOV       DPL,A
   \   000061   E4           CLR       A
   \   000062   3B           ADDC      A,R3
   \   000063   F583         MOV       DPH,A
   \   000065   E4           CLR       A
   \   000066   F0           MOVX      @DPTR,A
     92              epInfo->simpleDesc.AppNumInClusters = 1;
   \   000067   EA           MOV       A,R2
   \   000068   241B         ADD       A,#0x1b
   \   00006A   12....       LCALL     ?Subroutine20 & 0xFFFF
     93              epInfo->simpleDesc.pAppInClusterList = &commonClusterId;
   \                     ??CrossCallReturnLabel_27:
   \   00006D   EA           MOV       A,R2
   \   00006E   241C         ADD       A,#0x1c
   \   000070   12....       LCALL     ?Subroutine18 & 0xFFFF
     94              epInfo->simpleDesc.AppNumOutClusters = 1;
   \                     ??CrossCallReturnLabel_22:
   \   000073   241E         ADD       A,#0x1e
   \   000075   12....       LCALL     ?Subroutine20 & 0xFFFF
     95              epInfo->simpleDesc.pAppOutClusterList = &commonClusterId;
   \                     ??CrossCallReturnLabel_28:
   \   000078   EA           MOV       A,R2
   \   000079   241F         ADD       A,#0x1f
   \   00007B   12....       LCALL     ?Subroutine18 & 0xFFFF
     96          
     97              epInfo->SampleApp_epDesc.endPoint = ep;
   \                     ??CrossCallReturnLabel_23:
   \   00007E   240F         ADD       A,#0xf
   \   000080   F8           MOV       R0,A
   \   000081   E4           CLR       A
   \   000082   3B           ADDC      A,R3
   \   000083   F9           MOV       R1,A
   \   000084   EE           MOV       A,R6
   \   000085   8882         MOV       DPL,R0
   \   000087   8983         MOV       DPH,R1
   \   000089   F0           MOVX      @DPTR,A
     98              epInfo->SampleApp_epDesc.task_id = task_id;
   \   00008A   EA           MOV       A,R2
   \   00008B   2410         ADD       A,#0x10
   \   00008D   F582         MOV       DPL,A
   \   00008F   E4           CLR       A
   \   000090   3B           ADDC      A,R3
   \   000091   F583         MOV       DPH,A
   \   000093   EC           MOV       A,R4
   \   000094   F0           MOVX      @DPTR,A
   \   000095   A3           INC       DPTR
   \   000096   ED           MOV       A,R5
   \   000097   F0           MOVX      @DPTR,A
     99              epInfo->SampleApp_epDesc.simpleDesc = &epInfo->simpleDesc;
   \   000098   EA           MOV       A,R2
   \   000099   2412         ADD       A,#0x12
   \   00009B   F582         MOV       DPL,A
   \   00009D   E4           CLR       A
   \   00009E   3B           ADDC      A,R3
   \   00009F   F583         MOV       DPH,A
   \   0000A1   E5..         MOV       A,?V0
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E5..         MOV       A,?V1
   \   0000A7   F0           MOVX      @DPTR,A
    100              epInfo->SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   0000A8   EA           MOV       A,R2
   \   0000A9   2414         ADD       A,#0x14
   \   0000AB   F582         MOV       DPL,A
   \   0000AD   E4           CLR       A
   \   0000AE   3B           ADDC      A,R3
   \   0000AF   F583         MOV       DPH,A
   \   0000B1   E4           CLR       A
   \   0000B2   F0           MOVX      @DPTR,A
    101          
    102              // Register the endpoint description with the AF
    103              afRegister(&epInfo->SampleApp_epDesc);
   \   0000B3                ; Setup parameters for call to function afRegister
   \   0000B3   E8           MOV       A,R0
   \   0000B4   FA           MOV       R2,A
   \   0000B5   E9           MOV       A,R1
   \   0000B6   FB           MOV       R3,A
   \   0000B7   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    104          }
   \   0000BA   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3B           ADDC      A,R3
   \   000004   F583         MOV       DPH,A
   \   000006   7401         MOV       A,#0x1
   \   000008   F0           MOVX      @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3B           ADDC      A,R3
   \   000004   F583         MOV       DPH,A
   \   000006   74..         MOV       A,#??commonClusterId & 0xff
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   74..         MOV       A,#(??commonClusterId >> 8) & 0xff
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   EA           MOV       A,R2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EA           MOV       A,R2
   \   000001   240E         ADD       A,#0xe
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EA           MOV       A,R2
   \   000001   240D         ADD       A,#0xd
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??commonClusterId:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for commonClusterId>`
   \   000002                REQUIRE __INIT_XDATA_I
    105          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          uint16 sapp_controlEpProcess(uint8 task_id, uint16 events)
   \                     sapp_controlEpProcess:
    107          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
    108              afIncomingMSGPacket_t *MSGpkt;
    109          
    110              if ( events & SYS_EVENT_MSG )
   \   000010   EB           MOV       A,R3
   \   000011   5480         ANL       A,#0x80
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??sapp_controlEpProcess_0 & 0xFFFF
    111              {
    112                  //HalLedBlink( HAL_LED_1, 2, 50, 90 );
    113                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(task_id);
   \   000018                ; Setup parameters for call to function osal_msg_receive
   \   000018   02....       LJMP      ??sapp_controlEpProcess_1 & 0xFFFF
    114                  while ( MSGpkt )
    115                  {
    116                      //HalUARTWrite(0, &MSGpkt->hdr.event,1);
    117                      switch ( MSGpkt->hdr.event )
    118                      {
    119          #if defined(ZDO_COORDINATOR)
    120                      case CMD_SERIAL_MSG:
    121                          uartMsgProcesser((uint8 *)MSGpkt);
    122                          HalLedBlink( HAL_LED_1, 2, 50, 90 );
    123                          break;
    124          #endif
    125          
    126          #if ! defined(ZDO_COORDINATOR) && defined(RTR_NWK)
    127                      case CMD_SERIAL_MSG:
    128                          uartMsgProcesser1((uint8 *)MSGpkt);
    129                          HalLedBlink( HAL_LED_1, 2, 50, 90 );
    130                          break;
    131          #endif
    132                          // Received when a messages is received (OTA) for this endpoint
    133                      case AF_INCOMING_MSG_CMD:
    134                      {
    135                          // TODO: QueryProfile or QueryTopo
    136                          switch(MSGpkt->clusterId)
    137                          {
    138                          case SAPP_PERIODIC_CLUSTERID:
    139                              switch(MSGpkt->cmd.Data[0])
    140                              {
    141                              case 0x01:
    142                                  // CtrlQueryProfile
    143                                  // 获取到数据包的来源地址来当做发送数据的目标
    144                                  SendData(CONTROL_ENDPOINT, funcTableBuffer->ft_data, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(FUNCTABLE) + funcCount * sizeof(FUNCINFO));
    145                                  break;
    146                              case 0x02:
    147                                  // CtrlQueryTopo
    148                                  // 获取到数据包的来源地址来当做发送数据的目标
    149                                  SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(TOPOINFO));
    150                                  break;
    151                              case 0x03:
    152                                  // CtrlQuerySpecialFunction
    153                                  // cmd.Data[0] = 3, cmd.Data[1] = funcCode, cmd.Data[2] = funcID
    154                                  {
    155                                      uint8 i;
    156                                      for(i = 0; i < funcTableBuffer->ft_count; i++)
    157                                      {
    158                                          if((funcTableBuffer->ft_list[i].type == MSGpkt->cmd.Data[1])
    159                                             && (funcTableBuffer->ft_list[i].id == MSGpkt->cmd.Data[2]))
    160                                          {
    161                                              // 0x03, EndPoint, rCycle
    162                                              uint8 specialFunc[3] = { 0x03, i + 1, funcTableBuffer->ft_list[i].cycle };
    163                                              SendData(CONTROL_ENDPOINT, specialFunc, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(specialFunc));
    164                                              break;
    165                                          }
    166                                      }
    167                                  }
    168                                  break;
    169                              default:
    170                                  {
    171                                      int i;
    172                                      for(i = 0; i < funcCount; i++)
    173                                      {
    174                                          struct ep_info_t *ep = &funcList[i];
    175                                          if(ep->res_available)   (*ep->res_available)(ep, ResControlPkg, MSGpkt);
    176                                      }
    177                                  }
    178                                  break;
    179                              }
    180                              HalLedBlink( HAL_LED_2, 1, 50, 250 );
    181                              break;
    182                          }
    183                          break;
    184                      }
    185                      // Received whenever the device changes state in the network
    186                      case ZDO_STATE_CHANGE:
    187                      {
    188                          devStates_t st = (devStates_t)(MSGpkt->hdr.status);
   \                     ??sapp_controlEpProcess_2:
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F8           MOV       R0,A
    189                          if ( (st == DEV_ZB_COORD)
    190                                  || (st == DEV_ROUTER)
    191                                  || (st == DEV_END_DEVICE) )
   \   00001E   7409         MOV       A,#0x9
   \   000020   68           XRL       A,R0
   \   000021   600D         JZ        ??sapp_controlEpProcess_3
   \   000023   7407         MOV       A,#0x7
   \   000025   68           XRL       A,R0
   \   000026   6008         JZ        ??sapp_controlEpProcess_3
   \   000028   7406         MOV       A,#0x6
   \   00002A   68           XRL       A,R0
   \   00002B   6003         JZ        $+5
   \   00002D   02....       LJMP      ??sapp_controlEpProcess_4 & 0xFFFF
    192                          {
    193          //                    topoBuffer->type = 0x02;
    194                              memcpy(topoBuffer.IEEE, NLME_GetExtAddr(), 8);
   \                     ??sapp_controlEpProcess_3:
   \   000030                ; Setup parameters for call to function NLME_GetExtAddr
   \   000030   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000033   8A..         MOV       ?V0,R2
   \   000035   8B..         MOV       ?V1,R3
   \   000037   AC..         MOV       R4,?V0
   \   000039   AD..         MOV       R5,?V1
   \   00003B                ; Setup parameters for call to function memcpy
   \   00003B   75..08       MOV       ?V0,#0x8
   \   00003E   75..00       MOV       ?V1,#0x0
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7A..         MOV       R2,#(topoBuffer + 1) & 0xff
   \   000048   7B..         MOV       R3,#((topoBuffer + 1) >> 8) & 0xff
   \   00004A   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   00004D   7402         MOV       A,#0x2
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
    195          #if !defined(ZDO_COORDINATOR)
    196                              topoBuffer.PAddr = NLME_GetCoordShortAddr();
   \   000052                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000052   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000055   90....       MOV       DPTR,#topoBuffer + 9
   \   000058   EA           MOV       A,R2
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   A3           INC       DPTR
   \   00005B   EB           MOV       A,R3
   \   00005C   F0           MOVX      @DPTR,A
    197          #else
    198                              topoBuffer.PAddr = 0xFFFF;
    199          #endif
    200                              osal_memcpy(&topoBuffer.panid, &_NIB.nwkPanId, sizeof(uint16));
   \   00005D                ; Setup parameters for call to function osal_memcpy
   \   00005D   75....       MOV       ?V0,#(_NIB + 33) & 0xff
   \   000060   75....       MOV       ?V1,#((_NIB + 33) >> 8) & 0xff
   \   000063   75..00       MOV       ?V2,#0x0
   \   000066   78..         MOV       R0,#?V0
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006B   7C02         MOV       R4,#0x2
   \   00006D   7D00         MOV       R5,#0x0
   \   00006F   7A..         MOV       R2,#(topoBuffer + 11) & 0xff
   \   000071   7B..         MOV       R3,#((topoBuffer + 11) >> 8) & 0xff
   \   000073   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000076   7403         MOV       A,#0x3
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
    201                              osal_memcpy(&topoBuffer.channel, &_NIB.nwkLogicalChannel, sizeof(uint8));
   \   00007B                ; Setup parameters for call to function osal_memcpy
   \   00007B   75....       MOV       ?V0,#(_NIB + 22) & 0xff
   \   00007E   75....       MOV       ?V1,#((_NIB + 22) >> 8) & 0xff
   \   000081   78..         MOV       R0,#?V0
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000086   7C01         MOV       R4,#0x1
   \   000088   7D00         MOV       R5,#0x0
   \   00008A   7A..         MOV       R2,#(topoBuffer + 13) & 0xff
   \   00008C   7B..         MOV       R3,#((topoBuffer + 13) >> 8) & 0xff
   \   00008E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000091   7403         MOV       A,#0x3
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
    202                              //向协调器发送拓扑信息
    203                              SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO));
   \   000096                ; Setup parameters for call to function SendData
   \   000096   75..0E       MOV       ?V0,#0xe
   \   000099   78..         MOV       R0,#?V0
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009E   75..01       MOV       ?V0,#0x1
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A6   7C00         MOV       R4,#0x0
   \   0000A8   7D00         MOV       R5,#0x0
   \   0000AA   7A..         MOV       R2,#topoBuffer & 0xff
   \   0000AC   7B..         MOV       R3,#(topoBuffer >> 8) & 0xff
   \   0000AE   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
    204                              HalLedBlink( HAL_LED_2, 4, 50, 250 );
   \   0000B4                ; Setup parameters for call to function HalLedBlink
   \   0000B4   7CFA         MOV       R4,#-0x6
   \   0000B6   7D00         MOV       R5,#0x0
   \   0000B8   7B32         MOV       R3,#0x32
   \   0000BA   7A04         MOV       R2,#0x4
   \                     ??sapp_controlEpProcess_5:
   \   0000BC   7902         MOV       R1,#0x2
   \                     ??sapp_controlEpProcess_6:
   \   0000BE   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    205                          }
    206                      }
    207                      break;
    208                      default:
    209                          break;
    210                      }
    211                      // Release the memory
    212                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??sapp_controlEpProcess_4:
   \   0000C1                ; Setup parameters for call to function osal_msg_deallocate
   \   0000C1   EE           MOV       A,R6
   \   0000C2   FA           MOV       R2,A
   \   0000C3   EF           MOV       A,R7
   \   0000C4   FB           MOV       R3,A
   \   0000C5   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    213                      // Next - if one is available
    214                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   0000C8                ; Setup parameters for call to function osal_msg_receive
   \   0000C8   A9..         MOV       R1,?V3
   \                     ??sapp_controlEpProcess_1:
   \   0000CA   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   0000CD   8A..         MOV       ?V0,R2
   \   0000CF   8B..         MOV       ?V1,R3
   \   0000D1   AE..         MOV       R6,?V0
   \   0000D3   AF..         MOV       R7,?V1
   \   0000D5   EE           MOV       A,R6
   \   0000D6   4F           ORL       A,R7
   \   0000D7   7003         JNZ       $+5
   \   0000D9   02....       LJMP      ??sapp_controlEpProcess_7 & 0xFFFF
   \   0000DC   8E82         MOV       DPL,R6
   \   0000DE   8F83         MOV       DPH,R7
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   14           DEC       A
   \   0000E2   600D         JZ        ??sapp_controlEpProcess_8
   \   0000E4   24E7         ADD       A,#-0x19
   \   0000E6   6067         JZ        ??sapp_controlEpProcess_9
   \   0000E8   2449         ADD       A,#0x49
   \   0000EA   7003         JNZ       $+5
   \   0000EC   02....       LJMP      ??sapp_controlEpProcess_2 & 0xFFFF
   \   0000EF   80D0         SJMP      ??sapp_controlEpProcess_4
   \                     ??sapp_controlEpProcess_8:
   \   0000F1   7800         MOV       R0,#0x0
   \   0000F3   A3           INC       DPTR
   \   0000F4   A3           INC       DPTR
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   FA           MOV       R2,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   FB           MOV       R3,A
   \                     ??sapp_controlEpProcess_10:
   \   0000FA   88..         MOV       ?V2,R0
   \   0000FC   7401         MOV       A,#0x1
   \   0000FE   28           ADD       A,R0
   \   0000FF   F8           MOV       R0,A
   \   000100   AC..         MOV       R4,?V2
   \   000102   EA           MOV       A,R2
   \   000103   2C           ADD       A,R4
   \   000104   F582         MOV       DPL,A
   \   000106   E4           CLR       A
   \   000107   3B           ADDC      A,R3
   \   000108   F583         MOV       DPH,A
   \   00010A   A3           INC       DPTR
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   640A         XRL       A,#0xa
   \   00010E   600D         JZ        ??sapp_controlEpProcess_11
   \   000110   8A82         MOV       DPL,R2
   \   000112   8B83         MOV       DPH,R3
   \   000114   A3           INC       DPTR
   \   000115   A3           INC       DPTR
   \   000116   E0           MOVX      A,@DPTR
   \   000117   F9           MOV       R1,A
   \   000118   E8           MOV       A,R0
   \   000119   C3           CLR       C
   \   00011A   99           SUBB      A,R1
   \   00011B   40DD         JC        ??sapp_controlEpProcess_10
   \                     ??sapp_controlEpProcess_11:
   \   00011D                ; Setup parameters for call to function SendData
   \   00011D   E8           MOV       A,R0
   \   00011E   F5..         MOV       ?V0,A
   \   000120   78..         MOV       R0,#?V0
   \   000122   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000125   75..01       MOV       ?V0,#0x1
   \   000128   78..         MOV       R0,#?V0
   \   00012A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012D   7C00         MOV       R4,#0x0
   \   00012F   7D00         MOV       R5,#0x0
   \   000131   8A82         MOV       DPL,R2
   \   000133   8B83         MOV       DPH,R3
   \   000135   A3           INC       DPTR
   \   000136   AA82         MOV       R2,DPL
   \   000138   AB83         MOV       R3,DPH
   \   00013A   7901         MOV       R1,#0x1
   \   00013C   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00013F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000142                ; Setup parameters for call to function HalLedBlink
   \   000142   7C5A         MOV       R4,#0x5a
   \   000144   7D00         MOV       R5,#0x0
   \   000146   7B32         MOV       R3,#0x32
   \   000148   7A02         MOV       R2,#0x2
   \   00014A   7901         MOV       R1,#0x1
   \   00014C   02....       LJMP      ??sapp_controlEpProcess_6 & 0xFFFF
   \                     ??sapp_controlEpProcess_9:
   \   00014F   A3           INC       DPTR
   \   000150   A3           INC       DPTR
   \   000151   A3           INC       DPTR
   \   000152   A3           INC       DPTR
   \   000153   E0           MOVX      A,@DPTR
   \   000154   6401         XRL       A,#0x1
   \   000156   7002         JNZ       ??sapp_controlEpProcess_12
   \   000158   A3           INC       DPTR
   \   000159   E0           MOVX      A,@DPTR
   \                     ??sapp_controlEpProcess_12:
   \   00015A   6003         JZ        $+5
   \   00015C   02....       LJMP      ??sapp_controlEpProcess_4 & 0xFFFF
   \   00015F   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000162   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000165   E0           MOVX      A,@DPTR
   \   000166   14           DEC       A
   \   000167   6009         JZ        ??sapp_controlEpProcess_13
   \   000169   14           DEC       A
   \   00016A   602B         JZ        ??sapp_controlEpProcess_14
   \   00016C   14           DEC       A
   \   00016D   6040         JZ        ??sapp_controlEpProcess_15
   \   00016F   02....       LJMP      ??sapp_controlEpProcess_16 & 0xFFFF
   \                     ??sapp_controlEpProcess_13:
   \   000172                ; Setup parameters for call to function SendData
   \   000172   75F003       MOV       B,#0x3
   \   000175   90....       MOV       DPTR,#funcCount
   \   000178   E0           MOVX      A,@DPTR
   \   000179   A4           MUL       AB
   \   00017A   2402         ADD       A,#0x2
   \   00017C   F5..         MOV       ?V0,A
   \   00017E   78..         MOV       R0,#?V0
   \   000180   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000183   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000186   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000189   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00018C   90....       MOV       DPTR,#funcTableBuffer
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   FA           MOV       R2,A
   \   000191   A3           INC       DPTR
   \   000192   E0           MOVX      A,@DPTR
   \   000193   FB           MOV       R3,A
   \   000194   02....       LJMP      ??sapp_controlEpProcess_17 & 0xFFFF
   \                     ??sapp_controlEpProcess_14:
   \   000197                ; Setup parameters for call to function SendData
   \   000197   75..0E       MOV       ?V0,#0xe
   \   00019A   78..         MOV       R0,#?V0
   \   00019C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019F   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0001A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A5   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0001A8   7A..         MOV       R2,#topoBuffer & 0xff
   \   0001AA   7B..         MOV       R3,#(topoBuffer >> 8) & 0xff
   \   0001AC   02....       LJMP      ??sapp_controlEpProcess_17 & 0xFFFF
   \                     ??sapp_controlEpProcess_15:
   \   0001AF   7A00         MOV       R2,#0x0
   \   0001B1   8001         SJMP      ??sapp_controlEpProcess_18
   \                     ??sapp_controlEpProcess_19:
   \   0001B3   0A           INC       R2
   \                     ??sapp_controlEpProcess_18:
   \   0001B4   90....       MOV       DPTR,#funcTableBuffer
   \   0001B7   E0           MOVX      A,@DPTR
   \   0001B8   F8           MOV       R0,A
   \   0001B9   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0001BC   A3           INC       DPTR
   \   0001BD   E0           MOVX      A,@DPTR
   \   0001BE   F8           MOV       R0,A
   \   0001BF   EA           MOV       A,R2
   \   0001C0   C3           CLR       C
   \   0001C1   98           SUBB      A,R0
   \   0001C2   4003         JC        $+5
   \   0001C4   02....       LJMP      ??sapp_controlEpProcess_20 & 0xFFFF
   \   0001C7   EA           MOV       A,R2
   \   0001C8   75F003       MOV       B,#0x3
   \   0001CB   A4           MUL       AB
   \   0001CC   F8           MOV       R0,A
   \   0001CD   A9F0         MOV       R1,B
   \   0001CF   90....       MOV       DPTR,#funcTableBuffer
   \   0001D2   E0           MOVX      A,@DPTR
   \   0001D3   28           ADD       A,R0
   \   0001D4   FB           MOV       R3,A
   \   0001D5   A3           INC       DPTR
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   39           ADDC      A,R1
   \   0001D8   8B82         MOV       DPL,R3
   \   0001DA   F583         MOV       DPH,A
   \   0001DC   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001DF   E0           MOVX      A,@DPTR
   \   0001E0   69           XRL       A,R1
   \   0001E1   70D0         JNZ       ??sapp_controlEpProcess_19
   \   0001E3   EA           MOV       A,R2
   \   0001E4   75F003       MOV       B,#0x3
   \   0001E7   A4           MUL       AB
   \   0001E8   F8           MOV       R0,A
   \   0001E9   A9F0         MOV       R1,B
   \   0001EB   90....       MOV       DPTR,#funcTableBuffer
   \   0001EE   E0           MOVX      A,@DPTR
   \   0001EF   28           ADD       A,R0
   \   0001F0   A3           INC       DPTR
   \   0001F1   E0           MOVX      A,@DPTR
   \   0001F2   39           ADDC      A,R1
   \   0001F3   8B82         MOV       DPL,R3
   \   0001F5   F583         MOV       DPH,A
   \   0001F7   A3           INC       DPTR
   \   0001F8   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001FB   A3           INC       DPTR
   \   0001FC   E0           MOVX      A,@DPTR
   \   0001FD   69           XRL       A,R1
   \   0001FE   70B3         JNZ       ??sapp_controlEpProcess_19
   \   000200   90....       MOV       DPTR,#`?<Constant {3, 0, 0}>`
   \   000203   AC..         MOV       R4,?XSP + 0
   \   000205   AD..         MOV       R5,?XSP + 1
   \   000207   7403         MOV       A,#0x3
   \   000209   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00020C   04           INC       A
   \   00020D   2A           ADD       A,R2
   \   00020E   C0E0         PUSH      A
   \   000210   7401         MOV       A,#0x1
   \   000212   12....       LCALL     ?XSTACK_DISP0_8
   \   000215   D0E0         POP       A
   \   000217   F0           MOVX      @DPTR,A
   \   000218   EA           MOV       A,R2
   \   000219   75F003       MOV       B,#0x3
   \   00021C   A4           MUL       AB
   \   00021D   F8           MOV       R0,A
   \   00021E   A9F0         MOV       R1,B
   \   000220   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000223   E0           MOVX      A,@DPTR
   \   000224   C0E0         PUSH      A
   \   000226   7402         MOV       A,#0x2
   \   000228   12....       LCALL     ?XSTACK_DISP0_8
   \   00022B   D0E0         POP       A
   \   00022D   F0           MOVX      @DPTR,A
   \   00022E                ; Setup parameters for call to function SendData
   \   00022E   75..03       MOV       ?V0,#0x3
   \   000231   78..         MOV       R0,#?V0
   \   000233   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000236   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000239   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00023C   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00023F   7402         MOV       A,#0x2
   \   000241   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??sapp_controlEpProcess_17:
   \   000244   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000247   12....       LCALL     ?DEALLOC_XSTACK8
   \   00024A   8029         SJMP      ??sapp_controlEpProcess_20
   \                     ??sapp_controlEpProcess_16:
   \   00024C   75..00       MOV       ?V0,#0x0
   \   00024F   75..00       MOV       ?V1,#0x0
   \   000252   801C         SJMP      ??sapp_controlEpProcess_21
   \                     ??sapp_controlEpProcess_22:
   \   000254   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000257   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00025A   600C         JZ        ??sapp_controlEpProcess_23
   \   00025C                ; Setup parameters for indirect call
   \   00025C   EE           MOV       A,R6
   \   00025D   FC           MOV       R4,A
   \   00025E   EF           MOV       A,R7
   \   00025F   FD           MOV       R5,A
   \   000260   7904         MOV       R1,#0x4
   \   000262   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000265   12....       LCALL     ?CALL_IND
   \                     ??sapp_controlEpProcess_23:
   \   000268   05..         INC       ?V0
   \   00026A   E5..         MOV       A,?V0
   \   00026C   7002         JNZ       ??sapp_controlEpProcess_21
   \   00026E   05..         INC       ?V1
   \                     ??sapp_controlEpProcess_21:
   \   000270   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000273   40DF         JC        ??sapp_controlEpProcess_22
   \                     ??sapp_controlEpProcess_20:
   \   000275                ; Setup parameters for call to function HalLedBlink
   \   000275   7CFA         MOV       R4,#-0x6
   \   000277   7D00         MOV       R5,#0x0
   \   000279   7B32         MOV       R3,#0x32
   \   00027B   7A01         MOV       R2,#0x1
   \   00027D   02....       LJMP      ??sapp_controlEpProcess_5 & 0xFFFF
    215                  }
    216                  // return unprocessed events
    217                  return (events ^ SYS_EVENT_MSG);
   \                     ??sapp_controlEpProcess_7:
   \   000280   AA..         MOV       R2,?V4
   \   000282   E5..         MOV       A,?V5
   \   000284   6480         XRL       A,#0x80
   \   000286   FB           MOV       R3,A
   \   000287   807F         SJMP      ??sapp_controlEpProcess_24
    218              }
    219              // 定时器时间到, 遍历所有端点看是否有userTimer
    220              if(events & SAPP_SEND_PERIODIC_MSG_EVT)
   \                     ??sapp_controlEpProcess_0:
   \   000289   EA           MOV       A,R2
   \   00028A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00028C   5076         JNC       ??sapp_controlEpProcess_25
    221              {
    222                  int i;
    223                  uint8 hasUserTimer = 0;
   \   00028E   7E00         MOV       R6,#0x0
    224                  for(i = 0; i < funcCount; i++)
   \   000290   8E..         MOV       ?V0,R6
   \   000292   8E..         MOV       ?V1,R6
   \   000294   803F         SJMP      ??sapp_controlEpProcess_26
    225                  {
    226                      struct ep_info_t *ep = &funcList[i];
   \                     ??sapp_controlEpProcess_27:
   \   000296   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000299   39           ADDC      A,R1
   \   00029A   FB           MOV       R3,A
    227                      if(ep->userTimer && ep->res_available)
   \   00029B   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00029E   602D         JZ        ??sapp_controlEpProcess_28
   \   0002A0   8A82         MOV       DPL,R2
   \   0002A2   8B83         MOV       DPH,R3
   \   0002A4   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0002A7   6024         JZ        ??sapp_controlEpProcess_28
    228                      {
    229                          hasUserTimer = 1;
   \   0002A9   7E01         MOV       R6,#0x1
    230                          ep->userTimer = ep->userTimer - 1;
   \   0002AB   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0002AE   14           DEC       A
   \   0002AF   F0           MOVX      @DPTR,A
    231                          if(ep->userTimer <= 1)
   \   0002B0   C3           CLR       C
   \   0002B1   9402         SUBB      A,#0x2
   \   0002B3   5018         JNC       ??sapp_controlEpProcess_28
    232                          {
    233                              ep->userTimer = 0;
   \   0002B5   E4           CLR       A
   \   0002B6   F0           MOVX      @DPTR,A
    234                              (*ep->res_available)(ep, ResUserTimer, NULL);
   \   0002B7                ; Setup parameters for indirect call
   \   0002B7   FC           MOV       R4,A
   \   0002B8   FD           MOV       R5,A
   \   0002B9   7903         MOV       R1,#0x3
   \   0002BB   8A82         MOV       DPL,R2
   \   0002BD   8B83         MOV       DPH,R3
   \   0002BF   A3           INC       DPTR
   \   0002C0   A3           INC       DPTR
   \   0002C1   A3           INC       DPTR
   \   0002C2   A3           INC       DPTR
   \   0002C3   A3           INC       DPTR
   \   0002C4   A3           INC       DPTR
   \   0002C5   E0           MOVX      A,@DPTR
   \   0002C6   F8           MOV       R0,A
   \   0002C7   12....       LCALL     ??Subroutine31_0 & 0xFFFF
    235                          }
    236                      }
    237                  }
   \                     ??CrossCallReturnLabel_54:
   \   0002CA   12....       LCALL     ?CALL_IND
   \                     ??sapp_controlEpProcess_28:
   \   0002CD   05..         INC       ?V0
   \   0002CF   E5..         MOV       A,?V0
   \   0002D1   7002         JNZ       ??sapp_controlEpProcess_26
   \   0002D3   05..         INC       ?V1
   \                     ??sapp_controlEpProcess_26:
   \   0002D5   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0002D8   40BC         JC        ??sapp_controlEpProcess_27
    238                  if(hasUserTimer)
   \   0002DA   EE           MOV       A,R6
   \   0002DB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0002DD   500F         JNC       ??sapp_controlEpProcess_29
    239                  {
    240                      // 重新启动定时器
    241                      osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
   \   0002DF                ; Setup parameters for call to function osal_start_timerEx
   \   0002DF   7CE8         MOV       R4,#-0x18
   \   0002E1   7D03         MOV       R5,#0x3
   \   0002E3   7A01         MOV       R2,#0x1
   \   0002E5   7B00         MOV       R3,#0x0
   \   0002E7   A9..         MOV       R1,?V3
   \   0002E9   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0002EC   800D         SJMP      ??sapp_controlEpProcess_30
    242                  }
    243                  else
    244                  {
    245                      isUserTimerRunning = 0;
   \                     ??sapp_controlEpProcess_29:
   \   0002EE   90....       MOV       DPTR,#isUserTimerRunning
   \   0002F1   E4           CLR       A
   \   0002F2   F0           MOVX      @DPTR,A
    246                      osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
   \   0002F3                ; Setup parameters for call to function osal_stop_timerEx
   \   0002F3   7A01         MOV       R2,#0x1
   \   0002F5   FB           MOV       R3,A
   \   0002F6   A9..         MOV       R1,?V3
   \   0002F8   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    247                  }
    248                  // return unprocessed events
    249                  return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??sapp_controlEpProcess_30:
   \   0002FB   E5..         MOV       A,?V4
   \   0002FD   6401         XRL       A,#0x1
   \   0002FF   FA           MOV       R2,A
   \   000300   AB..         MOV       R3,?V5
   \   000302   8004         SJMP      ??sapp_controlEpProcess_24
    250              }
    251              // Discard unknown events
    252              return 0;
   \                     ??sapp_controlEpProcess_25:
   \   000304   7A00         MOV       R2,#0x0
   \   000306   7B00         MOV       R3,#0x0
   \                     ??sapp_controlEpProcess_24:
   \   000308   7403         MOV       A,#0x3
   \   00030A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00030D   7F06         MOV       R7,#0x6
   \   00030F   02....       LJMP      ?BANKED_LEAVE_XDATA
    253          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EE           MOV       A,R6
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F5..         MOV       ?V0,A
   \   00000C   78..         MOV       R0,#?V0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E5..         MOV       A,?V0
   \   000002   75F021       MOV       B,#0x21
   \   000005   A4           MUL       AB
   \   000006   F8           MOV       R0,A
   \   000007   AAF0         MOV       R2,B
   \   000009   75F021       MOV       B,#0x21
   \   00000C   E5..         MOV       A,?V1
   \   00000E   A4           MUL       AB
   \   00000F   2A           ADD       A,R2
   \   000010   F9           MOV       R1,A
   \   000011   74..         MOV       A,#funcList & 0xff
   \   000013   28           ADD       A,R0
   \   000014   FA           MOV       R2,A
   \   000015   74..         MOV       A,#(funcList >> 8) & 0xff
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F9           MOV       R1,A
   \   000004   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F583         MOV       DPH,A
   \   00000B   8882         MOV       DPL,R0
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EE           MOV       A,R6
   \   000001   2422         ADD       A,#0x22
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F8           MOV       R0,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   39           ADDC      A,R1
   \   000001   FB           MOV       R3,A
   \   000002   8A82         MOV       DPL,R2
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine32_0
   \   000006                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV       DPTR,#funcCount
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   C3           CLR       C
   \   000006   E5..         MOV       A,?V0
   \   000008   98           SUBB      A,R0
   \   000009   E5..         MOV       A,?V1
   \   00000B   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine37_0
   \   000004                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine38_0
   \   000002                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine39_0
   \   000001                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   FC           MOV       R4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FD           MOV       R5,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   79F0         MOV       R1,#-0x10
   \   000002                REQUIRE ??Subroutine41_0
   \   000002                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL     `??SendData::?relay`; Banked call to: SendData
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {3, 0, 0}>`:
   \   000000   03           DB 3
   \   000001   00           DB 0
   \   000002   00           DB 0
    254          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    255          uint16 sapp_functionEpProcess(uint8 task_id, uint16 events)
   \                     sapp_functionEpProcess:
    256          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V6,R2
   \   000014   8B..         MOV       ?V7,R3
    257              afIncomingMSGPacket_t *MSGpkt;
    258              if(events & SYS_EVENT_MSG)
   \   000016   EB           MOV       A,R3
   \   000017   5480         ANL       A,#0x80
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??sapp_functionEpProcess_0 & 0xFFFF
    259              {
    260                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \   00001E   8037         SJMP      ??sapp_functionEpProcess_1
    261                  while ( MSGpkt )
    262                  {
    263                      switch ( MSGpkt->hdr.event )
    264                      {
    265                      // 接收到数据包
    266                      case AF_INCOMING_MSG_CMD:
    267                          {
    268                              switch ( MSGpkt->clusterId )
    269                              {
    270                              case SAPP_PERIODIC_CLUSTERID:
    271                                  if(MSGpkt->endPoint <= funcCount)
    272                                  {
    273                                      struct ep_info_t *ep = &funcList[MSGpkt->endPoint - 1];
    274                                      if(ep->incoming_data)
    275                                          (*ep->incoming_data)(ep, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, &MSGpkt->cmd);
    276                                      HalLedBlink( HAL_LED_2, 1, 50, 250 );
    277                                  }
    278                                  
    279                                  break;
    280                              }
    281                          }
    282                          break;
    283          
    284                      case ZDO_STATE_CHANGE:
    285                          {
    286                              curNwkState = (devStates_t)(MSGpkt->hdr.status);
    287                              if ( (curNwkState == DEV_ZB_COORD)
    288                                      || (curNwkState == DEV_ROUTER)
    289                                      || (curNwkState == DEV_END_DEVICE) )
    290                              {
    291                                  int i;
    292                                  int hasTimeOut = 0;
    293                                  for(i = 0; i < funcCount; i++)
    294                                  {
    295                                      struct ep_info_t *ep = &funcList[i];
    296                                      if(ep->nwk_stat_change)
    297                                          (*ep->nwk_stat_change)(ep);
    298                                      // 重置端点计数器
    299                                      if(ep->time_out && ep->function.cycle)
    300                                      {
    301                                          ep->timerTick = ep->function.cycle;
    302                                          hasTimeOut = 1;
    303                                      }
    304                                  }
    305                                  if(hasTimeOut)
    306                                  {
    307                                      // 加入网络成功,启动定时器,为各个端点提供定时
    308                                      osal_start_timerEx(task_id,
    309                                                         SAPP_SEND_PERIODIC_MSG_EVT,
    310                                                         1000);
    311                                  }
    312                              }
    313                              else
    314                                  osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
    315                          }
    316                          break;
    317                      case IOPORT_INT_EVENT:
    318                        {
    319                          OSALIOIntData_t* IOIntData;
    320                          IOIntData =(OSALIOIntData_t*)MSGpkt;
    321                          if(IOIntData->endPoint <= funcCount)
   \                     ??sapp_functionEpProcess_2:
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000025   4021         JC        ??sapp_functionEpProcess_3
    322                          {
    323                              struct ep_info_t *ep = &funcList[IOIntData->endPoint - 1];
   \   000027   85..82       MOV       DPL,?V0
   \   00002A   85..83       MOV       DPH,?V1
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000032   12....       LCALL     ?Subroutine3 & 0xFFFF
    324                              if(ep->res_available)
   \                     ??CrossCallReturnLabel_62:
   \   000035   6011         JZ        ??sapp_functionEpProcess_3
    325                                  (*ep->res_available)(ep, ResIOInt, IOIntData->arg);
   \   000037                ; Setup parameters for indirect call
   \   000037   85..82       MOV       DPL,?V0
   \   00003A   85..83       MOV       DPH,?V1
   \   00003D   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    326                          }
    327                        }
   \                     ??CrossCallReturnLabel_74:
   \   000040   7905         MOV       R1,#0x5
   \   000042   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000045   12....       LCALL     ?CALL_IND
    328                        break;
    329          #if defined(HAL_IRDEC) && (HAL_IRDEC == TRUE)
    330                      case IRDEC_INT_EVENT:   //
    331                        {
    332                          OSALIRDecIntData_t* TimerIntData = (OSALIRDecIntData_t*)MSGpkt;
    333                          if(TimerIntData->endPoint <= funcCount)
    334                          {
    335                              struct ep_info_t *ep = &funcList[TimerIntData->endPoint - 1];
    336                              if(ep->res_available)
    337                                  (*ep->res_available)(ep, ResTimerInt, TimerIntData->data);
    338                          }
    339                        }
    340                        break;
    341          #endif
    342                      default:
    343                          break;
    344                      }
    345                      // Release the memory
    346                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??sapp_functionEpProcess_3:
   \   000048                ; Setup parameters for call to function osal_msg_deallocate
   \   000048   AA..         MOV       R2,?V0
   \   00004A   AB..         MOV       R3,?V1
   \   00004C   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    347                      // Next - if one is available
    348                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   00004F                ; Setup parameters for call to function osal_msg_receive
   \   00004F   85..82       MOV       DPL,?XSP + 0
   \   000052   85..83       MOV       DPH,?XSP + 1
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F9           MOV       R1,A
   \                     ??sapp_functionEpProcess_1:
   \   000057   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00005A   8A..         MOV       ?V0,R2
   \   00005C   8B..         MOV       ?V1,R3
   \   00005E   E5..         MOV       A,?V0
   \   000060   45..         ORL       A,?V1
   \   000062   7003         JNZ       $+5
   \   000064   02....       LJMP      ??sapp_functionEpProcess_4 & 0xFFFF
   \   000067   85..82       MOV       DPL,?V0
   \   00006A   85..83       MOV       DPH,?V1
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   24E6         ADD       A,#-0x1a
   \   000070   600A         JZ        ??sapp_functionEpProcess_5
   \   000072   2449         ADD       A,#0x49
   \   000074   6075         JZ        ??sapp_functionEpProcess_6
   \   000076   24E1         ADD       A,#-0x1f
   \   000078   60A6         JZ        ??sapp_functionEpProcess_2
   \   00007A   80CC         SJMP      ??sapp_functionEpProcess_3
   \                     ??sapp_functionEpProcess_5:
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   6401         XRL       A,#0x1
   \   000083   7002         JNZ       ??sapp_functionEpProcess_7
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \                     ??sapp_functionEpProcess_7:
   \   000087   70BF         JNZ       ??sapp_functionEpProcess_3
   \   000089   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00008C   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00008F   40B7         JC        ??sapp_functionEpProcess_3
   \   000091   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000094   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000097   39           ADDC      A,R1
   \   000098   FB           MOV       R3,A
   \   000099   8A82         MOV       DPL,R2
   \   00009B   F583         MOV       DPH,A
   \   00009D   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000A0   6039         JZ        ??sapp_functionEpProcess_8
   \   0000A2                ; Setup parameters for indirect call
   \   0000A2   E5..         MOV       A,?V0
   \   0000A4   241F         ADD       A,#0x1f
   \   0000A6   F5..         MOV       ?V2,A
   \   0000A8   E4           CLR       A
   \   0000A9   35..         ADDC      A,?V1
   \   0000AB   F5..         MOV       ?V3,A
   \   0000AD   78..         MOV       R0,#?V2
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B2   E5..         MOV       A,?V0
   \   0000B4   240F         ADD       A,#0xf
   \   0000B6   F582         MOV       DPL,A
   \   0000B8   E4           CLR       A
   \   0000B9   35..         ADDC      A,?V1
   \   0000BB   F583         MOV       DPH,A
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   F9           MOV       R1,A
   \   0000BF   85..82       MOV       DPL,?V0
   \   0000C2   85..83       MOV       DPH,?V1
   \   0000C5   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000C8   8A82         MOV       DPL,R2
   \   0000CA   8B83         MOV       DPH,R3
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F8           MOV       R0,A
   \   0000D0   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000D3   12....       LCALL     ?CALL_IND
   \   0000D6   7402         MOV       A,#0x2
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??sapp_functionEpProcess_8:
   \   0000DB                ; Setup parameters for call to function HalLedBlink
   \   0000DB   7CFA         MOV       R4,#-0x6
   \   0000DD   7D00         MOV       R5,#0x0
   \   0000DF   7B32         MOV       R3,#0x32
   \   0000E1   7A01         MOV       R2,#0x1
   \   0000E3   7902         MOV       R1,#0x2
   \   0000E5   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   0000E8   02....       LJMP      ??sapp_functionEpProcess_3 & 0xFFFF
   \                     ??sapp_functionEpProcess_6:
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   90....       MOV       DPTR,#curNwkState
   \   0000F0   F0           MOVX      @DPTR,A
   \   0000F1   6409         XRL       A,#0x9
   \   0000F3   600D         JZ        ??sapp_functionEpProcess_9
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   6407         XRL       A,#0x7
   \   0000F8   6008         JZ        ??sapp_functionEpProcess_9
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   6406         XRL       A,#0x6
   \   0000FD   6003         JZ        $+5
   \   0000FF   02....       LJMP      ??sapp_functionEpProcess_10 & 0xFFFF
   \                     ??sapp_functionEpProcess_9:
   \   000102   7E00         MOV       R6,#0x0
   \   000104   8E..         MOV       ?V4,R6
   \   000106   8E..         MOV       ?V5,R6
   \   000108   8068         SJMP      ??sapp_functionEpProcess_11
   \                     ??sapp_functionEpProcess_12:
   \   00010A   E5..         MOV       A,?V4
   \   00010C   75F021       MOV       B,#0x21
   \   00010F   A4           MUL       AB
   \   000110   F8           MOV       R0,A
   \   000111   AAF0         MOV       R2,B
   \   000113   75F021       MOV       B,#0x21
   \   000116   E5..         MOV       A,?V5
   \   000118   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00011B   F5..         MOV       ?V2,A
   \   00011D   74..         MOV       A,#(funcList >> 8) & 0xff
   \   00011F   39           ADDC      A,R1
   \   000120   F5..         MOV       ?V3,A
   \   000122   85..82       MOV       DPL,?V2
   \   000125   F583         MOV       DPH,A
   \   000127   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00012A   600E         JZ        ??sapp_functionEpProcess_13
   \   00012C                ; Setup parameters for indirect call
   \   00012C   AA..         MOV       R2,?V2
   \   00012E   AB..         MOV       R3,?V3
   \   000130   8A82         MOV       DPL,R2
   \   000132   8B83         MOV       DPH,R3
   \   000134   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000137   12....       LCALL     ?CALL_IND
   \                     ??sapp_functionEpProcess_13:
   \   00013A   85..82       MOV       DPL,?V2
   \   00013D   85..83       MOV       DPH,?V3
   \   000140   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000143   6025         JZ        ??sapp_functionEpProcess_14
   \   000145   85..82       MOV       DPL,?V2
   \   000148   85..83       MOV       DPH,?V3
   \   00014B   A3           INC       DPTR
   \   00014C   A3           INC       DPTR
   \   00014D   A3           INC       DPTR
   \   00014E   A3           INC       DPTR
   \   00014F   A3           INC       DPTR
   \   000150   A3           INC       DPTR
   \   000151   A3           INC       DPTR
   \   000152   A3           INC       DPTR
   \   000153   A3           INC       DPTR
   \   000154   A3           INC       DPTR
   \   000155   E0           MOVX      A,@DPTR
   \   000156   6012         JZ        ??sapp_functionEpProcess_14
   \   000158   C0E0         PUSH      A
   \   00015A   E5..         MOV       A,?V2
   \   00015C   240D         ADD       A,#0xd
   \   00015E   F582         MOV       DPL,A
   \   000160   E4           CLR       A
   \   000161   35..         ADDC      A,?V3
   \   000163   F583         MOV       DPH,A
   \   000165   D0E0         POP       A
   \   000167   F0           MOVX      @DPTR,A
   \   000168   7E01         MOV       R6,#0x1
   \                     ??sapp_functionEpProcess_14:
   \   00016A   05..         INC       ?V4
   \   00016C   E5..         MOV       A,?V4
   \   00016E   7002         JNZ       ??sapp_functionEpProcess_11
   \   000170   05..         INC       ?V5
   \                     ??sapp_functionEpProcess_11:
   \   000172   90....       MOV       DPTR,#funcCount
   \   000175   E0           MOVX      A,@DPTR
   \   000176   F8           MOV       R0,A
   \   000177   C3           CLR       C
   \   000178   E5..         MOV       A,?V4
   \   00017A   98           SUBB      A,R0
   \   00017B   E5..         MOV       A,?V5
   \   00017D   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000180   4088         JC        ??sapp_functionEpProcess_12
   \   000182   EE           MOV       A,R6
   \   000183   A2E0         MOV       C,0xE0 /* A   */.0
   \   000185   4003         JC        $+5
   \   000187   02....       LJMP      ??sapp_functionEpProcess_3 & 0xFFFF
   \   00018A                ; Setup parameters for call to function osal_start_timerEx
   \   00018A   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00018D   02....       LJMP      ??sapp_functionEpProcess_3 & 0xFFFF
   \                     ??sapp_functionEpProcess_10:
   \   000190                ; Setup parameters for call to function osal_stop_timerEx
   \   000190   7A01         MOV       R2,#0x1
   \   000192   7B00         MOV       R3,#0x0
   \   000194   85..82       MOV       DPL,?XSP + 0
   \   000197   85..83       MOV       DPH,?XSP + 1
   \   00019A   E0           MOVX      A,@DPTR
   \   00019B   F9           MOV       R1,A
   \   00019C   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00019F   02....       LJMP      ??sapp_functionEpProcess_3 & 0xFFFF
    349                  }
    350                  // return unprocessed events
    351                  return (events ^ SYS_EVENT_MSG);
   \                     ??sapp_functionEpProcess_4:
   \   0001A2   AA..         MOV       R2,?V6
   \   0001A4   E5..         MOV       A,?V7
   \   0001A6   6480         XRL       A,#0x80
   \   0001A8   FB           MOV       R3,A
   \   0001A9   02....       LJMP      ??sapp_functionEpProcess_15 & 0xFFFF
    352              }
    353          
    354              // 定时器时间到, 遍历所有端点看是否有需要调用time_out
    355              if(events & SAPP_SEND_PERIODIC_MSG_EVT)
   \                     ??sapp_functionEpProcess_0:
   \   0001AC   EA           MOV       A,R2
   \   0001AD   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001AF   4003         JC        $+5
   \   0001B1   02....       LJMP      ??sapp_functionEpProcess_16 & 0xFFFF
    356              {
    357                  int i;
    358                  for(i = 0; i < funcCount; i++)
   \   0001B4   75..00       MOV       ?V0,#0x0
   \   0001B7   75..00       MOV       ?V1,#0x0
   \   0001BA   806B         SJMP      ??sapp_functionEpProcess_17
    359                  {
    360                      struct ep_info_t *ep = &funcList[i];
   \                     ??sapp_functionEpProcess_18:
   \   0001BC   E5..         MOV       A,?V0
   \   0001BE   75F021       MOV       B,#0x21
   \   0001C1   A4           MUL       AB
   \   0001C2   F8           MOV       R0,A
   \   0001C3   AAF0         MOV       R2,B
   \   0001C5   75F021       MOV       B,#0x21
   \   0001C8   E5..         MOV       A,?V1
   \   0001CA   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0001CD   FE           MOV       R6,A
   \   0001CE   74..         MOV       A,#(funcList >> 8) & 0xff
   \   0001D0   39           ADDC      A,R1
   \   0001D1   FF           MOV       R7,A
    361                      if(ep->time_out && ep->function.cycle)
   \   0001D2   8E82         MOV       DPL,R6
   \   0001D4   F583         MOV       DPH,A
   \   0001D6   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0001D9   6044         JZ        ??sapp_functionEpProcess_19
   \   0001DB   8E82         MOV       DPL,R6
   \   0001DD   8F83         MOV       DPH,R7
   \   0001DF   A3           INC       DPTR
   \   0001E0   A3           INC       DPTR
   \   0001E1   A3           INC       DPTR
   \   0001E2   A3           INC       DPTR
   \   0001E3   A3           INC       DPTR
   \   0001E4   A3           INC       DPTR
   \   0001E5   A3           INC       DPTR
   \   0001E6   A3           INC       DPTR
   \   0001E7   A3           INC       DPTR
   \   0001E8   A3           INC       DPTR
   \   0001E9   E0           MOVX      A,@DPTR
   \   0001EA   6033         JZ        ??sapp_functionEpProcess_19
    362                      {
    363                          // 端点需要周期执行
    364                          ep->timerTick = ep->timerTick - 1;
   \   0001EC   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0001EF   E0           MOVX      A,@DPTR
   \   0001F0   14           DEC       A
   \   0001F1   F0           MOVX      @DPTR,A
    365                          if(ep->timerTick == 0)
   \   0001F2   702B         JNZ       ??sapp_functionEpProcess_19
    366                          {
    367                            // 定时时间到,执行time_out函数
    368                            (*ep->time_out)(ep);
   \   0001F4                ; Setup parameters for indirect call
   \   0001F4   EE           MOV       A,R6
   \   0001F5   FA           MOV       R2,A
   \   0001F6   EF           MOV       A,R7
   \   0001F7   FB           MOV       R3,A
   \   0001F8   8E82         MOV       DPL,R6
   \   0001FA   8F83         MOV       DPH,R7
   \   0001FC   A3           INC       DPTR
   \   0001FD   A3           INC       DPTR
   \   0001FE   A3           INC       DPTR
   \   0001FF   A3           INC       DPTR
   \   000200   E0           MOVX      A,@DPTR
   \   000201   F8           MOV       R0,A
   \   000202   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000205   12....       LCALL     ?CALL_IND
    369                            ep->timerTick = ep->function.cycle;
   \   000208   8E82         MOV       DPL,R6
   \   00020A   8F83         MOV       DPH,R7
   \   00020C   A3           INC       DPTR
   \   00020D   A3           INC       DPTR
   \   00020E   A3           INC       DPTR
   \   00020F   A3           INC       DPTR
   \   000210   A3           INC       DPTR
   \   000211   A3           INC       DPTR
   \   000212   A3           INC       DPTR
   \   000213   A3           INC       DPTR
   \   000214   A3           INC       DPTR
   \   000215   A3           INC       DPTR
   \   000216   E0           MOVX      A,@DPTR
   \   000217   C0E0         PUSH      A
   \   000219   12....       LCALL     ?Subroutine25 & 0xFFFF
    370                          }
    371                      }
    372          #if 0
    373                      if(ep->userTimer && ep->res_available)
    374                      {
    375                          ep->userTimer = ep->userTimer - 1;
    376                          if(ep->userTimer <= 1)
    377                          {
    378                              (*ep->res_available)(ep, ResUserTimer, NULL);
    379                              ep->userTimer = 0;
    380                          }
    381                      }
    382          #endif
    383                  }
   \                     ??CrossCallReturnLabel_36:
   \   00021C   D0E0         POP       A
   \   00021E   F0           MOVX      @DPTR,A
   \                     ??sapp_functionEpProcess_19:
   \   00021F   05..         INC       ?V0
   \   000221   E5..         MOV       A,?V0
   \   000223   7002         JNZ       ??sapp_functionEpProcess_17
   \   000225   05..         INC       ?V1
   \                     ??sapp_functionEpProcess_17:
   \   000227   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00022A   4090         JC        ??sapp_functionEpProcess_18
    384                  // 重新启动定时器
    385                  osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
   \   00022C                ; Setup parameters for call to function osal_start_timerEx
   \   00022C   12....       LCALL     ?Subroutine13 & 0xFFFF
    386                  // return unprocessed events
    387                  return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??CrossCallReturnLabel_71:
   \   00022F   E5..         MOV       A,?V6
   \   000231   6401         XRL       A,#0x1
   \   000233   FA           MOV       R2,A
   \   000234   AB..         MOV       R3,?V7
   \   000236   8004         SJMP      ??sapp_functionEpProcess_15
    388              }
    389              // Discard unknown events
    390              return 0;
   \                     ??sapp_functionEpProcess_16:
   \   000238   7A00         MOV       R2,#0x0
   \   00023A   7B00         MOV       R3,#0x0
   \                     ??sapp_functionEpProcess_15:
   \   00023C   7401         MOV       A,#0x1
   \   00023E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000241   7F08         MOV       R7,#0x8
   \   000243   02....       LJMP      ?BANKED_LEAVE_XDATA
    391          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EE           MOV       A,R6
   \   000001   240D         ADD       A,#0xd
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E5..         MOV       A,?V0
   \   000002   2414         ADD       A,#0x14
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7CE8         MOV       R4,#-0x18
   \   000002   7D03         MOV       R5,#0x3
   \   000004   7A01         MOV       R2,#0x1
   \   000006   7B00         MOV       R3,#0x0
   \   000008   85..82       MOV       DPL,?XSP + 0
   \   00000B   85..83       MOV       DPH,?XSP + 1
   \   00000E                REQUIRE ??Subroutine36_0
   \   00000E                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   90....       MOV       DPTR,#funcCount
   \   000005   E0           MOVX      A,@DPTR
   \   000006   C3           CLR       C
   \   000007   98           SUBB      A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   75F021       MOV       B,#0x21
   \   000004   A4           MUL       AB
   \   000005   F8           MOV       R0,A
   \   000006   A9F0         MOV       R1,B
   \   000008   74..         MOV       A,#(funcList + 223) & 0xff
   \   00000A   28           ADD       A,R0
   \   00000B   FA           MOV       R2,A
   \   00000C   74..         MOV       A,#((funcList - 33) >> 8) & 0xff
   \   00000E   22           RET
    392          //处理接收到的wifi模块串口数据
    393          static uint8 uartMsgProcesser1(uint8 *msg)
    394          {
    395            /*
    396              uint8 length = 0;
    397              mtOSALSerialData_t *pMsg = (mtOSALSerialData_t *)msg;
    398              mtUserSerialMsg_t *pMsgBody = (mtUserSerialMsg_t *)pMsg->msg;
    399              if ( (curNwkState != DEV_ZB_COORD)
    400                      && (curNwkState != DEV_ROUTER)
    401                      && (curNwkState != DEV_END_DEVICE) )
    402                  return 1;
    403              
    404              while((&pMsgBody->sop)[length++]!='\n'&&length<pMsgBody->len);
    405              HalUARTWrite(0,&pMsgBody->sop,length);
    406              HalLedBlink( HAL_LED_1, 3, 50, 90 );
    407          */
    408              uint8 length = 0;
    409              mtOSALSerialData_t *pMsg = (mtOSALSerialData_t *)msg;
    410              mtUserSerialMsg_t *pMsgBody = (mtUserSerialMsg_t *)pMsg->msg;
    411              while((&pMsgBody->sop)[length++]!='\n'&&length<pMsgBody->len);
    412              SendData(TRANSFER_ENDPOINT,&pMsgBody->sop,0x0000, 1,length);
    413              return 1;
    414          }
    415          
    416          #if defined(ZDO_COORDINATOR)
    417          static uint8 uartMsgProcesser(uint8 *msg)
    418          {
    419              uint8 length = 0;
    420              mtOSALSerialData_t *pMsg = (mtOSALSerialData_t *)msg;
    421              mtUserSerialMsg_t *pMsgBody = (mtUserSerialMsg_t *)pMsg->msg;
    422              while((&pMsgBody->sop)[length++]!='\n'&&length<pMsgBody->len);
    423              SendData(TRANSFER_ENDPOINT,&pMsgBody->sop,0xFFFF, 1,length);
    424              return 1;
    425          }
    426          #endif
    427          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    428          uint8 SendData(uint8 srcEP, const void *buf, uint16 addr, uint8 dstEP, uint8 Len)
   \                     SendData:
    429          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
    430              static uint8 transID = 0;
    431              afAddrType_t SendDataAddr;
    432              struct ep_info_t *epInfo;
    433          
    434              if(srcEP <= funcCount)
   \   000010   90....       MOV       DPTR,#funcCount
   \   000013   E0           MOVX      A,@DPTR
   \   000014   C3           CLR       C
   \   000015   9E           SUBB      A,R6
   \   000016   4016         JC        ??SendData_0
    435                  epInfo = &funcList[srcEP - 1];
   \   000018   E9           MOV       A,R1
   \   000019   75F021       MOV       B,#0x21
   \   00001C   A4           MUL       AB
   \   00001D   F8           MOV       R0,A
   \   00001E   A9F0         MOV       R1,B
   \   000020   74..         MOV       A,#(funcList + 223) & 0xff
   \   000022   28           ADD       A,R0
   \   000023   F8           MOV       R0,A
   \   000024   74..         MOV       A,#((funcList - 33) >> 8) & 0xff
   \   000026   39           ADDC      A,R1
   \   000027   F9           MOV       R1,A
   \   000028   E8           MOV       A,R0
   \   000029   FA           MOV       R2,A
   \   00002A   E9           MOV       A,R1
   \   00002B   FB           MOV       R3,A
   \   00002C   8004         SJMP      ??SendData_1
    436              else
    437                  epInfo = &controlEndPointInfo;
   \                     ??SendData_0:
   \   00002E   7A..         MOV       R2,#controlEndPointInfo & 0xff
   \   000030   7B..         MOV       R3,#(controlEndPointInfo >> 8) & 0xff
    438          
    439              SendDataAddr.addrMode = (afAddrMode_t)Addr16Bit;         //短地址发送
   \                     ??SendData_1:
   \   000032   7408         MOV       A,#0x8
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   7402         MOV       A,#0x2
   \   000039   F0           MOVX      @DPTR,A
    440              SendDataAddr.endPoint = dstEP;
   \   00003A   7418         MOV       A,#0x18
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   C0E0         PUSH      A
   \   000042   7409         MOV       A,#0x9
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   D0E0         POP       A
   \   000049   F0           MOVX      @DPTR,A
    441              SendDataAddr.addr.shortAddr = addr;
   \   00004A   85..82       MOV       DPL,?XSP + 0
   \   00004D   85..83       MOV       DPH,?XSP + 1
   \   000050   EC           MOV       A,R4
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   ED           MOV       A,R5
   \   000054   F0           MOVX      @DPTR,A
    442              if ( AF_DataRequest( &SendDataAddr, //发送的地址和模式
    443                                   // TODO:
    444                                   &epInfo->SampleApp_epDesc,   //终端（比如操作系统中任务ID等）
    445                                   SAPP_PERIODIC_CLUSTERID,//发送串ID
    446                                   Len,
    447                                   (uint8*)buf,
    448                                   &transID,  //信息ID（操作系统参数）
    449                                   AF_DISCV_ROUTE,
    450                                   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000055                ; Setup parameters for call to function AF_DataRequest
   \   000055   75..1E       MOV       ?V2,#0x1e
   \   000058   78..         MOV       R0,#?V2
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005D   75....       MOV       ?V2,#??transID & 0xff
   \   000060   75....       MOV       ?V3,#(??transID >> 8) & 0xff
   \   000063   78..         MOV       R0,#?V2
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   741E         MOV       A,#0x1e
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F5..         MOV       ?V0,A
   \   000075   75..00       MOV       ?V1,#0x0
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   75..01       MOV       ?V0,#0x1
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000085   7920         MOV       R1,#0x20
   \   000087   EA           MOV       A,R2
   \   000088   240F         ADD       A,#0xf
   \   00008A   FC           MOV       R4,A
   \   00008B   E4           CLR       A
   \   00008C   3B           ADDC      A,R3
   \   00008D   FD           MOV       R5,A
   \   00008E   7409         MOV       A,#0x9
   \   000090   12....       LCALL     ?XSTACK_DISP101_8
   \   000093   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000096   7409         MOV       A,#0x9
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009B   E9           MOV       A,R1
   \   00009C   7011         JNZ       ??SendData_2
    451              {
    452                  HalLedBlink( HAL_LED_1, 1, 50, 250 );
   \   00009E                ; Setup parameters for call to function HalLedBlink
   \   00009E   7CFA         MOV       R4,#-0x6
   \   0000A0   7D00         MOV       R5,#0x0
   \   0000A2   7B32         MOV       R3,#0x32
   \   0000A4   7A01         MOV       R2,#0x1
   \   0000A6   7901         MOV       R1,#0x1
   \   0000A8   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    453                  return 1;
   \   0000AB   7901         MOV       R1,#0x1
   \   0000AD   8002         SJMP      ??SendData_3
    454              }
    455              else
    456              {
    457                  return 0;
   \                     ??SendData_2:
   \   0000AF   7900         MOV       R1,#0x0
   \                     ??SendData_3:
   \   0000B1   740C         MOV       A,#0xc
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   7F04         MOV       R7,#0x4
   \   0000B8   02....       LJMP      ?BANKED_LEAVE_XDATA
    458              }
    459          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??transID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    460          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void CreateUserTimer(struct ep_info_t *ep, uint8 seconds)
   \                     CreateUserTimer:
    462          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    463              if(ep == NULL)
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   6028         JZ        ??CreateUserTimer_0
    464                  return;
    465              if(ep->res_available == NULL)
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000012   601F         JZ        ??CreateUserTimer_0
    466                  return;
    467              ep->userTimer = seconds;
   \   000014   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000017   EE           MOV       A,R6
   \   000018   F0           MOVX      @DPTR,A
    468              if(isUserTimerRunning == 0)
   \   000019   90....       MOV       DPTR,#isUserTimerRunning
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   7014         JNZ       ??CreateUserTimer_0
    469              {
    470                  osal_start_timerEx(controlTaskId,
    471                                     SAPP_SEND_PERIODIC_MSG_EVT,
    472                                     1000);
   \   00001F                ; Setup parameters for call to function osal_start_timerEx
   \   00001F   7CE8         MOV       R4,#-0x18
   \   000021   7D03         MOV       R5,#0x3
   \   000023   7A01         MOV       R2,#0x1
   \   000025   7B00         MOV       R3,#0x0
   \   000027   90....       MOV       DPTR,#controlTaskId
   \   00002A   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    473                  isUserTimerRunning = 1;
   \                     ??CrossCallReturnLabel_72:
   \   00002D   90....       MOV       DPTR,#isUserTimerRunning
   \   000030   7401         MOV       A,#0x1
   \   000032   F0           MOVX      @DPTR,A
    474              }
    475          }
   \                     ??CreateUserTimer_0:
   \   000033                REQUIRE ?Subroutine1
   \   000033                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    476          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          void DeleteUserTimer(struct ep_info_t *ep)
   \                     DeleteUserTimer:
    478          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    479              if(ep == NULL)
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   6003         JZ        ??CrossCallReturnLabel_25
    480                  return;
    481              ep->userTimer = 0;
   \   000008   12....       LCALL     ?Subroutine19 & 0xFFFF
    482          }
   \                     ??CrossCallReturnLabel_25:
   \   00000B                REQUIRE ?Subroutine2
   \   00000B                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    483          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    484          void ModifyRefreshCycle(struct ep_info_t *ep, uint8 seconds)
   \                     ModifyRefreshCycle:
    485          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    486              if(ep == NULL)
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   6027         JZ        ??ModifyRefreshCycle_0
    487                  return;
    488              if(ep->time_out == NULL)
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00000F   EC           MOV       A,R4
   \   000010   4D           ORL       A,R5
   \   000011   601C         JZ        ??ModifyRefreshCycle_0
    489                  return;
    490              ep->function.cycle = seconds;
   \   000013   E9           MOV       A,R1
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   F0           MOVX      @DPTR,A
    491              if(ep->timerTick > seconds)
   \   000023   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F8           MOV       R0,A
   \   000028   E9           MOV       A,R1
   \   000029   C3           CLR       C
   \   00002A   98           SUBB      A,R0
   \   00002B   5002         JNC       ??ModifyRefreshCycle_0
    492                  ep->timerTick = seconds;
   \   00002D   E9           MOV       A,R1
   \   00002E   F0           MOVX      @DPTR,A
    493          }
   \                     ??ModifyRefreshCycle_0:
   \   00002F   80..         SJMP      ?Subroutine2
    494          
    495          #if ! defined(ZDO_COORDINATOR) && defined(RTR_NWK)
    496          //路由器定时发送拓扑信息

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          void RouterTimeoutRoutine(struct ep_info_t *ep)
   \                     RouterTimeoutRoutine:
    498          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    499              SendData(ep->ep, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO)); //节点向协调器发送拓扑信息
   \   000009                ; Setup parameters for call to function SendData
   \   000009   75..0E       MOV       ?V0,#0xe
   \   00000C   78..         MOV       R0,#?V0
   \   00000E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000011   75..01       MOV       ?V0,#0x1
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000019   7C00         MOV       R4,#0x0
   \   00001B   7D00         MOV       R5,#0x0
   \   00001D   7A..         MOV       R2,#topoBuffer & 0xff
   \   00001F   7B..         MOV       R3,#(topoBuffer >> 8) & 0xff
   \   000021   EE           MOV       A,R6
   \   000022   240B         ADD       A,#0xb
   \   000024   F582         MOV       DPL,A
   \   000026   E4           CLR       A
   \   000027   3F           ADDC      A,R7
   \   000028   F583         MOV       DPH,A
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F9           MOV       R1,A
   \   00002C   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
    500          }
   \   000032   02....       LJMP      ?Subroutine1 & 0xFFFF
    501          //路由器收到广播后向所有连接wifi的设备广播信息

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          void RouterIncomingRoutine(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg){
   \                     RouterIncomingRoutine:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
    503              HalUARTWrite(0,msg->Data,msg->DataLength);
   \   00000F                ; Setup parameters for call to function HalUARTWrite
   \   00000F   8882         MOV       DPL,R0
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   FA           MOV       R2,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FB           MOV       R3,A
   \   000022   7900         MOV       R1,#0x0
   \   000024   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    504              HalLedBlink( HAL_LED_2, 3, 50, 90 );
   \   000027                ; Setup parameters for call to function HalLedBlink
   \   000027   7C5A         MOV       R4,#0x5a
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   7B32         MOV       R3,#0x32
   \   00002D   7A03         MOV       R2,#0x3
   \   00002F   7902         MOV       R1,#0x2
   \   000031   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    505               //Delay_ms(5);
    506          
    507          }
   \   000034   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for topoBuffer>`:
   \   000000   02           DB 2
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   0000         DW 0
   \   00000B   0000         DW 0
   \   00000D   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for commonClusterId>`:
   \   000000   0100         DW 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sapp_taskInitProcess::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sapp_taskInitProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??createEndPoint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    createEndPoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sapp_controlEpProcess::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sapp_controlEpProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sapp_functionEpProcess::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sapp_functionEpProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??CreateUserTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CreateUserTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DeleteUserTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DeleteUserTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ModifyRefreshCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ModifyRefreshCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??RouterTimeoutRoutine::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RouterTimeoutRoutine

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??RouterIncomingRoutine::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RouterIncomingRoutine
    508          #endif
    509          
    510          #if defined(ZDO_COORDINATOR)
    511          void CoordinatorTimeoutRoutine(struct ep_info_t *ep){
    512               SendData(ep->ep, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO)); //节点向协调器发送拓扑信息
    513          }
    514          //协调器收到求救信息后向连接wifi的服务器发送信息
    515          void CoordinatorIncomingRoutine(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)
    516          {
    517              //msg->Data[], msg->DataLength, msg->TransSeqNumber
    518              // 转发数据到串口
    519            /*
    520              if(msg->DataLength > 0)
    521              {
    522                  mtUserSerialMsg_t *pMsg = osal_mem_alloc(sizeof(mtUserSerialMsg_t) + msg->DataLength - 1);
    523                  pMsg->sop = MT_UART_SOF;
    524                  pMsg->len = msg->DataLength + 6;
    525                  pMsg->cmd = 0x0018;
    526                  pMsg->cmdEndPoint = 0xF1;
    527                  pMsg->addr = addr;
    528                  pMsg->endPoint = endPoint;
    529                  memcpy(pMsg->data, msg->Data, msg->DataLength);
    530                  pMsg->fsc = MT_UartCalcFCS(0, &pMsg->len, 1);
    531                  pMsg->fsc = MT_UartCalcFCS(pMsg->fsc, pMsg->dataBody, pMsg->len);
    532                  HalUARTWrite(HAL_UART_PORT_0, &pMsg->sop, sizeof(mtUserSerialMsg_t) - 2 + msg->DataLength);
    533                  HalUARTWrite(HAL_UART_PORT_0, &pMsg->fsc, 1);
    534                  osal_mem_free(pMsg);
    535              }
    536          */
    537              HalUARTWrite(0,msg->Data,msg->DataLength);
    538              HalLedBlink( HAL_LED_2, 2, 50, 90 );
    539            
    540          }
    541          #endif
    542          #endif//SAPP_ZSTACK

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1      9   CreateUserTimer
        0      9   -> osal_start_timerEx
      2      0   DeleteUserTimer
      3      0   ModifyRefreshCycle
      2      2   RouterIncomingRoutine
        2      0   -> HalLedBlink
        2      0   -> HalUARTWrite
      0     11   RouterTimeoutRoutine
        0     11   -> SendData
      1     52   SendData
        0     33   -> AF_DataRequest
        0     24   -> HalLedBlink
      1     20   createEndPoint
        0     10   -> afRegister
      1     20   sapp_controlEpProcess
        0     17   -> HalLedBlink
        0     17   -> NLME_GetCoordShortAddr
        0     17   -> NLME_GetExtAddr
        0     19   -> SendData
        0     19   -> memcpy
        0     20   -> osal_memcpy
        0     17   -> osal_msg_deallocate
        0     17   -> osal_msg_receive
        0     17   -> osal_start_timerEx
        0     17   -> osal_stop_timerEx
      1     19   sapp_functionEpProcess
        0     17   -> HalLedBlink
        0     17   -> osal_msg_deallocate
        0     17   -> osal_msg_receive
        0     17   -> osal_start_timerEx
        0     17   -> osal_stop_timerEx
      1     10   sapp_taskInitProcess
        0     10   -> HalIOInit
        0     10   -> MT_UartRegisterTaskID
        0     10   -> createEndPoint
        0     10   -> osal_mem_alloc


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant {3, 0, 0}>
       2  ?<Initializer for commonClusterId>
      14  ?<Initializer for topoBuffer>
       7  ??Subroutine30_0
       7  ??Subroutine31_0
       2  ??Subroutine32_0
       2  ??Subroutine33_0
       2  ??Subroutine34_0
       8  ??Subroutine35_0
       6  ??Subroutine36_0
       2  ??Subroutine37_0
       1  ??Subroutine38_0
       2  ??Subroutine39_0
       7  ??Subroutine40_0
       6  ??Subroutine41_0
       5  ?Subroutine0
       5  ?Subroutine1
      13  ?Subroutine10
      16  ?Subroutine11
       9  ?Subroutine12
      14  ?Subroutine13
       6  ?Subroutine14
      24  ?Subroutine15
      16  ?Subroutine16
      15  ?Subroutine17
      15  ?Subroutine18
       6  ?Subroutine19
       7  ?Subroutine2
      10  ?Subroutine20
       5  ?Subroutine21
      12  ?Subroutine22
       2  ?Subroutine23
      10  ?Subroutine24
      10  ?Subroutine25
      15  ?Subroutine26
       8  ?Subroutine27
      10  ?Subroutine28
      12  ?Subroutine29
       6  ?Subroutine3
      15  ?Subroutine4
      15  ?Subroutine5
      10  ?Subroutine6
       4  ?Subroutine7
      18  ?Subroutine8
      15  ?Subroutine9
      51  CreateUserTimer
       6  CreateUserTimer::?relay
      11  DeleteUserTimer
       6  DeleteUserTimer::?relay
      49  ModifyRefreshCycle
       6  ModifyRefreshCycle::?relay
      55  RouterIncomingRoutine
       6  RouterIncomingRoutine::?relay
      53  RouterTimeoutRoutine
       6  RouterTimeoutRoutine::?relay
     187  SendData
       6  SendData::?relay
       2  commonClusterId
      33  controlEndPointInfo
       1  controlTaskId
     189  createEndPoint
       6  createEndPoint::?relay
       1  curNwkState
       2  funcTableBuffer
       1  functionTaskId
       1  isUserTimerRunning
     786  sapp_controlEpProcess
       6  sapp_controlEpProcess::?relay
     582  sapp_functionEpProcess
       6  sapp_functionEpProcess::?relay
     258  sapp_taskInitProcess
       6  sapp_taskInitProcess::?relay
      14  topoBuffer
       1  transID

 
 2 601 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    16 bytes in segment XDATA_I
    16 bytes in segment XDATA_ID
     3 bytes in segment XDATA_ROM_C
    40 bytes in segment XDATA_Z
 
    76 bytes of CODE     memory
     3 bytes of CONST    memory
 2 601 bytes of HUGECODE memory
    56 bytes of XDATA    memory

Errors: none
Warnings: none
