###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               14/Jul/2019  19:08:48
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Components\mac\low_level\srf04\mac_tx.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWF3B5.tmp
#        (D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Components\mac\low_level\srf04\mac_tx.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -D SAPP_ZSTACK -lC
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\RouterEB\List
#        -lA
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x4545
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\ -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\Source\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\zstack\ZMain\TI2530DB\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\include\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\include\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\high_level\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\mt\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\osal\include\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\saddr\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\services\sdata\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\af\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\nwk\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sapi\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sec\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\sys\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\stack\zdo\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\
#        -I
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\RouterEB\List\mac_tx.lst
#    Object file        =  
#        D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Projects\SappWsn\RouterEB\Obj\mac_tx.r51
#
###############################################################################

D:\¿ÎÉèÎð¶¯\ZStack-CC2530-r200\Zigbee_NetWork\Components\mac\low_level\srf04\mac_tx.c
      1          /**************************************************************************************************
      2            Filename:       mac_tx.c
      3            Revised:        $Date: 2007-10-15 14:56:36 -0700 (Mon, 15 Oct 2007) $
      4            Revision:       $Revision: 15687 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_types.h"
     47          #include "hal_defs.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1
     49          #include "hal_mac_cfg.h"
     50          
     51          /* high-level */
     52          #include "mac_spec.h"
     53          #include "mac_pib.h"
     54          
     55          /* exported low-level */
     56          #include "mac_low_level.h"
     57          
     58          /* low-level specific */
     59          #include "mac_tx.h"
     60          #include "mac_backoff_timer.h"
     61          #include "mac_rx.h"
     62          #include "mac_rx_onoff.h"
     63          #include "mac_radio.h"
     64          #include "mac_sleep.h"
     65          
     66          /* target specific */
     67          #include "mac_radio_defs.h"
     68          
     69          /* debug */
     70          #include "mac_assert.h"
     71          
     72          
     73          /* ------------------------------------------------------------------------------------------------
     74           *                                            Defines
     75           * ------------------------------------------------------------------------------------------------
     76           */
     77          #define MFR_LEN                   MAC_FCS_FIELD_LEN
     78          #define PREPENDED_BYTE_LEN        1
     79          
     80          
     81          /* ------------------------------------------------------------------------------------------------
     82           *                                         Global Constants
     83           * ------------------------------------------------------------------------------------------------
     84           */
     85          
     86          /*
     87           *  This is the time, in backoffs, required to set up a slotted transmit.
     88           *  It is exported to high level so that code can schedule enough time
     89           *  for slotted transmits.
     90           *
     91           *  A default is provided if a value is not specified.  If the default
     92           *  is not appropriate, a #define should be added within hal_mac_cfg.h.
     93           */
     94          #ifndef HAL_MAC_TX_SLOTTED_DELAY
     95          #define HAL_MAC_TX_SLOTTED_DELAY    3
     96          #endif

   \                                 In  segment XDATA_ROM_C, align 1
     97          uint8 const macTxSlottedDelay = HAL_MAC_TX_SLOTTED_DELAY;
   \                     macTxSlottedDelay:
   \   000000   03           DB 3
     98          
     99          
    100          /* ------------------------------------------------------------------------------------------------
    101           *                                         Global Variables
    102           * ------------------------------------------------------------------------------------------------
    103           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 macTxActive;
   \                     macTxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint8 macTxType;
   \                     macTxType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          uint8 macTxBe;
   \                     macTxBe:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          uint8 macTxCsmaBackoffDelay;
   \                     macTxCsmaBackoffDelay:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    108          
    109          
    110          /* ------------------------------------------------------------------------------------------------
    111           *                                         Local Variables
    112           * ------------------------------------------------------------------------------------------------
    113           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          static uint8 nb;
   \                     nb:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          static uint8 txSeqn;
   \                     txSeqn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          static uint8 txAckReq;
   \                     txAckReq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          static uint8 txRetransmitFlag;
   \                     txRetransmitFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    118          
    119          
    120          /* ------------------------------------------------------------------------------------------------
    121           *                                         Local Prototypes
    122           * ------------------------------------------------------------------------------------------------
    123           */
    124          static void txCsmaPrep(void);
    125          static void txGo(void);
    126          static void txCsmaGo(void);
    127          static void txComplete(uint8 status);
    128          
    129          
    130          /**************************************************************************************************
    131           * @fn          macTxInit
    132           *
    133           * @brief       Initialize variables for tx module.
    134           *
    135           * @param       none
    136           *
    137           * @return      none
    138           **************************************************************************************************
    139           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    140          MAC_INTERNAL_API void macTxInit(void)
   \                     macTxInit:
    141          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    142            macTxActive      = MAC_TX_ACTIVE_NO_ACTIVITY;
   \   000004   90....       MOV       DPTR,#macTxActive
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
    143            txRetransmitFlag = 0;
   \   000009   90....       MOV       DPTR,#txRetransmitFlag
   \   00000C   F0           MOVX      @DPTR,A
    144          }
   \   00000D   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    145          
    146          
    147          /**************************************************************************************************
    148           * @fn          macTxHaltCleanup
    149           *
    150           * @brief       -
    151           *
    152           * @param       none
    153           *
    154           * @return      none
    155           **************************************************************************************************
    156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    157          MAC_INTERNAL_API void macTxHaltCleanup(void)
   \                     macTxHaltCleanup:
    158          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    159            MAC_RADIO_TX_RESET();
   \   000004                ; Setup parameters for call to function macCspTxReset
   \   000004   12....       LCALL     `??macCspTxReset::?relay`; Banked call to: macCspTxReset
    160            macTxInit();
   \   000007                ; Setup parameters for call to function macTxInit
   \   000007   12....       LCALL     `??macTxInit::?relay`; Banked call to: macTxInit
    161          }
   \   00000A   02....       LJMP      ?Subroutine0 & 0xFFFF
    162          
    163          
    164          /**************************************************************************************************
    165           * @fn          macTxFrame
    166           *
    167           * @brief       Transmit the frame pointed to by pMacDataTx with the specified type.
    168           *              NOTE! It is not legal to call this function from interrupt context.
    169           *
    170           * @param       txType - type of transmit
    171           *
    172           * @return      none
    173           **************************************************************************************************
    174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175          MAC_INTERNAL_API void macTxFrame(uint8 txType)
   \                     macTxFrame:
    176          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    177            MAC_ASSERT(!macTxActive);            /* transmit on top of transmit */
   \   000007   90....       MOV       DPTR,#macTxActive
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6003         JZ        ??macTxFrame_0
   \   00000D                ; Setup parameters for call to function halAssertHandler
   \   00000D   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    178          
    179            /* mark transmit as active */
    180            macTxActive = MAC_TX_ACTIVE_INITIALIZE;
   \                     ??macTxFrame_0:
   \   000010   90....       MOV       DPTR,#macTxActive
   \   000013   7401         MOV       A,#0x1
   \   000015   F0           MOVX      @DPTR,A
    181          
    182            /*
    183             *  The MAC will not enter sleep mode if there is an active transmit.  However, if macSleep() is
    184             *  ever called from interrupt context, it possible to enter sleep state after a transmit is
    185             *  intiated but before macTxActive is set.  To recover from this, the transmit must be aborted
    186             *  and proper notificiation given to high-level.
    187             */
    188            if (macSleepState != MAC_SLEEP_STATE_AWAKE)
   \   000016   90....       MOV       DPTR,#macSleepState
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6008         JZ        ??macTxFrame_1
    189            {
    190              /* notify high-level that transmit had to be aborted */
    191              txComplete(MAC_TX_ABORTED);
   \   00001C                ; Setup parameters for call to function txComplete
   \   00001C   791D         MOV       R1,#0x1d
   \   00001E   12....       LCALL     `??txComplete::?relay`; Banked call to: txComplete
    192          
    193              /* exit from transmit logic */
    194              return;
   \   000021   02....       LJMP      ??macTxFrame_2 & 0xFFFF
    195            }
    196          
    197            /* save transmit type */
    198            macTxType = txType;
   \                     ??macTxFrame_1:
   \   000024   EE           MOV       A,R6
   \   000025   90....       MOV       DPTR,#macTxType
   \   000028   F0           MOVX      @DPTR,A
    199          
    200            /*-------------------------------------------------------------------------------
    201             *  Prepare for transmit.
    202             */
    203            if (macTxType == MAC_TX_TYPE_SLOTTED)
   \   000029   6402         XRL       A,#0x2
   \   00002B   7005         JNZ       ??macTxFrame_3
    204            {
    205              MAC_RADIO_TX_PREP_SLOTTED();
   \   00002D                ; Setup parameters for call to function macCspTxPrepSlotted
   \   00002D   12....       LCALL     `??macCspTxPrepSlotted::?relay`; Banked call to: macCspTxPrepSlotted
   \   000030   804A         SJMP      ??macTxFrame_4
    206            }
    207            else
    208            {
    209              MAC_ASSERT((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) || (macTxType == MAC_TX_TYPE_UNSLOTTED_CSMA));
   \                     ??macTxFrame_3:
   \   000032   E0           MOVX      A,@DPTR
   \   000033   6007         JZ        ??macTxFrame_5
   \   000035   6401         XRL       A,#0x1
   \   000037   6003         JZ        ??macTxFrame_5
   \   000039                ; Setup parameters for call to function halAssertHandler
   \   000039   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    210          
    211              nb = 0;
   \                     ??macTxFrame_5:
   \   00003C   90....       MOV       DPTR,#nb
   \   00003F   E4           CLR       A
   \   000040   F0           MOVX      @DPTR,A
    212              macTxBe = (pMacDataTx->internal.txOptions & MAC_TXOPTION_ALT_BE) ? macPib.altBe : macPib.minBe;
   \   000041   90....       MOV       DPTR,#pMacDataTx
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   C8           XCH       A,R0
   \   000049   240E         ADD       A,#0xe
   \   00004B   F582         MOV       DPL,A
   \   00004D   E4           CLR       A
   \   00004E   38           ADDC      A,R0
   \   00004F   F583         MOV       DPH,A
   \   000051   E0           MOVX      A,@DPTR
   \   000052   A2E6         MOV       C,0xE0 /* A   */.6
   \   000054   5005         JNC       ??macTxFrame_6
   \   000056   90....       MOV       DPTR,#macPib + 58
   \   000059   8003         SJMP      ??macTxFrame_7
   \                     ??macTxFrame_6:
   \   00005B   90....       MOV       DPTR,#macPib + 28
   \                     ??macTxFrame_7:
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   90....       MOV       DPTR,#macTxBe
   \   000062   12....       LCALL     ?Subroutine4 & 0xFFFF
    213          
    214              if ((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) && (macPib.battLifeExt))
   \                     ??CrossCallReturnLabel_4:
   \   000065   7012         JNZ       ??macTxFrame_8
   \   000067   90....       MOV       DPTR,#macPib + 3
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   600C         JZ        ??macTxFrame_8
    215              {
    216                macTxBe = MIN(2, macTxBe);
   \   00006D   90....       MOV       DPTR,#macTxBe
   \   000070   E0           MOVX      A,@DPTR
   \   000071   C3           CLR       C
   \   000072   9403         SUBB      A,#0x3
   \   000074   4003         JC        ??macTxFrame_8
   \   000076   7402         MOV       A,#0x2
   \   000078   F0           MOVX      @DPTR,A
    217              }
    218          
    219              txCsmaPrep();
   \                     ??macTxFrame_8:
   \   000079                ; Setup parameters for call to function txCsmaPrep
   \   000079   12....       LCALL     `??txCsmaPrep::?relay`; Banked call to: txCsmaPrep
    220            }
    221          
    222            /*-------------------------------------------------------------------------------
    223             *  Load transmit FIFO unless this is a retransmit.  No need to write
    224             *  the FIFO again in that case.
    225             */
    226            if (!txRetransmitFlag)
   \                     ??macTxFrame_4:
   \   00007C   90....       MOV       DPTR,#txRetransmitFlag
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   705A         JNZ       ??macTxFrame_9
    227            {
    228              uint8 * p;
    229              uint8   lenMhrMsdu;
    230          
    231              MAC_ASSERT(pMacDataTx != NULL); /* must have data to transmit */
   \   000082   90....       MOV       DPTR,#pMacDataTx
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F8           MOV       R0,A
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F9           MOV       R1,A
   \   00008A   E8           MOV       A,R0
   \   00008B   49           ORL       A,R1
   \   00008C   7003         JNZ       ??macTxFrame_10
   \   00008E                ; Setup parameters for call to function halAssertHandler
   \   00008E   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    232          
    233              /* save needed parameters */
    234              txAckReq = MAC_ACK_REQUEST(pMacDataTx->msdu.p);
   \                     ??macTxFrame_10:
   \   000091   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F8           MOV       R0,A
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F9           MOV       R1,A
   \   000099   8882         MOV       DPL,R0
   \   00009B   F583         MOV       DPH,A
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   5420         ANL       A,#0x20
   \   0000A0   90....       MOV       DPTR,#txAckReq
   \   0000A3   F0           MOVX      @DPTR,A
    235              txSeqn   = MAC_SEQ_NUMBER(pMacDataTx->msdu.p);
   \   0000A4   8882         MOV       DPL,R0
   \   0000A6   8983         MOV       DPH,R1
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   90....       MOV       DPTR,#txSeqn
   \   0000AE   F0           MOVX      @DPTR,A
    236          
    237              /* set length of frame (note: use of term msdu is a misnomer, here it's actually mhr + msdu) */
    238              lenMhrMsdu = pMacDataTx->msdu.len;
   \   0000AF   90....       MOV       DPTR,#pMacDataTx
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   FA           MOV       R2,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F583         MOV       DPH,A
   \   0000B8   8A82         MOV       DPL,R2
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   FA           MOV       R2,A
    239          
    240              /* calling code guarantees an unused prepended byte  */
    241              p = pMacDataTx->msdu.p - PREPENDED_BYTE_LEN;
   \   0000C0   E8           MOV       A,R0
   \   0000C1   24FF         ADD       A,#-0x1
   \   0000C3   F582         MOV       DPL,A
   \   0000C5   E9           MOV       A,R1
   \   0000C6   34FF         ADDC      A,#-0x1
   \   0000C8   F583         MOV       DPH,A
    242          
    243              /* first byte of buffer is length of MPDU */
    244              *p = lenMhrMsdu + MFR_LEN;
   \   0000CA   7402         MOV       A,#0x2
   \   0000CC   2A           ADD       A,R2
   \   0000CD   F0           MOVX      @DPTR,A
    245          
    246              /*
    247               *  Flush the TX FIFO.  This is necessary in case the previous transmit was never
    248               *  actually sent (e.g. CSMA failed without strobing TXON).  If bytes are written to
    249               *  the FIFO but not transmitted, they remain in the FIFO to be transmitted whenever
    250               *  a strobe of TXON does happen.
    251               */
    252              MAC_RADIO_FLUSH_TX_FIFO();
   \   0000CE   75E1EE       MOV       0xe1,#-0x12
    253          
    254              /* write bytes to FIFO, prepended byte is included, MFR is not (it's generated by hardware) */
    255              MAC_RADIO_WRITE_TX_FIFO(p, PREPENDED_BYTE_LEN + lenMhrMsdu);
   \   0000D1                ; Setup parameters for call to function macMemWriteTxFifo
   \   0000D1   7401         MOV       A,#0x1
   \   0000D3   2A           ADD       A,R2
   \   0000D4   F9           MOV       R1,A
   \   0000D5   AA82         MOV       R2,DPL
   \   0000D7   AB83         MOV       R3,DPH
   \   0000D9   12....       LCALL     `??macMemWriteTxFifo::?relay`; Banked call to: macMemWriteTxFifo
    256            }
    257          
    258            /*-------------------------------------------------------------------------------
    259             *  If not receiving, start the transmit.  If receive is active
    260             *  queue up the transmit.
    261             *
    262             *  Critical sections around the state change prevents any sort of race condition
    263             *  with  macTxStartQueuedFrame().  This guarantees function txGo() will only be
    264             *  called once.
    265             */
    266            {
    267              halIntState_t  s;
    268          
    269              HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macTxFrame_9:
   \   0000DC   A2AF         MOV       C,0xa8.7
   \   0000DE   E4           CLR       A
   \   0000DF   33           RLC       A
   \   0000E0   F8           MOV       R0,A
   \   0000E1   C2AF         CLR       0xa8.7
    270              if (!macRxActive && !macRxOutgoingAckFlag)
   \   0000E3   90....       MOV       DPTR,#macRxActive
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   700E         JNZ       ??macTxFrame_11
   \   0000E9   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   7008         JNZ       ??macTxFrame_11
    271              {
    272                macTxActive = MAC_TX_ACTIVE_GO;
   \   0000EF   90....       MOV       DPTR,#macTxActive
   \   0000F2   12....       LCALL     ?Subroutine2 & 0xFFFF
    273                HAL_EXIT_CRITICAL_SECTION(s);
    274                txGo();
    275              }
   \                     ??CrossCallReturnLabel_0:
   \   0000F5   800B         SJMP      ??macTxFrame_2
    276              else
    277              {
    278                macTxActive = MAC_TX_ACTIVE_QUEUED;
   \                     ??macTxFrame_11:
   \   0000F7   90....       MOV       DPTR,#macTxActive
   \   0000FA   7402         MOV       A,#0x2
   \   0000FC   F0           MOVX      @DPTR,A
    279                HAL_EXIT_CRITICAL_SECTION(s);
   \   0000FD   E8           MOV       A,R0
   \   0000FE   A2E0         MOV       C,0xE0 /* A   */.0
   \   000100   92AF         MOV       0xa8.7,C
    280              }
    281            }
    282          }
   \                     ??macTxFrame_2:
   \   000102   02....       LJMP      ?Subroutine1 & 0xFFFF
   \   000105                REQUIRE RFST
   \   000105                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function macTxFrame
   \   000001   90....       MOV       DPTR,#macTxType
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7483         MOV       A,#-0x7d
   \   000002   F0           MOVX      @DPTR,A
   \   000003   E8           MOV       A,R0
   \   000004   A2E0         MOV       C,0xE0 /* A   */.0
   \   000006   92AF         MOV       0xa8.7,C
   \   000008                ; Setup parameters for call to function txGo
   \   000008                ; Setup parameters for call to function txGo
   \   000008   12....       LCALL     `??txGo::?relay` ; Banked call to: txGo
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV       DPTR,#pMacDataTx
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F583         MOV       DPH,A
   \   000009   8882         MOV       DPL,R0
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET
    283          
    284          
    285          /*=================================================================================================
    286           * @fn          txCsmaPrep
    287           *
    288           * @brief       Prepare/initialize for a CSMA transmit.
    289           *
    290           * @param       none
    291           *
    292           * @return      none
    293           *=================================================================================================
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          static void txCsmaPrep(void)
   \                     txCsmaPrep:
    296          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    297            macTxCsmaBackoffDelay = macRadioRandomByte() & ((1 << macTxBe) - 1);
   \   000005                ; Setup parameters for call to function macRadioRandomByte
   \   000005   12....       LCALL     `??macRadioRandomByte::?relay`; Banked call to: macRadioRandomByte
   \   000008   E9           MOV       A,R1
   \   000009   F9           MOV       R1,A
   \   00000A   75..01       MOV       ?V0,#0x1
   \   00000D   75..00       MOV       ?V1,#0x0
   \   000010   90....       MOV       DPTR,#macTxBe
   \   000013   E0           MOVX      A,@DPTR
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?S_SHL
   \   000019   E5..         MOV       A,?V0
   \   00001B   14           DEC       A
   \   00001C   59           ANL       A,R1
   \   00001D   90....       MOV       DPTR,#macTxCsmaBackoffDelay
   \   000020   12....       LCALL     ?Subroutine4 & 0xFFFF
    298          
    299            if (macTxType == MAC_TX_TYPE_SLOTTED_CSMA)
   \                     ??CrossCallReturnLabel_5:
   \   000023   7005         JNZ       ??txCsmaPrep_0
    300            {
    301              MAC_RADIO_TX_PREP_CSMA_SLOTTED();
   \   000025                ; Setup parameters for call to function macCspTxPrepCsmaSlotted
   \   000025   12....       LCALL     `??macCspTxPrepCsmaSlotted::?relay`; Banked call to: macCspTxPrepCsmaSlotted
   \   000028   8003         SJMP      ??txCsmaPrep_1
    302            }
    303            else
    304            {
    305              MAC_RADIO_TX_PREP_CSMA_UNSLOTTED();
   \                     ??txCsmaPrep_0:
   \   00002A                ; Setup parameters for call to function macCspTxPrepCsmaUnslotted
   \   00002A   12....       LCALL     `??macCspTxPrepCsmaUnslotted::?relay`; Banked call to: macCspTxPrepCsmaUnslotted
    306            }
    307          }
   \                     ??txCsmaPrep_1:
   \   00002D   7F02         MOV       R7,#0x2
   \   00002F   02....       LJMP      ?BANKED_LEAVE_XDATA
    308          
    309          
    310          /*=================================================================================================
    311           * @fn          txGo
    312           *
    313           * @brief       Start a transmit going.
    314           *
    315           * @param       none
    316           *
    317           * @return      none
    318           *=================================================================================================
    319           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    320          static void txGo(void)
   \                     txGo:
    321          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    322            /*
    323             *  If execution has reached this point, any transmitted ACK has long since completed.  It is
    324             *  possible though that there is still a pending callback.  If so, it is irrelevant and needs to
    325             *  be canceled at this point.
    326             */
    327            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000004   9061A4       MOV       DPTR,#0x61a4
   \   000007   E0           MOVX      A,@DPTR
   \   000008   C2E0         CLR       0xE0 /* A   */.0
   \   00000A   F0           MOVX      @DPTR,A
    328            macRxOutgoingAckFlag = 0;
   \   00000B   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00000E   E4           CLR       A
   \   00000F   12....       LCALL     ?Subroutine4 & 0xFFFF
    329          
    330            /* based on type of transmit, call the correct "go" functionality */
    331            if (macTxType == MAC_TX_TYPE_SLOTTED)
   \                     ??CrossCallReturnLabel_6:
   \   000012   6402         XRL       A,#0x2
   \   000014   7005         JNZ       ??txGo_0
    332            {
    333              MAC_RADIO_TX_GO_SLOTTED();
   \   000016                ; Setup parameters for call to function macCspTxGoSlotted
   \   000016   12....       LCALL     `??macCspTxGoSlotted::?relay`; Banked call to: macCspTxGoSlotted
   \   000019   8003         SJMP      ??txGo_1
    334            }
    335            else
    336            {
    337              txCsmaGo();
   \                     ??txGo_0:
   \   00001B                ; Setup parameters for call to function txCsmaGo
   \   00001B   12....       LCALL     `??txCsmaGo::?relay`; Banked call to: txCsmaGo
    338            }
    339          }
   \                     ??txGo_1:
   \   00001E   80..         SJMP      ?Subroutine0
    340          
    341          
    342          /*=================================================================================================
    343           * @fn          txCsmaGo
    344           *
    345           * @brief       Start a CSMA transmit going.
    346           *
    347           * @param       none
    348           *
    349           * @return      none
    350           *=================================================================================================
    351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          static void txCsmaGo(void)
   \                     txCsmaGo:
    353          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    354            /* The CSMA needs to be performed at normal CCA threshold.
    355             * Turn off the CC2591 compression workaround. 
    356             */
    357            COMPRESSION_WORKAROUND_OFF();
    358          
    359            if (macTxType == MAC_TX_TYPE_SLOTTED_CSMA)
   \   000004   90....       MOV       DPTR,#macTxType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7014         JNZ       ??txCsmaGo_0
    360            {
    361              if (macTxCsmaBackoffDelay >= macDataTxTimeAvailable())
   \   00000A                ; Setup parameters for call to function macDataTxTimeAvailable
   \   00000A   12....       LCALL     `??macDataTxTimeAvailable::?relay`; Banked call to: macDataTxTimeAvailable
   \   00000D   E9           MOV       A,R1
   \   00000E   F8           MOV       R0,A
   \   00000F   90....       MOV       DPTR,#macTxCsmaBackoffDelay
   \   000012   E0           MOVX      A,@DPTR
   \   000013   C3           CLR       C
   \   000014   98           SUBB      A,R0
   \   000015   4007         JC        ??txCsmaGo_0
    362              {
    363                txComplete(MAC_NO_TIME);
   \   000017                ; Setup parameters for call to function txComplete
   \   000017   791C         MOV       R1,#0x1c
   \   000019   12....       LCALL     `??txComplete::?relay`; Banked call to: txComplete
    364                return;
   \   00001C   8003         SJMP      ??txCsmaGo_1
    365              }
    366              MAC_RADIO_TX_GO_SLOTTED_CSMA();
    367            }
    368            else
    369            {
    370              MAC_RADIO_TX_GO_CSMA();
   \                     ??txCsmaGo_0:
   \   00001E                ; Setup parameters for call to function macCspTxGoCsma
   \   00001E   12....       LCALL     `??macCspTxGoCsma::?relay`; Banked call to: macCspTxGoCsma
    371            }
    372          }
   \                     ??txCsmaGo_1:
   \   000021   80..         SJMP      ?Subroutine0
    373          
    374          
    375          /**************************************************************************************************
    376           * @fn          macTxFrameRetransmit
    377           *
    378           * @brief       Retransmit the last frame.
    379           *
    380           * @param       none
    381           *
    382           * @return      none
    383           **************************************************************************************************
    384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          MAC_INTERNAL_API void macTxFrameRetransmit(void)
   \                     macTxFrameRetransmit:
    386          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    387            txRetransmitFlag = 1;
   \   000004   90....       MOV       DPTR,#txRetransmitFlag
   \   000007   7401         MOV       A,#0x1
   \   000009   12....       LCALL     ?Subroutine4 & 0xFFFF
    388            macTxFrame(macTxType);
   \                     ??CrossCallReturnLabel_7:
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??macTxFrame::?relay`; Banked call to: macTxFrame
    389          }
   \   000010                REQUIRE ?Subroutine0
   \   000010                ; // Fall through to label ?Subroutine0
    390          
    391          
    392          /**************************************************************************************************
    393           * @fn          macTxStartQueuedFrame
    394           *
    395           * @brief       See if there is a queued frame waiting to transmit.  If so, initiate
    396           *              the transmit now.
    397           *
    398           * @param       none
    399           *
    400           * @return      none
    401           **************************************************************************************************
    402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          MAC_INTERNAL_API void macTxStartQueuedFrame(void)
   \                     macTxStartQueuedFrame:
    404          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    405            halIntState_t  s;
    406          
    407            MAC_ASSERT(!macRxActive && !macRxOutgoingAckFlag); /* queued frames should not transmit in middle of a receive */
   \   000004   90....       MOV       DPTR,#macRxActive
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7006         JNZ       ??macTxStartQueuedFrame_0
   \   00000A   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6003         JZ        ??macTxStartQueuedFrame_1
   \                     ??macTxStartQueuedFrame_0:
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    408          
    409            /*
    410             *  Critical sections around the state change prevents any sort of race condition
    411             *  with macTxFrame().  This guarantees function txGo() will only be be called once.
    412             */
    413            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macTxStartQueuedFrame_1:
   \   000013   A2AF         MOV       C,0xa8.7
   \   000015   E4           CLR       A
   \   000016   33           RLC       A
   \   000017   F8           MOV       R0,A
   \   000018   C2AF         CLR       0xa8.7
    414            if (macTxActive == MAC_TX_ACTIVE_QUEUED)
   \   00001A   90....       MOV       DPTR,#macTxActive
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6402         XRL       A,#0x2
   \   000020   7005         JNZ       ??macTxStartQueuedFrame_2
    415            {
    416              macTxActive = MAC_TX_ACTIVE_GO;
   \   000022   12....       LCALL     ?Subroutine2 & 0xFFFF
    417              HAL_EXIT_CRITICAL_SECTION(s);
    418              txGo();
    419            }
   \                     ??CrossCallReturnLabel_1:
   \   000025   8005         SJMP      ??macTxStartQueuedFrame_3
    420            else
    421            {
    422              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxStartQueuedFrame_2:
   \   000027   E8           MOV       A,R0
   \   000028   A2E0         MOV       C,0xE0 /* A   */.0
   \   00002A   92AF         MOV       0xa8.7,C
    423            }
    424          }
   \                     ??macTxStartQueuedFrame_3:
   \   00002C   80..         SJMP      ?Subroutine0
   \   00002E                REQUIRE _A_IEN0
    425          
    426          
    427          /**************************************************************************************************
    428           * @fn          macTxChannelBusyCallback
    429           *
    430           * @brief       This callback is executed if a CSMA transmit was attempted but the channel
    431           *              was busy.
    432           *
    433           * @param       none
    434           *
    435           * @return      none
    436           **************************************************************************************************
    437           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    438          MAC_INTERNAL_API void macTxChannelBusyCallback(void)
   \                     macTxChannelBusyCallback:
    439          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    440            MAC_ASSERT((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) || (macTxType == MAC_TX_TYPE_UNSLOTTED_CSMA));
   \   000004   90....       MOV       DPTR,#macTxType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6007         JZ        ??macTxChannelBusyCallback_0
   \   00000A   6401         XRL       A,#0x1
   \   00000C   6003         JZ        ??macTxChannelBusyCallback_0
   \   00000E                ; Setup parameters for call to function halAssertHandler
   \   00000E   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    441          
    442            /* turn off receiver if allowed */
    443            macTxActive = MAC_TX_ACTIVE_CHANNEL_BUSY;
   \                     ??macTxChannelBusyCallback_0:
   \   000011   90....       MOV       DPTR,#macTxActive
   \   000014   7404         MOV       A,#0x4
   \   000016   F0           MOVX      @DPTR,A
    444            macRxOffRequest();
   \   000017                ; Setup parameters for call to function macRxOffRequest
   \   000017   12....       LCALL     `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
    445          
    446            /*  clear channel assement failed, follow through with CSMA algorithm */
    447            nb++;
   \   00001A   90....       MOV       DPTR,#nb
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   04           INC       A
   \   00001F   F0           MOVX      @DPTR,A
    448            if (nb > macPib.maxCsmaBackoffs)
   \   000020   F8           MOV       R0,A
   \   000021   90....       MOV       DPTR,#macPib + 27
   \   000024   E0           MOVX      A,@DPTR
   \   000025   C3           CLR       C
   \   000026   98           SUBB      A,R0
   \   000027   5007         JNC       ??macTxChannelBusyCallback_1
    449            {
    450              txComplete(MAC_CHANNEL_ACCESS_FAILURE);
   \   000029                ; Setup parameters for call to function txComplete
   \   000029   79E1         MOV       R1,#-0x1f
   \   00002B   12....       LCALL     `??txComplete::?relay`; Banked call to: txComplete
   \   00002E   8036         SJMP      ??macTxChannelBusyCallback_2
    451            }
    452            else
    453            {
    454              macTxBe = MIN(macTxBe+1, macPib.maxBe);
   \                     ??macTxChannelBusyCallback_1:
   \   000030   90....       MOV       DPTR,#macTxBe
   \   000033   E0           MOVX      A,@DPTR
   \   000034   7900         MOV       R1,#0x0
   \   000036   2401         ADD       A,#0x1
   \   000038   F8           MOV       R0,A
   \   000039   5001         JNC       ??macTxChannelBusyCallback_3
   \   00003B   09           INC       R1
   \                     ??macTxChannelBusyCallback_3:
   \   00003C   90....       MOV       DPTR,#macPib + 39
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FA           MOV       R2,A
   \   000041   C3           CLR       C
   \   000042   E8           MOV       A,R0
   \   000043   9A           SUBB      A,R2
   \   000044   E9           MOV       A,R1
   \   000045   9400         SUBB      A,#0x0
   \   000047   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000049   65D0         XRL       A,PSW
   \   00004B   33           RLC       A
   \   00004C   5007         JNC       ??macTxChannelBusyCallback_4
   \   00004E   90....       MOV       DPTR,#macTxBe
   \   000051   E0           MOVX      A,@DPTR
   \   000052   04           INC       A
   \   000053   8004         SJMP      ??macTxChannelBusyCallback_5
   \                     ??macTxChannelBusyCallback_4:
   \   000055   E0           MOVX      A,@DPTR
   \   000056   90....       MOV       DPTR,#macTxBe
   \                     ??macTxChannelBusyCallback_5:
   \   000059   F0           MOVX      @DPTR,A
    455              txCsmaPrep();
   \   00005A                ; Setup parameters for call to function txCsmaPrep
   \   00005A   12....       LCALL     `??txCsmaPrep::?relay`; Banked call to: txCsmaPrep
    456              macTxActive = MAC_TX_ACTIVE_GO;
   \   00005D   90....       MOV       DPTR,#macTxActive
   \   000060   7483         MOV       A,#-0x7d
   \   000062   F0           MOVX      @DPTR,A
    457              txCsmaGo();
   \   000063                ; Setup parameters for call to function txCsmaGo
   \   000063   12....       LCALL     `??txCsmaGo::?relay`; Banked call to: txCsmaGo
    458            }
    459          }
   \                     ??macTxChannelBusyCallback_2:
   \   000066   02....       LJMP      ?Subroutine0 & 0xFFFF
    460          
    461          
    462          /**************************************************************************************************
    463           * @fn          macTxDoneCallback
    464           *
    465           * @brief       This callback is executed when transmit completes.
    466           *
    467           * @param       none
    468           *
    469           * @return      none
    470           **************************************************************************************************
    471           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          MAC_INTERNAL_API void macTxDoneCallback(void)
   \                     macTxDoneCallback:
    473          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    474            halIntState_t  s;
    475          
    476            /*
    477             *  There is a small chance this function could be called twice for a single transmit.
    478             *  To prevent logic from executing twice, the state variable macTxActive is used as
    479             *  a gating mechanism to guarantee single time execution.
    480             */
    481            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FE           MOV       R6,A
   \   00000A   C2AF         CLR       0xa8.7
    482            if (macTxActive == MAC_TX_ACTIVE_GO)
   \   00000C   90....       MOV       DPTR,#macTxActive
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6483         XRL       A,#0x83
   \   000012   701E         JNZ       ??macTxDoneCallback_0
    483            {
    484              /* see if ACK was requested */
    485              if (!txAckReq)
   \   000014   90....       MOV       DPTR,#txAckReq
   \   000017   E0           MOVX      A,@DPTR
   \   000018   90....       MOV       DPTR,#macTxActive
   \   00001B   700F         JNZ       ??macTxDoneCallback_1
    486              {
    487                macTxActive = MAC_TX_ACTIVE_DONE;
   \   00001D   7485         MOV       A,#-0x7b
   \   00001F   F0           MOVX      @DPTR,A
    488                HAL_EXIT_CRITICAL_SECTION(s);
   \   000020   EE           MOV       A,R6
   \   000021   A2E0         MOV       C,0xE0 /* A   */.0
   \   000023   92AF         MOV       0xa8.7,C
    489          
    490                /* ACK was not requested, transmit is complete */
    491                txComplete(MAC_SUCCESS);
   \   000025                ; Setup parameters for call to function txComplete
   \   000025   7900         MOV       R1,#0x0
   \   000027   12....       LCALL     `??txComplete::?relay`; Banked call to: txComplete
   \   00002A   800B         SJMP      ??macTxDoneCallback_2
    492              }
    493              else
    494              {
    495                /*
    496                 *  ACK was requested - must wait to receive it.  A timer is set
    497                 *  to expire after the timeout duration for waiting for an ACK.
    498                 *  If an ACK is received, the function macTxAckReceived() is called.
    499                 *  If an ACK is not received within the timeout period,
    500                 *  the function macTxAckNotReceivedCallback() is called.
    501                 */
    502                macTxActive = MAC_TX_ACTIVE_LISTEN_FOR_ACK;
   \                     ??macTxDoneCallback_1:
   \   00002C   7486         MOV       A,#-0x7a
   \   00002E   F0           MOVX      @DPTR,A
    503                MAC_RADIO_TX_REQUEST_ACK_TIMEOUT_CALLBACK();
   \   00002F                ; Setup parameters for call to function macCspTxRequestAckTimeoutCallback
   \   00002F   12....       LCALL     `??macCspTxRequestAckTimeoutCallback::?relay`; Banked call to: macCspTxRequestAckTimeoutCallback
    504                HAL_EXIT_CRITICAL_SECTION(s);
    505              }
    506            }
    507            else
    508            {
    509              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxDoneCallback_0:
   \   000032   EE           MOV       A,R6
   \   000033   A2E0         MOV       C,0xE0 /* A   */.0
   \   000035   92AF         MOV       0xa8.7,C
    510            }
    511          }
   \                     ??macTxDoneCallback_2:
   \   000037   80..         SJMP      ?Subroutine1
   \   000039                REQUIRE _A_IEN0
    512          
    513          
    514          /**************************************************************************************************
    515           * @fn          macTxAckReceivedCallback
    516           *
    517           * @brief       This function is called by the receive logic when an ACK is received and
    518           *              transmit logic is listening for an ACK.
    519           *
    520           * @param       seqn        - sequence number of received ACK
    521           * @param       pendingFlag - set if pending flag of ACK is set, cleared otherwise
    522           *
    523           * @return      none
    524           **************************************************************************************************
    525           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    526          MAC_INTERNAL_API void macTxAckReceivedCallback(uint8 seqn, uint8 pendingFlag)
   \                     macTxAckReceivedCallback:
    527          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   8A..         MOV       ?V0,R2
    528            halIntState_t  s;
    529          
    530            /* only process if listening for an ACK; critical section prevents race condition problems */
    531            HAL_ENTER_CRITICAL_SECTION(s);
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   FE           MOV       R6,A
   \   00000E   C2AF         CLR       0xa8.7
    532            if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   000010   90....       MOV       DPTR,#macTxActive
   \   000013   E0           MOVX      A,@DPTR
   \   000014   6486         XRL       A,#0x86
   \   000016   701D         JNZ       ??macTxAckReceivedCallback_0
    533            {
    534              macTxActive = MAC_TX_ACTIVE_POST_ACK;
   \   000018   12....       LCALL     ?Subroutine5 & 0xFFFF
    535              MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK();
    536              HAL_EXIT_CRITICAL_SECTION(s);
    537          
    538              /* see if the sequence number of received ACK matches sequence number of packet just sent */
    539              if (seqn == txSeqn)
   \                     ??CrossCallReturnLabel_8:
   \   00001B   90....       MOV       DPTR,#txSeqn
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6F           XRL       A,R7
   \   000020   700C         JNZ       ??macTxAckReceivedCallback_1
    540              {
    541                /*
    542                 *  Sequence numbers match so transmit is successful.  Return appropriate
    543                 *  status based on the pending flag of the received ACK.
    544                 */
    545                if (pendingFlag)
   \   000022   E5..         MOV       A,?V0
   \   000024   6004         JZ        ??macTxAckReceivedCallback_2
    546                {
    547                  txComplete(MAC_ACK_PENDING);
   \   000026                ; Setup parameters for call to function txComplete
   \   000026   791B         MOV       R1,#0x1b
   \   000028   8006         SJMP      ??macTxAckReceivedCallback_3
    548                }
    549                else
    550                {
    551                  txComplete(MAC_SUCCESS);
   \                     ??macTxAckReceivedCallback_2:
   \   00002A                ; Setup parameters for call to function txComplete
   \   00002A   7900         MOV       R1,#0x0
   \   00002C   8002         SJMP      ??macTxAckReceivedCallback_3
    552                }
    553              }
    554              else
    555              {
    556                /* sequence number did not match; per spec, transmit failed at this point */
    557                txComplete(MAC_NO_ACK);
   \                     ??macTxAckReceivedCallback_1:
   \   00002E                ; Setup parameters for call to function txComplete
   \   00002E   79E9         MOV       R1,#-0x17
   \                     ??macTxAckReceivedCallback_3:
   \   000030   12....       LCALL     `??txComplete::?relay`; Banked call to: txComplete
   \   000033   8005         SJMP      ??macTxAckReceivedCallback_4
    558              }
    559            }
    560            else
    561            {
    562              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxAckReceivedCallback_0:
   \   000035   EE           MOV       A,R6
   \   000036   A2E0         MOV       C,0xE0 /* A   */.0
   \   000038   92AF         MOV       0xa8.7,C
    563            }
    564          }
   \                     ??macTxAckReceivedCallback_4:
   \   00003A                REQUIRE ?Subroutine1
   \   00003A                REQUIRE _A_IEN0
   \   00003A                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7487         MOV       A,#-0x79
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function macCspTxCancelAckTimeoutCallback
   \   000003                ; Setup parameters for call to function macCspTxCancelAckTimeoutCallback
   \   000003   12....       LCALL     `??macCspTxCancelAckTimeoutCallback::?relay`; Banked call to: macCspTxCancelAckTimeoutCallback
   \   000006   EE           MOV       A,R6
   \   000007   A2E0         MOV       C,0xE0 /* A   */.0
   \   000009   92AF         MOV       0xa8.7,C
   \   00000B   22           RET
    565          
    566          
    567          /**************************************************************************************************
    568           * @fn          macTxAckNotReceivedCallback
    569           *
    570           * @brief       This function is called by the receive logic when transmit is listening
    571           *              for an ACK but something else is received.  It is also called if the
    572           *              listen-for-ACK timeout is reached.
    573           *
    574           * @brief
    575           *
    576           * @param       none
    577           *
    578           * @return      none
    579           **************************************************************************************************
    580           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    581          MAC_INTERNAL_API void macTxAckNotReceivedCallback(void)
   \                     macTxAckNotReceivedCallback:
    582          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    583            halIntState_t  s;
    584          
    585            /* only process if listening for an ACK; critical section prevents race condition problems */
    586            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FE           MOV       R6,A
   \   00000A   C2AF         CLR       0xa8.7
    587            if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   00000C   90....       MOV       DPTR,#macTxActive
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6486         XRL       A,#0x86
   \   000012   700A         JNZ       ??macTxAckNotReceivedCallback_0
    588            {
    589              macTxActive = MAC_TX_ACTIVE_POST_ACK;
   \   000014   12....       LCALL     ?Subroutine5 & 0xFFFF
    590              MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK();
    591              HAL_EXIT_CRITICAL_SECTION(s);
    592          
    593              /* a non-ACK was received when expecting an ACK, per spec transmit is over at this point */
    594              txComplete(MAC_NO_ACK);
   \                     ??CrossCallReturnLabel_9:
   \   000017                ; Setup parameters for call to function txComplete
   \   000017   79E9         MOV       R1,#-0x17
   \   000019   12....       LCALL     `??txComplete::?relay`; Banked call to: txComplete
   \   00001C   8005         SJMP      ??macTxAckNotReceivedCallback_1
    595            }
    596            else
    597            {
    598              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxAckNotReceivedCallback_0:
   \   00001E   EE           MOV       A,R6
   \   00001F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000021   92AF         MOV       0xa8.7,C
    599            }
    600          }
   \                     ??macTxAckNotReceivedCallback_1:
   \   000023   80..         SJMP      ?Subroutine1
   \   000025                REQUIRE _A_IEN0
    601          
    602          
    603          /*=================================================================================================
    604           * @fn          txComplete
    605           *
    606           * @brief       Transmit has completed.  Perform needed maintenance and return status of
    607           *              the transmit via callback function.
    608           *
    609           * @param       status - status of the transmit that just went out
    610           *
    611           * @return      none
    612           *=================================================================================================
    613           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    614          static void txComplete(uint8 status)
   \                     txComplete:
    615          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    616            /* reset the retransmit flag */
    617            txRetransmitFlag = 0;
   \   000007   90....       MOV       DPTR,#txRetransmitFlag
   \   00000A   E4           CLR       A
   \   00000B   F0           MOVX      @DPTR,A
    618          
    619            /* update tx state; turn off receiver if nothing is keeping it on */
    620            macTxActive = MAC_TX_ACTIVE_NO_ACTIVITY;
   \   00000C   90....       MOV       DPTR,#macTxActive
   \   00000F   F0           MOVX      @DPTR,A
    621          
    622            /* turn off receive if allowed */
    623            macRxOffRequest();
   \   000010                ; Setup parameters for call to function macRxOffRequest
   \   000010   12....       LCALL     `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
    624          
    625            /* update transmit power in case there was a change */
    626            macRadioUpdateTxPower();
   \   000013                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000013   12....       LCALL     `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
    627          
    628            /*
    629             *  Channel cannot change during transmit so update it here.  (Channel *can* change during
    630             *  a receive.  The update function resets receive logic and any partially received
    631             *  frame is purged.)
    632             */
    633            macRadioUpdateChannel();
   \   000016                ; Setup parameters for call to function macRadioUpdateChannel
   \   000016   12....       LCALL     `??macRadioUpdateChannel::?relay`; Banked call to: macRadioUpdateChannel
    634          
    635            /* return status of transmit via callback function */
    636            macTxCompleteCallback(status);
   \   000019                ; Setup parameters for call to function macTxCompleteCallback
   \   000019   EE           MOV       A,R6
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??macTxCompleteCallback::?relay`; Banked call to: macTxCompleteCallback
    637          }
   \   00001E   80..         SJMP      ?Subroutine1
    638          
    639          
    640          /**************************************************************************************************
    641           * @fn          macTxTimestampCallback
    642           *
    643           * @brief       This callback function records the timestamp into the receive data structure.
    644           *              It should be called as soon as possible after there is a valid timestamp.
    645           *
    646           * @param       none
    647           *
    648           * @return      none
    649           **************************************************************************************************
    650           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    651          MAC_INTERNAL_API void macTxTimestampCallback(void)
   \                     macTxTimestampCallback:
    652          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    653            MAC_ASSERT(pMacDataTx != NULL); /* transmit structure must be there */
   \   000005   90....       MOV       DPTR,#pMacDataTx
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   E8           MOV       A,R0
   \   00000E   49           ORL       A,R1
   \   00000F   7003         JNZ       ??macTxTimestampCallback_0
   \   000011                ; Setup parameters for call to function halAssertHandler
   \   000011   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    654          
    655            pMacDataTx->internal.timestamp  = macBackoffTimerCapture();
   \                     ??macTxTimestampCallback_0:
   \   000014                ; Setup parameters for call to function macBackoffTimerCapture
   \   000014   12....       LCALL     `??macBackoffTimerCapture::?relay`; Banked call to: macBackoffTimerCapture
   \   000017   8A..         MOV       ?V0,R2
   \   000019   8B..         MOV       ?V1,R3
   \   00001B   8C..         MOV       ?V2,R4
   \   00001D   8D..         MOV       ?V3,R5
   \   00001F   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?L_MOV_TO_X
    656            pMacDataTx->internal.timestamp2 = MAC_RADIO_TIMER_CAPTURE();
   \   00002A                ; Setup parameters for call to function macMcuTimerCapture
   \   00002A   12....       LCALL     `??macMcuTimerCapture::?relay`; Banked call to: macMcuTimerCapture
   \   00002D   8A..         MOV       ?V0,R2
   \   00002F   90....       MOV       DPTR,#pMacDataTx
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FA           MOV       R2,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   CA           XCH       A,R2
   \   000037   2409         ADD       A,#0x9
   \   000039   F582         MOV       DPL,A
   \   00003B   E4           CLR       A
   \   00003C   3A           ADDC      A,R2
   \   00003D   F583         MOV       DPH,A
   \   00003F   E5..         MOV       A,?V0
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   EB           MOV       A,R3
   \   000044   F0           MOVX      @DPTR,A
    657          }
   \   000045   7F04         MOV       R7,#0x4
   \   000047   02....       LJMP      ?BANKED_LEAVE_XDATA
    658          
    659          
    660          /**************************************************************************************************
    661           * @fn          macTxCollisionWithRxCallback
    662           *
    663           * @brief       Function called if transmit strobed on top of a receive.
    664           *
    665           * @param       none
    666           *
    667           * @return      none
    668           **************************************************************************************************
    669           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    670          MAC_INTERNAL_API void macTxCollisionWithRxCallback(void)
   \                     macTxCollisionWithRxCallback:
    671          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    672            macRxHaltCleanup();
   \   000004                ; Setup parameters for call to function macRxHaltCleanup
   \   000004   12....       LCALL     `??macRxHaltCleanup::?relay`; Banked call to: macRxHaltCleanup
    673          }
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macTxInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macTxHaltCleanup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxHaltCleanup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macTxFrame::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??txCsmaPrep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    txCsmaPrep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??txGo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    txGo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??txCsmaGo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    txCsmaGo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macTxFrameRetransmit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxFrameRetransmit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macTxStartQueuedFrame::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxStartQueuedFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macTxChannelBusyCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxChannelBusyCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macTxDoneCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxDoneCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macTxAckReceivedCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxAckReceivedCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macTxAckNotReceivedCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxAckNotReceivedCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??txComplete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    txComplete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macTxTimestampCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxTimestampCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macTxCollisionWithRxCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxCollisionWithRxCallback
    674          
    675          
    676          
    677          /**************************************************************************************************
    678           *                                  Compile Time Integrity Checks
    679           **************************************************************************************************
    680           */
    681          #if (MAC_TX_ACTIVE_NO_ACTIVITY != 0x00)
    682          #error "ERROR! Zero is reserved value of macTxActive. Allows boolean operations, e.g !macTxActive."
    683          #endif
    684          
    685          /**************************************************************************************************
    686          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   macTxAckNotReceivedCallback
        0      9   -> macCspTxCancelAckTimeoutCallback
        0      9   -> txComplete
      0      9   macTxAckReceivedCallback
        0      9   -> macCspTxCancelAckTimeoutCallback
        0      9   -> txComplete
      2      0   macTxChannelBusyCallback
        2      0   -> halAssertHandler
        2      0   -> macRxOffRequest
        2      0   -> txComplete
        2      0   -> txCsmaGo
        2      0   -> txCsmaPrep
      2      0   macTxCollisionWithRxCallback
        2      0   -> macRxHaltCleanup
      0      9   macTxDoneCallback
        0      9   -> macCspTxRequestAckTimeoutCallback
        0      9   -> txComplete
      1      9   macTxFrame
        0      9   -> halAssertHandler
        0      9   -> macCspTxPrepSlotted
        0      9   -> macMemWriteTxFifo
        0      9   -> txComplete
        0      9   -> txCsmaPrep
        0      9   -> txGo
      2      0   macTxFrameRetransmit
        2      0   -> macTxFrame
      2      0   macTxHaltCleanup
        2      0   -> macCspTxReset
        2      0   -> macTxInit
      2      0   macTxInit
      2      0   macTxStartQueuedFrame
        2      0   -> halAssertHandler
        2      0   -> txGo
      0     12   macTxTimestampCallback
        0     12   -> halAssertHandler
        0     12   -> macBackoffTimerCapture
        0     12   -> macMcuTimerCapture
      0     18   txComplete
        0      9   -> macRadioUpdateChannel
        0      9   -> macRadioUpdateTxPower
        0      9   -> macRxOffRequest
        0      9   -> macTxCompleteCallback
      2      0   txCsmaGo
        2      0   -> macCspTxGoCsma
        2      0   -> macDataTxTimeAvailable
        2      0   -> txComplete
      0     19   txCsmaPrep
        0     10   -> macCspTxPrepCsmaSlotted
        0     10   -> macCspTxPrepCsmaUnslotted
        0     10   -> macRadioRandomByte
      2      9   txGo
        2      0   -> macCspTxGoSlotted
        2      0   -> txCsmaGo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
       5  ?Subroutine1
      12  ?Subroutine2
      14  ?Subroutine3
       6  ?Subroutine4
      12  ?Subroutine5
       1  RFST
       1  _A_IEN0
      37  macTxAckNotReceivedCallback
       6  macTxAckNotReceivedCallback::?relay
      58  macTxAckReceivedCallback
       6  macTxAckReceivedCallback::?relay
       1  macTxActive
       1  macTxBe
     105  macTxChannelBusyCallback
       6  macTxChannelBusyCallback::?relay
      10  macTxCollisionWithRxCallback
       6  macTxCollisionWithRxCallback::?relay
       1  macTxCsmaBackoffDelay
      57  macTxDoneCallback
       6  macTxDoneCallback::?relay
     261  macTxFrame
       6  macTxFrame::?relay
      16  macTxFrameRetransmit
       6  macTxFrameRetransmit::?relay
      13  macTxHaltCleanup
       6  macTxHaltCleanup::?relay
      16  macTxInit
       6  macTxInit::?relay
       1  macTxSlottedDelay
      46  macTxStartQueuedFrame
       6  macTxStartQueuedFrame::?relay
      74  macTxTimestampCallback
       6  macTxTimestampCallback::?relay
       1  macTxType
       1  nb
       1  txAckReq
      32  txComplete
       6  txComplete::?relay
      35  txCsmaGo
       6  txCsmaGo::?relay
      50  txCsmaPrep
       6  txCsmaPrep::?relay
      32  txGo
       6  txGo::?relay
       1  txRetransmitFlag
       1  txSeqn

 
 898 bytes in segment BANKED_CODE
  90 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
   1 byte  in segment XDATA_ROM_C
   8 bytes in segment XDATA_Z
 
  90 bytes of CODE     memory
   1 byte  of CONST    memory
   0 bytes of DATA     memory (+ 2 bytes shared)
 898 bytes of HUGECODE memory
   8 bytes of XDATA    memory

Errors: none
Warnings: none
