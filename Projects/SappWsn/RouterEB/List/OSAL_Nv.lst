###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               14/Jul/2019  16:10:15
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW7AAA.tmp
#        ("C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Components\osal\mcu\cc2530\OSAL_Nv.c" -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -D SAPP_ZSTACK -lC
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\RouterEB\List" -lA
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\RouterEB\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -f "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x4545
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\Source\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\ZMain\TI2530DB\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\include\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\include\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\high_level\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mt\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\osal\include\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\saddr\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\sdata\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\af\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\nwk\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sapi\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sec\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sys\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\zdo\"
#        -I "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\" -I
#        "C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\RouterEB\List\OSAL_Nv.lst
#    Object file        =  
#        C:\Users\Administrator\Desktop\111 -
#        ¸±±¾\ZStack-CC2530-r200\Projects\SappWsn\RouterEB\Obj\OSAL_Nv.r51
#
###############################################################################

C:\Users\Administrator\Desktop\111 - ¸±±¾\ZStack-CC2530-r200\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /******************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2011-06-05 18:52:21 -0700 (Sun, 05 Jun 2011) $
      4            Revision:       $Revision: 26212 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /******************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id
     43                is to be reserved for use by this module.
     44          ******************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          // In case pages 0-1 are ever used, define a null page value.
     73          #define OSAL_NV_PAGE_NULL       0
     74          
     75          // In case item Id 0 is ever used, define a null item value.
     76          #define OSAL_NV_ITEM_NULL       0
     77          
     78          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     79          
     80          #define OSAL_NV_PAGE_HDR_OFFSET 0
     81          
     82          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     83          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   8200         DW 130
   \   000002   3A00         DW 58
   \   000004   3B00         DW 59
     84            ZCD_NV_NWKKEY,
     85            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     86            ZCD_NV_NWK_ALTERN_KEY_INFO,
     87          };
     88          
     89          /*********************************************************************
     90           * MACROS
     91           */
     92          
     93          #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
     94          
     95          #define OSAL_NV_DATA_SIZE( LEN )                      \
     96            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
     97                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
     98                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
     99          
    100          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    101            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    102                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    103            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    104          
    105          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    106            /* In order to recover from a page compaction that is interrupted,\
    107             * the logic in osal_nv_init() depends upon the following order:\
    108             * 1. State of the target of compaction is changed to ePgInUse.\
    109             * 2. Compacted page is erased.\
    110             */\
    111            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    112            erasePage( (COM_PG) ); \
    113            \
    114            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    115          )
    116          
    117          /*********************************************************************
    118           * TYPEDEFS
    119           */
    120          
    121          typedef struct
    122          {
    123            uint16 id;
    124            uint16 len;   // Enforce Flash-WORD size on len.
    125            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    126            uint16 stat;  // Item status.
    127          } osalNvHdr_t;
    128          // Struct member offsets.
    129          #define OSAL_NV_HDR_ID    0
    130          #define OSAL_NV_HDR_LEN   2
    131          #define OSAL_NV_HDR_CHK   4
    132          #define OSAL_NV_HDR_STAT  6
    133          
    134          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    135          #define OSAL_NV_HDR_SIZE  8
    136          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    137          
    138          typedef struct
    139          {
    140            uint16 active;
    141            uint16 inUse;
    142            uint16 xfer;
    143            uint16 spare;
    144          } osalNvPgHdr_t;
    145          // Struct member offsets.
    146          #define OSAL_NV_PG_ACTIVE 0
    147          #define OSAL_NV_PG_INUSE  2
    148          #define OSAL_NV_PG_XFER   4
    149          #define OSAL_NV_PG_SPARE  6
    150          
    151          #define OSAL_NV_PAGE_HDR_SIZE  8
    152          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    153          
    154          typedef enum
    155          {
    156            eNvXfer,
    157            eNvZero
    158          } eNvHdrEnum;
    159          
    160          typedef enum
    161          {
    162            ePgActive,
    163            ePgInUse,
    164            ePgXfer,
    165            ePgSpare
    166          } ePgHdrEnum;
    167          
    168          /*********************************************************************
    169           * GLOBAL VARIABLES
    170           */
    171          
    172          #ifndef OAD_KEEP_NV_PAGES
    173          // When NV pages are to remain intact during OAD download,
    174          // the image itself should not include NV pages.
    175          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    176          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    177          #pragma required=_nvBuf
    178          #endif // OAD_KEEP_NV_PAGES
    179          
    180          /*********************************************************************
    181           * LOCAL VARIABLES
    182           */
    183          
    184          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    186          
    187          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    191          
    192          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          
    195          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    198          
    199          /*********************************************************************
    200           * LOCAL FUNCTIONS
    201           */
    202          
    203          static uint8  initNV( void );
    204          
    205          static void   setPageUse( uint8 pg, uint8 inUse );
    206          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    207          static void   erasePage( uint8 pg );
    208          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    209          
    210          static uint16 findItem( uint16 id );
    211          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    212          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    213          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    214          
    215          static uint16 calcChkB( uint16 len, uint8 *buf );
    216          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    217          
    218          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    219          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    220          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    221          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    222          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    223          
    224          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    225          static uint8  hotItem(uint16 id);
    226          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    227          
    228          /*********************************************************************
    229           * @fn      initNV
    230           *
    231           * @brief   Initialize the NV flash pages.
    232           *
    233           * @param   none
    234           *
    235           * @return  TRUE
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          static uint8 initNV( void )
   \                     initNV:
    238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    239            osalNvPgHdr_t pgHdr;
    240            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   7F00         MOV       R7,#0x0
    241            uint8 findDups = FALSE;
   \   00000C   75..00       MOV       ?V0,#0x0
    242            uint8 pg;
    243          
    244            pgRes = OSAL_NV_PAGE_NULL;
   \   00000F   90....       MOV       DPTR,#pgRes
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
    245          
    246            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000014   7E79         MOV       R6,#0x79
    247            {
    248              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000016                ; Setup parameters for call to function HalFlashRead
   \   000016   75..08       MOV       ?V2,#0x8
   \   000019   75..00       MOV       ?V3,#0x0
   \   00001C   78..         MOV       R0,#?V2
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP102_8
   \   000026   7A00         MOV       R2,#0x0
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   EE           MOV       A,R6
   \   00002B   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
    249          
    250              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F4           CPL       A
   \   000039   7003         JNZ       ??initNV_1
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F4           CPL       A
   \                     ??initNV_1:
   \   00003E   7013         JNZ       ??initNV_2
    251              {
    252                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000040   90....       MOV       DPTR,#pgRes
   \   000043   E0           MOVX      A,@DPTR
   \   000044   7004         JNZ       ??initNV_3
    253                {
    254                  pgRes = pg;
   \   000046   EE           MOV       A,R6
   \   000047   F0           MOVX      @DPTR,A
   \   000048   8019         SJMP      ??initNV_4
    255                }
    256                else
    257                {
    258                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   00004A                ; Setup parameters for call to function setPageUse
   \   00004A   7A01         MOV       R2,#0x1
   \   00004C   EE           MOV       A,R6
   \   00004D   F9           MOV       R1,A
   \   00004E   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   000051   8010         SJMP      ??initNV_4
    259                }
    260              }
    261              // An Xfer from this page was in progress.
    262              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000053   7404         MOV       A,#0x4
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F4           CPL       A
   \   00005A   7003         JNZ       ??initNV_5
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F4           CPL       A
   \                     ??initNV_5:
   \   00005F   6002         JZ        ??initNV_4
    263              {
    264                oldPg = pg;
   \   000061   EE           MOV       A,R6
   \   000062   FF           MOV       R7,A
    265              }
    266            }
   \                     ??initNV_4:
   \   000063   0E           INC       R6
   \   000064   EE           MOV       A,R6
   \   000065   C3           CLR       C
   \   000066   947F         SUBB      A,#0x7f
   \   000068   40AC         JC        ??initNV_0
    267          
    268            // If a page compaction was interrupted before the old page was erased.
    269            if ( oldPg != OSAL_NV_PAGE_NULL )
   \   00006A   EF           MOV       A,R7
   \   00006B   90....       MOV       DPTR,#pgRes
   \   00006E   601E         JZ        ??initNV_6
    270            {
    271              /* Interrupted compaction before the target of compaction was put in use;
    272               * so erase the target of compaction and start again.
    273               */
    274              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   000070   E0           MOVX      A,@DPTR
   \   000071   600F         JZ        ??initNV_7
    275              {
    276                erasePage( pgRes );
   \   000073                ; Setup parameters for call to function erasePage
   \   000073   F9           MOV       R1,A
   \   000074   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    277                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   000077                ; Setup parameters for call to function compactPage
   \   000077   7A00         MOV       R2,#0x0
   \   000079   7B00         MOV       R3,#0x0
   \   00007B   EF           MOV       A,R7
   \   00007C   F9           MOV       R1,A
   \   00007D   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   000080   8013         SJMP      ??initNV_8
    278              }
    279              /* Interrupted compaction after the target of compaction was put in use,
    280               * but before the old page was erased; so erase it now and create a new reserve page.
    281               */
    282              else
    283              {
    284                erasePage( oldPg );
   \                     ??initNV_7:
   \   000082                ; Setup parameters for call to function erasePage
   \   000082   EF           MOV       A,R7
   \   000083   F9           MOV       R1,A
   \   000084   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    285                pgRes = oldPg;
   \   000087   EF           MOV       A,R7
   \   000088   90....       MOV       DPTR,#pgRes
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   8007         SJMP      ??initNV_8
    286              }
    287            }
    288            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_6:
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   6004         JZ        ??initNV_8
    289            {
    290              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   000091                ; Setup parameters for call to function erasePage
   \   000091   F9           MOV       R1,A
   \   000092   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    291            }
    292            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    293             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    294             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    295             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    296             * size less the page header.
    297             */
    298          
    299            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   000095   7E79         MOV       R6,#0x79
    300            {
    301              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    302              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_9:
   \   000097                ; Setup parameters for call to function initPage
   \   000097   AC..         MOV       R4,?V0
   \   000099   7A00         MOV       R2,#0x0
   \   00009B   7B00         MOV       R3,#0x0
   \   00009D   EE           MOV       A,R6
   \   00009E   F9           MOV       R1,A
   \   00009F   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   0000A2   EA           MOV       A,R2
   \   0000A3   4B           ORL       A,R3
   \   0000A4   6005         JZ        ??initNV_10
    303              {
    304                findDups = TRUE;
   \   0000A6   75..01       MOV       ?V0,#0x1
    305                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000A9   7E78         MOV       R6,#0x78
    306                continue;
    307              }
    308            }
   \                     ??initNV_10:
   \   0000AB   0E           INC       R6
   \   0000AC   EE           MOV       A,R6
   \   0000AD   C3           CLR       C
   \   0000AE   947F         SUBB      A,#0x7f
   \   0000B0   40E5         JC        ??initNV_9
    309          
    310            if (findDups)
   \   0000B2   E5..         MOV       A,?V0
   \   0000B4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000B6   5014         JNC       ??initNV_11
    311            {
    312              // Final pass to calculate page lost after invalidating duplicate items.
    313              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000B8   7E79         MOV       R6,#0x79
    314              {
    315                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \                     ??initNV_12:
   \   0000BA                ; Setup parameters for call to function initPage
   \   0000BA   7C00         MOV       R4,#0x0
   \   0000BC   7A00         MOV       R2,#0x0
   \   0000BE   7B00         MOV       R3,#0x0
   \   0000C0   EE           MOV       A,R6
   \   0000C1   F9           MOV       R1,A
   \   0000C2   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
    316              }
   \   0000C5   0E           INC       R6
   \   0000C6   EE           MOV       A,R6
   \   0000C7   C3           CLR       C
   \   0000C8   947F         SUBB      A,#0x7f
   \   0000CA   40EE         JC        ??initNV_12
    317            }
    318          
    319            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_11:
   \   0000CC   90....       MOV       DPTR,#pgRes
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   7044         JNZ       ??initNV_13
    320            {
    321              uint8 idx, mostLost = 0;
   \   0000D2   7E00         MOV       R6,#0x0
    322          
    323              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   0000D4   7A00         MOV       R2,#0x0
    324              {
    325                // Is this the page that was compacted?
    326                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
   \                     ??initNV_14:
   \   0000D6   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   64F8         XRL       A,#0xf8
   \   0000DC   7004         JNZ       ??initNV_15
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   6407         XRL       A,#0x7
   \                     ??initNV_15:
   \   0000E2   7004         JNZ       ??initNV_16
    327                {
    328                  mostLost = idx;
   \   0000E4   EA           MOV       A,R2
   \   0000E5   FE           MOV       R6,A
    329                  break;
   \   0000E6   8023         SJMP      ??initNV_17
    330                }
    331                /* This check is not expected to be necessary because the above test should always succeed
    332                 * with an early loop exit.
    333                 */
    334                else if (pgLost[idx] > pgLost[mostLost])
   \                     ??initNV_16:
   \   0000E8   EE           MOV       A,R6
   \   0000E9   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000EC   C082         PUSH      DPL
   \   0000EE   C083         PUSH      DPH
   \   0000F0   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0000F3   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000F6   D083         POP       DPH
   \   0000F8   D082         POP       DPL
   \   0000FA   C3           CLR       C
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   98           SUBB      A,R0
   \   0000FD   A3           INC       DPTR
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   99           SUBB      A,R1
   \   000100   5002         JNC       ??initNV_18
    335                {
    336                  mostLost = idx;
   \   000102   EA           MOV       A,R2
   \   000103   FE           MOV       R6,A
    337                }
    338              }
   \                     ??initNV_18:
   \   000104   0A           INC       R2
   \   000105   EA           MOV       A,R2
   \   000106   C3           CLR       C
   \   000107   9406         SUBB      A,#0x6
   \   000109   40CB         JC        ??initNV_14
    339          
    340              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_17:
   \   00010B   7479         MOV       A,#0x79
   \   00010D   2E           ADD       A,R6
   \   00010E   90....       MOV       DPTR,#pgRes
   \   000111   F0           MOVX      @DPTR,A
    341              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   000112                ; Setup parameters for call to function erasePage
   \   000112   F9           MOV       R1,A
   \   000113   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    342            }
    343          
    344            return TRUE;
   \                     ??initNV_13:
   \   000116   7901         MOV       R1,#0x1
   \   000118   7408         MOV       A,#0x8
   \   00011A   80..         SJMP      ??Subroutine59_0
    345          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine58_0
   \   000001                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   74..         MOV       A,#pgLost & 0xff
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   74..         MOV       A,#(pgLost >> 8) & 0xff
   \   000007   39           ADDC      A,R1
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine60_0
   \   000003                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   F9           MOV       R1,A
   \   000001                REQUIRE ??Subroutine69_0
   \   000001                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    346          
    347          /*********************************************************************
    348           * @fn      setPageUse
    349           *
    350           * @brief   Set page header active/inUse state according to 'inUse'.
    351           *
    352           * @param   pg - Valid NV page to verify and init.
    353           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    354           *
    355           * @return  none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    358          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    359            osalNvPgHdr_t pgHdr;
    360          
    361            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    362          
    363            if ( inUse )
   \   000014   EA           MOV       A,R2
   \   000015   6008         JZ        ??setPageUse_0
    364            {
    365              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000017   7402         MOV       A,#0x2
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E4           CLR       A
   \   00001D   8007         SJMP      ??setPageUse_1
    366            }
    367            else
    368            {
    369              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   74FF         MOV       A,#-0x1
    370            }
   \                     ??setPageUse_1:
   \   000026   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    371          
    372            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_129:
   \   000029   7A00         MOV       R2,#0x0
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    373          }
   \   000030   7408         MOV       A,#0x8
   \   000032   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine62_0
   \   000003                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function writeWordH
   \   000003                ; Setup parameters for call to function writeWord
   \   000003                ; Setup parameters for call to function writeWord
   \   000003   AC..         MOV       R4,?XSP + 0
   \   000005   AD..         MOV       R5,?XSP + 1
   \   000007   22           RET
    374          
    375          /*********************************************************************
    376           * @fn      initPage
    377           *
    378           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    379           *
    380           * @param   pg - Valid NV page to verify and init.
    381           * @param   id - Valid NV item Id to use function as a "findItem".
    382           *               If set to NULL then just perform the page initialization.
    383           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    384           *                     left from a write that is interrupted by a reset/power-cycle.
    385           *                     FALSE otherwise.
    386           *
    387           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    388           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000013   89..         MOV       ?V6,R1
   \   000015   8C..         MOV       ?V7,R4
    392            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000017   75..08       MOV       ?V0,#0x8
   \   00001A   75..00       MOV       ?V1,#0x0
    393            uint16 sz, lost = 0;
   \   00001D   75..00       MOV       ?V2,#0x0
   \   000020   75..00       MOV       ?V3,#0x0
    394            osalNvHdr_t hdr;
    395          
    396            do
    397            {
    398              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   000023                ; Setup parameters for call to function HalFlashRead
   \   000023   75..08       MOV       ?V4,#0x8
   \   000026   75..00       MOV       ?V5,#0x0
   \   000029   78..         MOV       R0,#?V4
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7404         MOV       A,#0x4
   \   000030   12....       LCALL     ?XSTACK_DISP102_8
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   A9..         MOV       R1,?V6
   \   000039   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
    399          
    400              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00003F   7402         MOV       A,#0x2
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F4           CPL       A
   \   000046   7003         JNZ       ??initPage_1
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F4           CPL       A
   \                     ??initPage_1:
   \   00004B   7003         JNZ       $+5
   \   00004D   02....       LJMP      ??initPage_2 & 0xFFFF
    401              {
    402                break;
    403              }
    404          
    405              // Get the actual size in bytes which is the ceiling(hdr.len)
    406              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   000050   7404         MOV       A,#0x4
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000058   4006         JC        ??initPage_3
   \   00005A   7EFC         MOV       R6,#-0x4
   \   00005C   7FFF         MOV       R7,#-0x1
   \   00005E   8008         SJMP      ??CrossCallReturnLabel_34
   \                     ??initPage_3:
   \   000060   7404         MOV       A,#0x4
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   12....       LCALL     ?Subroutine17 & 0xFFFF
    407          
    408              // A bad 'len' write has blown away the rest of the page.
    409              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??CrossCallReturnLabel_34:
   \   000068   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00006B   5020         JNC       ??initPage_4
    410              {
    411                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   00006D   E5..         MOV       A,?V2
   \   00006F   2400         ADD       A,#0x0
   \   000071   E5..         MOV       A,?V3
   \   000073   3408         ADDC      A,#0x8
   \   000075   F5..         MOV       ?V3,A
   \   000077   C3           CLR       C
   \   000078   E5..         MOV       A,?V2
   \   00007A   95..         SUBB      A,?V0
   \   00007C   F5..         MOV       ?V2,A
   \   00007E   E5..         MOV       A,?V3
   \   000080   95..         SUBB      A,?V1
   \   000082   F5..         MOV       ?V3,A
    412                offset = OSAL_NV_PAGE_SIZE;
   \   000084   75..00       MOV       ?V0,#0x0
   \   000087   75..08       MOV       ?V1,#0x8
    413                break;
   \   00008A   02....       LJMP      ??initPage_2 & 0xFFFF
    414              }
    415          
    416              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_4:
   \   00008D   12....       LCALL     ?Subroutine41 & 0xFFFF
    417          
    418              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \                     ??CrossCallReturnLabel_80:
   \   000090   7402         MOV       A,#0x2
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000098   7003         JNZ       $+5
   \   00009A   02....       LJMP      ??initPage_5 & 0xFFFF
    419              {
    420                /* This trick allows function to do double duty for findItem() without
    421                 * compromising its essential functionality at powerup initialization.
    422                 */
    423                if ( id != OSAL_NV_ITEM_NULL )
   \   00009D   85..82       MOV       DPL,?XSP + 0
   \   0000A0   85..83       MOV       DPH,?XSP + 1
   \   0000A3   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000A6   6050         JZ        ??initPage_6
    424                {
    425                  /* This trick allows asking to find the old/transferred item in case
    426                   * of a successful new item write that gets interrupted before the
    427                   * old item can be zeroed out.
    428                   */
    429                  if ( (id & 0x7fff) == hdr.id )
   \   0000A8   85..82       MOV       DPL,?XSP + 0
   \   0000AB   85..83       MOV       DPH,?XSP + 1
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   547F         ANL       A,#0x7f
   \   0000B2   F9           MOV       R1,A
   \   0000B3   7402         MOV       A,#0x2
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   68           XRL       A,R0
   \   0000BA   7003         JNZ       ??initPage_7
   \   0000BC   A3           INC       DPTR
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   69           XRL       A,R1
   \                     ??initPage_7:
   \   0000BF   6003         JZ        $+5
   \   0000C1   02....       LJMP      ??initPage_8 & 0xFFFF
    430                  {
    431                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    432                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   0000C4   85..82       MOV       DPL,?XSP + 0
   \   0000C7   85..83       MOV       DPH,?XSP + 1
   \   0000CA   A3           INC       DPTR
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   5480         ANL       A,#0x80
   \   0000CE   7013         JNZ       ??initPage_9
   \   0000D0   7408         MOV       A,#0x8
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F4           CPL       A
   \   0000D7   7003         JNZ       ??initPage_10
   \   0000D9   A3           INC       DPTR
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F4           CPL       A
   \                     ??initPage_10:
   \   0000DC   6003         JZ        $+5
   \   0000DE   02....       LJMP      ??initPage_8 & 0xFFFF
   \   0000E1   800E         SJMP      ??initPage_11
   \                     ??initPage_9:
   \   0000E3   7408         MOV       A,#0x8
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   F4           CPL       A
   \   0000EA   7003         JNZ       ??initPage_12
   \   0000EC   A3           INC       DPTR
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   F4           CPL       A
   \                     ??initPage_12:
   \   0000EF   607F         JZ        ??initPage_8
    433                    {
    434                      return offset;
   \                     ??initPage_11:
   \   0000F1   AA..         MOV       R2,?V0
   \   0000F3   AB..         MOV       R3,?V1
   \   0000F5   02....       LJMP      ??initPage_13 & 0xFFFF
    435                    }
    436                  }
    437                }
    438                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    439                else
    440                {
    441                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_6:
   \   0000F8                ; Setup parameters for call to function calcChkF
   \   0000F8   7404         MOV       A,#0x4
   \   0000FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FD   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000100   AA..         MOV       R2,?V0
   \   000102   AB..         MOV       R3,?V1
   \   000104   A9..         MOV       R1,?V6
   \   000106   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000109   7406         MOV       A,#0x6
   \   00010B   12....       LCALL     ?XSTACK_DISP0_8
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   68           XRL       A,R0
   \   000110   7003         JNZ       ??initPage_14
   \   000112   A3           INC       DPTR
   \   000113   E0           MOVX      A,@DPTR
   \   000114   69           XRL       A,R1
   \                     ??initPage_14:
   \   000115   703D         JNZ       ??initPage_15
    442                  {
    443                    if ( findDups )
   \   000117   E5..         MOV       A,?V7
   \   000119   6025         JZ        ??initPage_16
    444                    {
    445                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   00011B   7408         MOV       A,#0x8
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   E0           MOVX      A,@DPTR
   \   000121   F4           CPL       A
   \   000122   7003         JNZ       ??initPage_17
   \   000124   A3           INC       DPTR
   \   000125   E0           MOVX      A,@DPTR
   \   000126   F4           CPL       A
   \                     ??initPage_17:
   \   000127   7047         JNZ       ??initPage_8
    446                      {
    447                        /* The trick of setting the MSB of the item Id causes the logic
    448                         * immediately above to return a valid page only if the header 'stat'
    449                         * indicates that it was the older item being transferred.
    450                         */
    451                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   000129                ; Setup parameters for call to function findItem
   \   000129   7402         MOV       A,#0x2
   \   00012B   12....       LCALL     ?XSTACK_DISP0_8
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   FA           MOV       R2,A
   \   000130   A3           INC       DPTR
   \   000131   E0           MOVX      A,@DPTR
   \   000132   4480         ORL       A,#0x80
   \   000134   12....       LCALL     ??Subroutine73_0 & 0xFFFF
    452          
    453                        if ( off != OSAL_NV_ITEM_NULL )
   \                     ??CrossCallReturnLabel_170:
   \   000137   6037         JZ        ??initPage_8
    454                        {
    455                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   000139                ; Setup parameters for call to function setItem
   \   000139   7C01         MOV       R4,#0x1
   \   00013B   12....       LCALL     ?Subroutine27 & 0xFFFF
    456                        }
    457                      }
    458                    }
   \                     ??CrossCallReturnLabel_112:
   \   00013E   8030         SJMP      ??initPage_8
    459                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    460                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_16:
   \   000140   7408         MOV       A,#0x8
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   E0           MOVX      A,@DPTR
   \   000146   F4           CPL       A
   \   000147   7003         JNZ       ??initPage_18
   \   000149   A3           INC       DPTR
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   F4           CPL       A
   \                     ??initPage_18:
   \   00014C   6022         JZ        ??initPage_8
    461                    {
    462                      return OSAL_NV_ERASED_ID;
   \   00014E   7AFF         MOV       R2,#-0x1
   \   000150   7BFF         MOV       R3,#-0x1
   \   000152   804F         SJMP      ??initPage_13
    463                    }
    464                  }
    465                  else
    466                  {
    467                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_15:
   \   000154                ; Setup parameters for call to function setItem
   \   000154   7C01         MOV       R4,#0x1
   \   000156   AA..         MOV       R2,?V0
   \   000158   AB..         MOV       R3,?V1
   \   00015A   A9..         MOV       R1,?V6
   \   00015C   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    468                    lost += (OSAL_NV_HDR_SIZE + sz);
    469                  }
    470                }
    471              }
    472              else
    473              {
    474                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_5:
   \   00015F   EE           MOV       A,R6
   \   000160   2408         ADD       A,#0x8
   \   000162   F8           MOV       R0,A
   \   000163   E4           CLR       A
   \   000164   3F           ADDC      A,R7
   \   000165   F9           MOV       R1,A
   \   000166   E5..         MOV       A,?V2
   \   000168   28           ADD       A,R0
   \   000169   F5..         MOV       ?V2,A
   \   00016B   E5..         MOV       A,?V3
   \   00016D   39           ADDC      A,R1
   \   00016E   F5..         MOV       ?V3,A
    475              }
    476              offset += sz;
   \                     ??initPage_8:
   \   000170   E5..         MOV       A,?V0
   \   000172   2E           ADD       A,R6
   \   000173   F5..         MOV       ?V0,A
   \   000175   E5..         MOV       A,?V1
   \   000177   3F           ADDC      A,R7
   \   000178   F5..         MOV       ?V1,A
    477          
    478            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   00017A   C3           CLR       C
   \   00017B   E5..         MOV       A,?V0
   \   00017D   94F8         SUBB      A,#-0x8
   \   00017F   E5..         MOV       A,?V1
   \   000181   9407         SUBB      A,#0x7
   \   000183   5003         JNC       $+5
   \   000185   02....       LJMP      ??initPage_0 & 0xFFFF
    479          
    480            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   000188   A8..         MOV       R0,?V6
   \   00018A   E8           MOV       A,R0
   \   00018B   28           ADD       A,R0
   \   00018C   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00018F   E5..         MOV       A,?V0
   \   000191   F0           MOVX      @DPTR,A
   \   000192   A3           INC       DPTR
   \   000193   E5..         MOV       A,?V1
   \   000195   12....       LCALL     ?Subroutine8 & 0xFFFF
    481            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_2:
   \   000198   E5..         MOV       A,?V2
   \   00019A   F0           MOVX      @DPTR,A
   \   00019B   A3           INC       DPTR
   \   00019C   E5..         MOV       A,?V3
   \   00019E   F0           MOVX      @DPTR,A
    482          
    483            return OSAL_NV_ITEM_NULL;
   \   00019F   7A00         MOV       R2,#0x0
   \   0001A1   7B00         MOV       R3,#0x0
   \                     ??initPage_13:
   \   0001A3   02....       LJMP      ?Subroutine2 & 0xFFFF
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   90....       MOV       DPTR,#findPg
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000003   28           ADD       A,R0
   \   000004   F582         MOV       DPL,A
   \   000006   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   000008   39           ADDC      A,R1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E5..         MOV       A,?V0
   \   000002   2408         ADD       A,#0x8
   \   000004   F5..         MOV       ?V0,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F5..         MOV       ?V1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   74F8         MOV       A,#-0x8
   \   000002   C3           CLR       C
   \   000003   95..         SUBB      A,?V0
   \   000005   F8           MOV       R0,A
   \   000006   7407         MOV       A,#0x7
   \   000008   95..         SUBB      A,?V1
   \   00000A   F9           MOV       R1,A
   \   00000B   C3           CLR       C
   \   00000C   E8           MOV       A,R0
   \   00000D   9E           SUBB      A,R6
   \   00000E   E9           MOV       A,R1
   \   00000F   9F           SUBB      A,R7
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   C3           CLR       C
   \   000001   E0           MOVX      A,@DPTR
   \   000002   94FC         SUBB      A,#-0x4
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   94FF         SUBB      A,#-0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   FE           MOV       R6,A
   \   000004   E9           MOV       A,R1
   \   000005   FF           MOV       R7,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine64_0
   \   000001                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   740A         MOV       A,#0xa
   \   000002                REQUIRE ??Subroutine70_0
   \   000002                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine71_0
   \   000003                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   A8..         MOV       R0,?V4
   \   000009   A9..         MOV       R1,?V5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   E8           MOV       A,R0
   \   00000A   54FC         ANL       A,#0xfc
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine74_0
   \   000001                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET
    485          
    486          /*********************************************************************
    487           * @fn      erasePage
    488           *
    489           * @brief   Erases a page in Flash.
    490           *
    491           * @param   pg - Valid NV page to erase.
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void erasePage( uint8 pg )
   \                     erasePage:
    496          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    497            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   12....       LCALL     `??HalFlashErase::?relay`; Banked call to: HalFlashErase
    498          
    499            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000A   EE           MOV       A,R6
   \   00000B   2E           ADD       A,R6
   \   00000C   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00000F   7408         MOV       A,#0x8
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   E4           CLR       A
   \   000014   12....       LCALL     ?Subroutine8 & 0xFFFF
    500            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_3:
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
    501          }
   \   00001B   80..         SJMP      ??Subroutine62_0
    502          
    503          /*********************************************************************
    504           * @fn      compactPage
    505           *
    506           * @brief   Compacts the page specified.
    507           *
    508           * @param   srcPg - Valid NV page to erase.
    509           * @param   skipId - Item Id to not compact.
    510           *
    511           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    512           *          FALSE otherwise.
    513           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    514           *          the risk of infinitely looping on HAL flash failure.
    515           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    516           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    517           *          NV_OPER_FAILED.
    518           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    519           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    520           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    521           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    522           *          or written, the last value written with a return value of SUCCESS can continue to be
    523           *          read successfully.
    524           *          If eventually HAL flash starts working again, all of the pages marked as
    525           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    526           *          deterministically clean-up one page pending compaction per power-cycle
    527           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    528           *          through such a scenario.
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7409         MOV       A,#0x9
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000012   89..         MOV       ?V6,R1
    532            uint16 srcOff;
    533            uint8 rtrn;
    534          
    535            // To minimize code size, only check for a clean page here where it's absolutely required.
    536            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000014   75..00       MOV       ?V2,#0x0
   \   000017   75..00       MOV       ?V3,#0x0
    537            {
    538              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \                     ??compactPage_0:
   \   00001A                ; Setup parameters for call to function HalFlashRead
   \   00001A   75..01       MOV       ?V0,#0x1
   \   00001D   75..00       MOV       ?V1,#0x0
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?XSTACK_DISP102_8
   \   00002A   AA..         MOV       R2,?V2
   \   00002C   AB..         MOV       R3,?V3
   \   00002E   90....       MOV       DPTR,#pgRes
   \   000031   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000034   12....       LCALL     ?DEALLOC_XSTACK8
    539              if (rtrn != OSAL_NV_ERASED)
   \   000037   85..82       MOV       DPL,?XSP + 0
   \   00003A   85..83       MOV       DPH,?XSP + 1
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F4           CPL       A
   \   00003F   6008         JZ        ??compactPage_1
    540              {
    541                erasePage(pgRes);
   \   000041                ; Setup parameters for call to function erasePage
   \   000041   12....       LCALL     ?Subroutine28 & 0xFFFF
    542                return FALSE;
   \                     ??CrossCallReturnLabel_116:
   \   000044   7900         MOV       R1,#0x0
   \   000046   02....       LJMP      ??compactPage_2 & 0xFFFF
    543              }
    544            }
   \                     ??compactPage_1:
   \   000049   05..         INC       ?V2
   \   00004B   E5..         MOV       A,?V2
   \   00004D   7002         JNZ       ??compactPage_3
   \   00004F   05..         INC       ?V3
   \                     ??compactPage_3:
   \   000051   C3           CLR       C
   \   000052   E5..         MOV       A,?V3
   \   000054   9408         SUBB      A,#0x8
   \   000056   40C2         JC        ??compactPage_0
    545          
    546            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000058   75..08       MOV       ?V2,#0x8
   \   00005B   75..00       MOV       ?V3,#0x0
    547            rtrn = TRUE;
   \   00005E   7401         MOV       A,#0x1
   \   000060   F0           MOVX      @DPTR,A
    548          
    549            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
    550            {
    551              osalNvHdr_t hdr;
    552              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \                     ??compactPage_4:
   \   000061   90....       MOV       DPTR,#pgRes
   \   000064   E0           MOVX      A,@DPTR
   \   000065   25E0         ADD       A,0xE0 /* A   */
   \   000067   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00006A   12....       LCALL     ?Subroutine22 & 0xFFFF
    553          
    554              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_46:
   \   00006D                ; Setup parameters for call to function HalFlashRead
   \   00006D   75..08       MOV       ?V4,#0x8
   \   000070   75..00       MOV       ?V5,#0x0
   \   000073   78..         MOV       R0,#?V4
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   7403         MOV       A,#0x3
   \   00007A   12....       LCALL     ?XSTACK_DISP102_8
   \   00007D   AA..         MOV       R2,?V2
   \   00007F   AB..         MOV       R3,?V3
   \   000081   A9..         MOV       R1,?V6
   \   000083   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
    555          
    556              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   000089   7401         MOV       A,#0x1
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   F4           CPL       A
   \   000090   7003         JNZ       ??compactPage_5
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F4           CPL       A
   \                     ??compactPage_5:
   \   000095   7003         JNZ       $+5
   \   000097   02....       LJMP      ??compactPage_6 & 0xFFFF
    557              {
    558                break;
    559              }
    560          
    561              // Get the actual size in bytes which is the ceiling(hdr.len)
    562              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   00009A   7403         MOV       A,#0x3
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000A2   4006         JC        ??compactPage_7
   \   0000A4   7EFC         MOV       R6,#-0x4
   \   0000A6   7FFF         MOV       R7,#-0x1
   \   0000A8   8008         SJMP      ??CrossCallReturnLabel_35
   \                     ??compactPage_7:
   \   0000AA   7403         MOV       A,#0x3
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   12....       LCALL     ?Subroutine17 & 0xFFFF
    563          
    564              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??CrossCallReturnLabel_35:
   \   0000B2   74F8         MOV       A,#-0x8
   \   0000B4   C3           CLR       C
   \   0000B5   95..         SUBB      A,?V2
   \   0000B7   F8           MOV       R0,A
   \   0000B8   7407         MOV       A,#0x7
   \   0000BA   95..         SUBB      A,?V3
   \   0000BC   F9           MOV       R1,A
   \   0000BD   C3           CLR       C
   \   0000BE   E8           MOV       A,R0
   \   0000BF   9E           SUBB      A,R6
   \   0000C0   E9           MOV       A,R1
   \   0000C1   9F           SUBB      A,R7
   \   0000C2   5003         JNC       $+5
   \   0000C4   02....       LJMP      ??compactPage_6 & 0xFFFF
    565              {
    566                break;
    567              }
    568          
    569              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   0000C7   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000CA   5003         JNC       $+5
   \   0000CC   02....       LJMP      ??compactPage_8 & 0xFFFF
    570              {
    571                rtrn = FALSE;
    572                break;
    573              }
    574          
    575              srcOff += OSAL_NV_HDR_SIZE;
   \   0000CF   12....       LCALL     ?Subroutine42 & 0xFFFF
    576          
    577              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \                     ??CrossCallReturnLabel_82:
   \   0000D2   7401         MOV       A,#0x1
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000DA   7003         JNZ       $+5
   \   0000DC   02....       LJMP      ??compactPage_9 & 0xFFFF
   \   0000DF   7409         MOV       A,#0x9
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   68           XRL       A,R0
   \   0000E6   7003         JNZ       ??compactPage_10
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   69           XRL       A,R1
   \                     ??compactPage_10:
   \   0000EB   7003         JNZ       $+5
   \   0000ED   02....       LJMP      ??compactPage_9 & 0xFFFF
    578              {
    579                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   0000F0                ; Setup parameters for call to function calcChkF
   \   0000F0   7403         MOV       A,#0x3
   \   0000F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F5   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000F8   AA..         MOV       R2,?V2
   \   0000FA   AB..         MOV       R3,?V3
   \   0000FC   A9..         MOV       R1,?V6
   \   0000FE   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   E0           MOVX      A,@DPTR
   \   000105   68           XRL       A,R0
   \   000106   7003         JNZ       ??compactPage_11
   \   000108   A3           INC       DPTR
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   69           XRL       A,R1
   \                     ??compactPage_11:
   \   00010B   6003         JZ        $+5
   \   00010D   02....       LJMP      ??compactPage_9 & 0xFFFF
    580                {
    581                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    582                   * OSAL_Nv interruptions caused by resets.
    583                   */
    584                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000110   7407         MOV       A,#0x7
   \   000112   12....       LCALL     ?XSTACK_DISP0_8
   \   000115   E0           MOVX      A,@DPTR
   \   000116   F4           CPL       A
   \   000117   7003         JNZ       ??compactPage_12
   \   000119   A3           INC       DPTR
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   F4           CPL       A
   \                     ??compactPage_12:
   \   00011C   700B         JNZ       ??compactPage_13
    585                  {
    586                    setItem( srcPg, srcOff, eNvXfer );
   \   00011E                ; Setup parameters for call to function setItem
   \   00011E   7C00         MOV       R4,#0x0
   \   000120   AA..         MOV       R2,?V2
   \   000122   AB..         MOV       R3,?V3
   \   000124   A9..         MOV       R1,?V6
   \   000126   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    587                  }
    588          
    589                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_13:
   \   000129                ; Setup parameters for call to function writeItem
   \   000129   75..00       MOV       ?V4,#0x0
   \   00012C   78..         MOV       R0,#?V4
   \   00012E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000131   E4           CLR       A
   \   000132   F5..         MOV       ?V5,A
   \   000134   78..         MOV       R0,#?V4
   \   000136   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000139   7406         MOV       A,#0x6
   \   00013B   12....       LCALL     ?XSTACK_DISP0_8
   \   00013E   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000141   7404         MOV       A,#0x4
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000149   90....       MOV       DPTR,#pgRes
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   F9           MOV       R1,A
   \   00014E   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   000151   7403         MOV       A,#0x3
   \   000153   12....       LCALL     ?DEALLOC_XSTACK8
   \   000156   E9           MOV       A,R1
   \   000157   7003         JNZ       $+5
   \   000159   02....       LJMP      ??compactPage_8 & 0xFFFF
    590                  {
    591                    dstOff += OSAL_NV_HDR_SIZE;
   \   00015C   12....       LCALL     ?Subroutine41 & 0xFFFF
    592                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \                     ??CrossCallReturnLabel_81:
   \   00015F                ; Setup parameters for call to function xferBuf
   \   00015F   8E..         MOV       ?V4,R6
   \   000161   8F..         MOV       ?V5,R7
   \   000163   78..         MOV       R0,#?V4
   \   000165   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000168   78..         MOV       R0,#?V0
   \   00016A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016D   90....       MOV       DPTR,#pgRes
   \   000170   E0           MOVX      A,@DPTR
   \   000171   FC           MOV       R4,A
   \   000172   AA..         MOV       R2,?V2
   \   000174   AB..         MOV       R3,?V3
   \   000176   A9..         MOV       R1,?V6
   \   000178   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   00017B   7404         MOV       A,#0x4
   \   00017D   12....       LCALL     ?DEALLOC_XSTACK8
    593                    // Calculate and write the new checksum.
    594                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   000180                ; Setup parameters for call to function calcChkF
   \   000180   7403         MOV       A,#0x3
   \   000182   12....       LCALL     ?XSTACK_DISP0_8
   \   000185   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000188   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00018B   12....       LCALL     ?XSTACK_DISP0_8
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   68           XRL       A,R0
   \   000190   7003         JNZ       ??compactPage_14
   \   000192   A3           INC       DPTR
   \   000193   E0           MOVX      A,@DPTR
   \   000194   69           XRL       A,R1
   \                     ??compactPage_14:
   \   000195   704A         JNZ       ??compactPage_8
    595                    {
    596                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   000197                ; Setup parameters for call to function setChk
   \   000197   7405         MOV       A,#0x5
   \   000199   12....       LCALL     ?XSTACK_DISP0_8
   \   00019C   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00019F   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0001A2   7405         MOV       A,#0x5
   \   0001A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A7   E0           MOVX      A,@DPTR
   \   0001A8   68           XRL       A,R0
   \   0001A9   7003         JNZ       ??compactPage_15
   \   0001AB   A3           INC       DPTR
   \   0001AC   E0           MOVX      A,@DPTR
   \   0001AD   69           XRL       A,R1
   \                     ??compactPage_15:
   \   0001AE   7031         JNZ       ??compactPage_8
    597                      {
    598                        rtrn = FALSE;
    599                        break;
    600                      }
    601                      else
    602                      {
    603                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \   0001B0                ; Setup parameters for call to function hotItemUpdate
   \   0001B0   7401         MOV       A,#0x1
   \   0001B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B5   12....       LCALL     ?Subroutine13 & 0xFFFF
    604                      }
    605                    }
    606                    else
    607                    {
    608                      rtrn = FALSE;
    609                      break;
    610                    }
    611                  }
   \                     ??CrossCallReturnLabel_13:
   \   0001B8   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
    612                  else
    613                  {
    614                    rtrn = FALSE;
    615                    break;
    616                  }
    617                }
    618              }
    619          
    620              srcOff += sz;
   \                     ??compactPage_9:
   \   0001BB   E5..         MOV       A,?V2
   \   0001BD   2E           ADD       A,R6
   \   0001BE   F5..         MOV       ?V2,A
   \   0001C0   E5..         MOV       A,?V3
   \   0001C2   3F           ADDC      A,R7
   \   0001C3   F5..         MOV       ?V3,A
   \   0001C5   C3           CLR       C
   \   0001C6   E5..         MOV       A,?V2
   \   0001C8   94F8         SUBB      A,#-0x8
   \   0001CA   E5..         MOV       A,?V3
   \   0001CC   9407         SUBB      A,#0x7
   \   0001CE   5003         JNC       $+5
   \   0001D0   02....       LJMP      ??compactPage_4 & 0xFFFF
    621            }
    622          
    623            if (rtrn == FALSE)
   \                     ??compactPage_6:
   \   0001D3   85..82       MOV       DPL,?XSP + 0
   \   0001D6   85..83       MOV       DPH,?XSP + 1
   \   0001D9   E0           MOVX      A,@DPTR
   \   0001DA   700F         JNZ       ??compactPage_16
    624            {
    625              erasePage(pgRes);
   \                     ??compactPage_17:
   \   0001DC                ; Setup parameters for call to function erasePage
   \   0001DC   12....       LCALL     ?Subroutine28 & 0xFFFF
    626            }
   \                     ??CrossCallReturnLabel_117:
   \   0001DF   8022         SJMP      ??compactPage_18
   \                     ??compactPage_8:
   \   0001E1   85..82       MOV       DPL,?XSP + 0
   \   0001E4   85..83       MOV       DPH,?XSP + 1
   \   0001E7   E4           CLR       A
   \   0001E8   F0           MOVX      @DPTR,A
   \   0001E9   80F1         SJMP      ??compactPage_17
    627            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_16:
   \   0001EB   7409         MOV       A,#0x9
   \   0001ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F0   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0001F3   700E         JNZ       ??compactPage_18
    628            {
    629              COMPACT_PAGE_CLEANUP(srcPg);
   \   0001F5                ; Setup parameters for call to function setPageUse
   \   0001F5   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0001F8                ; Setup parameters for call to function erasePage
   \   0001F8   A9..         MOV       R1,?V6
   \   0001FA   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   0001FD   E5..         MOV       A,?V6
   \   0001FF   90....       MOV       DPTR,#pgRes
   \   000202   F0           MOVX      @DPTR,A
    630            }
    631            // else invoking function must cleanup.
    632          
    633            return rtrn;
   \                     ??compactPage_18:
   \   000203   85..82       MOV       DPL,?XSP + 0
   \   000206   85..83       MOV       DPH,?XSP + 1
   \   000209   E0           MOVX      A,@DPTR
   \   00020A   F9           MOV       R1,A
   \                     ??compactPage_2:
   \   00020B   740B         MOV       A,#0xb
   \   00020D                REQUIRE ?Subroutine3
   \   00020D                ; // Fall through to label ?Subroutine3
    634          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   7405         MOV       A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV       DPTR,#pgRes
   \   000003                REQUIRE ??Subroutine63_0
   \   000003                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   AA..         MOV       R2,?V0
   \   000005   AB..         MOV       R3,?V1
   \   000007   90....       MOV       DPTR,#pgRes
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   7A01         MOV       R2,#0x1
   \   000002   90....       MOV       DPTR,#pgRes
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine68_0
   \   000001                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   A8..         MOV       R0,?V4
   \   000009   A9..         MOV       R1,?V5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E5..         MOV       A,?V2
   \   000002   2408         ADD       A,#0x8
   \   000004   F5..         MOV       ?V2,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V3
   \   000009   F5..         MOV       ?V3,A
   \   00000B   22           RET
    635          
    636          /*********************************************************************
    637           * @fn      findItem
    638           *
    639           * @brief   Find an item Id in NV and return the page and offset to its data.
    640           *
    641           * @param   id - Valid NV item Id.
    642           *
    643           * @return  Offset of data corresponding to item Id, if found;
    644           *          otherwise OSAL_NV_ITEM_NULL.
    645           *
    646           *          The page containing the item, if found;
    647           *          otherwise no valid assignment made - left equal to item Id.
    648           *
    649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          static uint16 findItem( uint16 id )
   \                     findItem:
    651          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   8003         SJMP      ??findItem_0
    652            uint16 off;
    653            uint8 pg;
    654          
    655            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    656            {
    657              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    658              {
    659                findPg = pg;
    660                return off;
    661              }
    662            }
    663          
    664            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    665            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    666            {
    667              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV       A,#-0x80
   \   00000C   4F           ORL       A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV       R7,A
    668            }
   \   00000E   75..79       MOV       ?V0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV       R4,#0x0
   \   000013   EE           MOV       A,R6
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   FB           MOV       R3,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6008         JZ        ??findItem_3
   \   000020   E5..         MOV       A,?V0
   \   000022   90....       MOV       DPTR,#findPg
   \   000025   F0           MOVX      @DPTR,A
   \   000026   8015         SJMP      ??findItem_4
   \                     ??findItem_3:
   \   000028   05..         INC       ?V0
   \   00002A   E5..         MOV       A,?V0
   \   00002C   C3           CLR       C
   \   00002D   947F         SUBB      A,#0x7f
   \   00002F   40E0         JC        ??findItem_2
   \   000031   EF           MOV       A,R7
   \   000032   5480         ANL       A,#0x80
   \   000034   60D4         JZ        ??findItem_1
    669            else
    670            {
    671              findPg = OSAL_NV_PAGE_NULL;
   \   000036   90....       MOV       DPTR,#findPg
   \   000039   E4           CLR       A
   \   00003A   F0           MOVX      @DPTR,A
    672              return OSAL_NV_ITEM_NULL;
   \   00003B   FA           MOV       R2,A
   \   00003C   FB           MOV       R3,A
    673            }
   \                     ??findItem_4:
   \   00003D   02....       LJMP      ??Subroutine60_0 & 0xFFFF
    674          }
    675          
    676          /*********************************************************************
    677           * @fn      initItem
    678           *
    679           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    680           *
    681           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    682           *                 (i.e. if invoked from osal_nv_item_init() ).
    683           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    684           *                 is ok to use as a return value of the page number to be cleaned with
    685           *                 COMPACT_PAGE_CLEANUP().
    686           *                 (i.e. if invoked from osal_nv_write() ).
    687           * @param   id  - Valid NV item Id.
    688           * @param   len - Item data length.
    689           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    690           *
    691           * @return  The OSAL Nv page number if item write and read back checksums ok;
    692           *          OSAL_NV_PAGE_NULL otherwise.
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    695          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V6,R2
   \   00000E   8B..         MOV       ?V7,R3
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    696            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   000014   C3           CLR       C
   \   000015   EC           MOV       A,R4
   \   000016   94F4         SUBB      A,#-0xc
   \   000018   ED           MOV       A,R5
   \   000019   94FF         SUBB      A,#-0x1
   \   00001B   400E         JC        ??initItem_0
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   74FC         MOV       A,#-0x4
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   74FF         MOV       A,#-0x1
   \   000029   8019         SJMP      ??initItem_1
   \                     ??initItem_0:
   \   00002B   EC           MOV       A,R4
   \   00002C   2403         ADD       A,#0x3
   \   00002E   F8           MOV       R0,A
   \   00002F   E4           CLR       A
   \   000030   35..         ADDC      A,?V1
   \   000032   F9           MOV       R1,A
   \   000033   E8           MOV       A,R0
   \   000034   54FC         ANL       A,#0xfc
   \   000036   2408         ADD       A,#0x8
   \   000038   5001         JNC       ??initItem_2
   \   00003A   09           INC       R1
   \                     ??initItem_2:
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E9           MOV       A,R1
   \                     ??initItem_1:
   \   000044   F0           MOVX      @DPTR,A
    697            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \   000045   7F00         MOV       R7,#0x0
    698            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000047   7C06         MOV       R4,#0x6
    699            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   000049   90....       MOV       DPTR,#pgRes
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   04           INC       A
   \   00004E   FE           MOV       R6,A
    700          
    701            do {
    702              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_3:
   \   00004F   EE           MOV       A,R6
   \   000050   C3           CLR       C
   \   000051   947F         SUBB      A,#0x7f
   \   000053   4002         JC        ??initItem_4
    703              {
    704                pg = OSAL_NV_PAGE_BEG;
   \   000055   7E79         MOV       R6,#0x79
    705              }
    706              if ( pg != pgRes )
   \                     ??initItem_4:
   \   000057   90....       MOV       DPTR,#pgRes
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   6E           XRL       A,R6
   \   00005C   602C         JZ        ??initItem_5
    707              {
    708                uint8 idx = pg - OSAL_NV_PAGE_BEG;
   \   00005E   7487         MOV       A,#-0x79
   \   000060   2E           ADD       A,R6
    709                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
   \   000061   25E0         ADD       A,0xE0 /* A   */
   \   000063   F8           MOV       R0,A
   \   000064   E4           CLR       A
   \   000065   33           RLC       A
   \   000066   F9           MOV       R1,A
   \   000067   74..         MOV       A,#pgOff & 0xff
   \   000069   28           ADD       A,R0
   \   00006A   F582         MOV       DPL,A
   \   00006C   74..         MOV       A,#(pgOff >> 8) & 0xff
   \   00006E   39           ADDC      A,R1
   \   00006F   F583         MOV       DPH,A
   \   000071   12....       LCALL     ?Subroutine16 & 0xFFFF
    710                {
    711                  break;
    712                }
    713              }
   \                     ??CrossCallReturnLabel_25:
   \   000074   E4           CLR       A
   \   000075   C3           CLR       C
   \   000076   9A           SUBB      A,R2
   \   000077   FA           MOV       R2,A
   \   000078   7408         MOV       A,#0x8
   \   00007A   9B           SUBB      A,R3
   \   00007B   FB           MOV       R3,A
   \   00007C   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   2A           ADD       A,R2
   \   000081   FA           MOV       R2,A
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   3B           ADDC      A,R3
   \   000085   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000088   5008         JNC       ??initItem_6
    714              pg++;
   \                     ??initItem_5:
   \   00008A   0E           INC       R6
    715            } while (--cnt);
   \   00008B   1C           DEC       R4
   \   00008C   EC           MOV       A,R4
   \   00008D   70C0         JNZ       ??initItem_3
   \   00008F   02....       LJMP      ??initItem_7 & 0xFFFF
    716          
    717            if (cnt)
   \                     ??initItem_6:
   \   000092   EC           MOV       A,R4
   \   000093   7003         JNZ       $+5
   \   000095   02....       LJMP      ??initItem_7 & 0xFFFF
    718            {
    719              // Item fits if an old page is compacted.
    720              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   000098   EE           MOV       A,R6
   \   000099   25E0         ADD       A,0xE0 /* A   */
   \   00009B   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   00009E   FA           MOV       R2,A
   \   00009F   7408         MOV       A,#0x8
   \   0000A1   99           SUBB      A,R1
   \   0000A2   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000A5   4003         JC        $+5
   \   0000A7   02....       LJMP      ??initItem_8 & 0xFFFF
    721              {
    722                osalNvPgHdr_t pgHdr;
    723          
    724                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    725                 * OSAL_Nv interruptions caused by resets.
    726                 */
    727                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   0000AA                ; Setup parameters for call to function HalFlashRead
   \   0000AA   75..08       MOV       ?V2,#0x8
   \   0000AD   8F..         MOV       ?V3,R7
   \   0000AF   78..         MOV       R0,#?V2
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B4   7404         MOV       A,#0x4
   \   0000B6   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B9   7A00         MOV       R2,#0x0
   \   0000BB   7B00         MOV       R3,#0x0
   \   0000BD   EE           MOV       A,R6
   \   0000BE   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
    728                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   0000C4   7406         MOV       A,#0x6
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F4           CPL       A
   \   0000CB   7003         JNZ       ??initItem_9
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F4           CPL       A
   \                     ??initItem_9:
   \   0000D0   700B         JNZ       ??initItem_10
    729                {
    730                  // Mark the old page as being in process of compaction.
    731                  sz = OSAL_NV_ZEROED_ID;
   \   0000D2   12....       LCALL     ?Subroutine7 & 0xFFFF
    732                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
    733                }
   \                     ??CrossCallReturnLabel_127:
   \   0000D5   7A04         MOV       R2,#0x4
   \   0000D7   FB           MOV       R3,A
   \   0000D8   EE           MOV       A,R6
   \   0000D9   F9           MOV       R1,A
   \   0000DA   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    734          
    735                /* First the old page is compacted, then the new item will be the last one written to what
    736                 * had been the reserved page.
    737                 */
    738                if (compactPage( pg, id ))
   \                     ??initItem_10:
   \   0000DD                ; Setup parameters for call to function compactPage
   \   0000DD   AA..         MOV       R2,?V6
   \   0000DF   AB..         MOV       R3,?V7
   \   0000E1   EE           MOV       A,R6
   \   0000E2   F9           MOV       R1,A
   \   0000E3   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   0000E6   E9           MOV       A,R1
   \   0000E7   6072         JZ        ??initItem_7
    739                {
    740                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   0000E9                ; Setup parameters for call to function writeItem
   \   0000E9   E5..         MOV       A,?V4
   \   0000EB   F5..         MOV       ?V2,A
   \   0000ED   78..         MOV       R0,#?V2
   \   0000EF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F2   741B         MOV       A,#0x1b
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000FA   AC..         MOV       R4,?V0
   \   0000FC   AD..         MOV       R5,?V1
   \   0000FE   AA..         MOV       R2,?V6
   \   000100   AB..         MOV       R3,?V7
   \   000102   90....       MOV       DPTR,#pgRes
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F9           MOV       R1,A
   \   000107   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   00010A   7403         MOV       A,#0x3
   \   00010C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010F   E9           MOV       A,R1
   \   000110   6005         JZ        ??initItem_11
    741                  {
    742                    rtrn = pgRes;
   \   000112   90....       MOV       DPTR,#pgRes
   \   000115   E0           MOVX      A,@DPTR
   \   000116   FF           MOV       R7,A
    743                  }
    744          
    745                  if ( flag == FALSE )
   \                     ??initItem_11:
   \   000117   E5..         MOV       A,?V4
   \   000119   700B         JNZ       ??initItem_12
    746                  {
    747                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    748                     * the old page to be cleaned up.
    749                     */
    750                    *(uint8 *)buf = pg;
   \   00011B   741A         MOV       A,#0x1a
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   12....       LCALL     ?Subroutine52 & 0xFFFF
    751                  }
   \                     ??CrossCallReturnLabel_101:
   \   000123   EE           MOV       A,R6
   \   000124   800C         SJMP      ??initItem_13
    752                  else
    753                  {
    754                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    755                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    756                     */
    757                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_12:
   \   000126                ; Setup parameters for call to function setPageUse
   \   000126   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000129                ; Setup parameters for call to function erasePage
   \   000129   EE           MOV       A,R6
   \   00012A   F9           MOV       R1,A
   \   00012B   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   00012E   EE           MOV       A,R6
   \   00012F   90....       MOV       DPTR,#pgRes
   \                     ??initItem_13:
   \   000132   F0           MOVX      @DPTR,A
   \   000133   8026         SJMP      ??initItem_7
    758                  }
    759                }
    760              }
    761              else
    762              {
    763                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_8:
   \   000135                ; Setup parameters for call to function writeItem
   \   000135   E5..         MOV       A,?V4
   \   000137   F5..         MOV       ?V2,A
   \   000139   78..         MOV       R0,#?V2
   \   00013B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00013E   741B         MOV       A,#0x1b
   \   000140   12....       LCALL     ?XSTACK_DISP0_8
   \   000143   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000146   AC..         MOV       R4,?V0
   \   000148   AA..         MOV       R2,?V6
   \   00014A   AB..         MOV       R3,?V7
   \   00014C   EE           MOV       A,R6
   \   00014D   F9           MOV       R1,A
   \   00014E   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   000151   7403         MOV       A,#0x3
   \   000153   12....       LCALL     ?DEALLOC_XSTACK8
   \   000156   E9           MOV       A,R1
   \   000157   6002         JZ        ??initItem_7
    764                {
    765                  rtrn = pg;
   \   000159   EE           MOV       A,R6
   \   00015A   FF           MOV       R7,A
    766                }
    767              }
    768            }
    769          
    770            return rtrn;
   \                     ??initItem_7:
   \   00015B   EF           MOV       A,R7
   \   00015C   F9           MOV       R1,A
   \   00015D   02....       LJMP      ?Subroutine2 & 0xFFFF
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   FB           MOV       R3,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   00000A   C3           CLR       C
   \   00000B   EA           MOV       A,R2
   \   00000C   98           SUBB      A,R0
   \   00000D   EB           MOV       A,R3
   \   00000E   99           SUBB      A,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007                REQUIRE ??Subroutine65_0
   \   000007                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000003   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000006   E4           CLR       A
   \   000007   C3           CLR       C
   \   000008   98           SUBB      A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    772          
    773          /*********************************************************************
    774           * @fn      setItem
    775           *
    776           * @brief   Set an item Id or status to mark its state.
    777           *
    778           * @param   pg - Valid NV page.
    779           * @param   offset - Valid offset into the page of the item data - the header
    780           *                   offset is calculated from this.
    781           * @param   stat - Valid enum value for the item status.
    782           *
    783           * @return  none
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    786          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8C..         MOV       ?V3,R4
    787            osalNvHdr_t hdr;
    788          
    789            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV       A,R2
   \   00000F   24F8         ADD       A,#-0x8
   \   000011   F5..         MOV       ?V0,A
   \   000013   EB           MOV       A,R3
   \   000014   34FF         ADDC      A,#-0x1
   \   000016   F5..         MOV       ?V1,A
    790            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV       ?V4,#0x8
   \   00001B   75..00       MOV       ?V5,#0x0
   \   00001E   78..         MOV       R0,#?V4
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP102_8
   \   000028   AA..         MOV       R2,?V0
   \   00002A   AB..         MOV       R3,?V1
   \   00002C   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
    791          
    792            if ( stat == eNvXfer )
   \   000032   E5..         MOV       A,?V3
   \   000034   7022         JNZ       ??setItem_0
    793            {
    794              hdr.stat = OSAL_NV_ACTIVE;
   \   000036   7406         MOV       A,#0x6
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
    795              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   00003F                ; Setup parameters for call to function writeWord
   \   00003F   7404         MOV       A,#0x4
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   AC82         MOV       R4,DPL
   \   000046   AD83         MOV       R5,DPH
   \   000048   E5..         MOV       A,?V0
   \   00004A   2404         ADD       A,#0x4
   \   00004C   FA           MOV       R2,A
   \   00004D   E4           CLR       A
   \   00004E   35..         ADDC      A,?V1
   \   000050   FB           MOV       R3,A
   \   000051   A9..         MOV       R1,?V2
   \   000053   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   \   000056   8019         SJMP      ??CrossCallReturnLabel_131
    796            }
    797            else // if ( stat == eNvZero )
    798            {
    799              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    800                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine11 & 0xFFFF
    801              hdr.id = 0;
   \                     ??CrossCallReturnLabel_4:
   \   000060   12....       LCALL     ?Subroutine7 & 0xFFFF
    802              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_128:
   \   000063   AA..         MOV       R2,?V0
   \   000065   AB..         MOV       R3,?V1
   \   000067   A9..         MOV       R1,?V2
   \   000069   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    803              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   00006C   A8..         MOV       R0,?V2
   \   00006E   12....       LCALL     ?Subroutine23 & 0xFFFF
    804            }
    805          }
   \                     ??CrossCallReturnLabel_131:
   \   000071   7408         MOV       A,#0x8
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   \   000076                REQUIRE ?Subroutine4
   \   000076                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E8           MOV       A,R0
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   00000D                REQUIRE ??Subroutine66_0
   \   00000D                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   39           ADDC      A,R1
   \   000001   F583         MOV       DPH,A
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   2408         ADD       A,#0x8
   \   000005   FE           MOV       R6,A
   \   000006   E4           CLR       A
   \   000007   39           ADDC      A,R1
   \   000008   FF           MOV       R7,A
   \   000009   22           RET
    806          
    807          /*********************************************************************
    808           * @fn      setChk
    809           *
    810           * @brief   Set the item header checksum given the data buffer offset.
    811           *
    812           * @param   pg - Valid NV page.
    813           * @param   offset - Valid offset into the page of the item data - the header
    814           *                   offset is calculated from this.
    815           * @param   chk - The checksum to set.
    816           *
    817           * @return  The checksum read back.
    818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine59_0
   \   000002                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    819          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    820          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   89..         MOV       ?V0,R1
    821            offset -= OSAL_NV_WORD_SIZE;
   \   000017   EA           MOV       A,R2
   \   000018   24FC         ADD       A,#-0x4
   \   00001A   FE           MOV       R6,A
   \   00001B   EB           MOV       A,R3
   \   00001C   34FF         ADDC      A,#-0x1
   \   00001E   FF           MOV       R7,A
    822            writeWordH( pg, offset, (uint8 *)&chk );
   \   00001F                ; Setup parameters for call to function writeWordH
   \   00001F   AC..         MOV       R4,?XSP + 0
   \   000021   AD..         MOV       R5,?XSP + 1
   \   000023   EE           MOV       A,R6
   \   000024   FA           MOV       R2,A
   \   000025   EF           MOV       A,R7
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    823            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   00002A                ; Setup parameters for call to function HalFlashRead
   \   00002A   75..02       MOV       ?V2,#0x2
   \   00002D   75..00       MOV       ?V3,#0x0
   \   000030   78..         MOV       R0,#?V2
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?XSTACK_DISP102_8
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   A9..         MOV       R1,?V0
   \   000040   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
    824          
    825            return chk;
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00004F   02....       LJMP      ?Subroutine0 & 0xFFFF
    826          }
    827          
    828          /*********************************************************************
    829           * @fn      calcChkB
    830           *
    831           * @brief   Calculates the data checksum over the 'buf' parameter.
    832           *
    833           * @param   len - Byte count of the data to be checksummed.
    834           * @param   buf - Data buffer to be checksummed.
    835           *
    836           * @return  Calculated checksum of the data bytes.
    837           */
    838          static uint16 calcChkB( uint16 len, uint8 *buf )
    839          {
    840            uint8 fill = len % OSAL_NV_WORD_SIZE;
    841            uint16 chk;
    842          
    843            if ( !buf )
    844            {
    845              chk = len * OSAL_NV_ERASED;
    846            }
    847            else
    848            {
    849              chk = 0;
    850              while ( len-- )
    851              {
    852                chk += *buf++;
    853              }
    854            }
    855          
    856            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    857            if ( fill )
    858            {
    859              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    860            }
    861          
    862            return chk;
    863          }
    864          
    865          /*********************************************************************
    866           * @fn      calcChkF
    867           *
    868           * @brief   Calculates the data checksum by reading the data bytes from NV.
    869           *
    870           * @param   pg - A valid NV Flash page.
    871           * @param   offset - A valid offset into the page.
    872           * @param   len - Byte count of the data to be checksummed.
    873           *
    874           * @return  Calculated checksum of the data bytes.
    875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V6,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    878            uint16 chk = 0;
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   75..00       MOV       ?V3,#0x0
    879          
    880            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   000018   EC           MOV       A,R4
   \   000019   2403         ADD       A,#0x3
   \   00001B   F5..         MOV       ?V4,A
   \   00001D   E4           CLR       A
   \   00001E   3F           ADDC      A,R7
   \   00001F   F5..         MOV       ?V5,A
   \   000021   7402         MOV       A,#0x2
   \   000023   78..         MOV       R0,#?V4
   \   000025   12....       LCALL     ?US_SHR
   \   000028   AE..         MOV       R6,?V4
   \   00002A   AF..         MOV       R7,?V5
    881          
    882            while ( len-- )
   \                     ??calcChkF_0:
   \   00002C   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00002F   6048         JZ        ??calcChkF_1
    883            {
    884              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    885          
    886              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   000031                ; Setup parameters for call to function HalFlashRead
   \   000031   75..04       MOV       ?V4,#0x4
   \   000034   75..00       MOV       ?V5,#0x0
   \   000037   78..         MOV       R0,#?V4
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?XSTACK_DISP102_8
   \   000041   AA..         MOV       R2,?V0
   \   000043   AB..         MOV       R3,?V1
   \   000045   A9..         MOV       R1,?V6
   \   000047   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
    887              offset += OSAL_NV_WORD_SIZE;
   \   00004D   12....       LCALL     ?Subroutine57 & 0xFFFF
    888          
    889              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \                     ??CrossCallReturnLabel_136:
   \   000050   7800         MOV       R0,#0x0
    890              {
    891                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   000052   E8           MOV       A,R0
   \   000053   FA           MOV       R2,A
   \   000054   85..82       MOV       DPL,?XSP + 0
   \   000057   85..83       MOV       DPH,?XSP + 1
   \   00005A   E582         MOV       A,DPL
   \   00005C   2A           ADD       A,R2
   \   00005D   F582         MOV       DPL,A
   \   00005F   E4           CLR       A
   \   000060   3583         ADDC      A,DPH
   \   000062   F583         MOV       DPH,A
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FA           MOV       R2,A
   \   000066   E5..         MOV       A,?V2
   \   000068   2A           ADD       A,R2
   \   000069   F5..         MOV       ?V2,A
   \   00006B   E4           CLR       A
   \   00006C   35..         ADDC      A,?V3
   \   00006E   F5..         MOV       ?V3,A
    892              }
   \   000070   08           INC       R0
   \   000071   E8           MOV       A,R0
   \   000072   C3           CLR       C
   \   000073   9404         SUBB      A,#0x4
   \   000075   50B5         JNC       ??calcChkF_0
   \   000077   80D9         SJMP      ??calcChkF_2
    893            }
    894          
    895            return chk;
   \                     ??calcChkF_1:
   \   000079   AA..         MOV       R2,?V2
   \   00007B   AB..         MOV       R3,?V3
   \   00007D   7404         MOV       A,#0x4
   \   00007F   02....       LJMP      ?Subroutine3 & 0xFFFF
    896          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   EE           MOV       A,R6
   \   000001   F8           MOV       R0,A
   \   000002   EF           MOV       A,R7
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1E           DEC       R6
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FF           MOV       R7,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E5..         MOV       A,?V0
   \   000002   2404         ADD       A,#0x4
   \   000004   F5..         MOV       ?V0,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F5..         MOV       ?V1,A
   \   00000B   22           RET
    897          
    898          /*********************************************************************
    899           * @fn      writeWord
    900           *
    901           * @brief   Writes a Flash-WORD to NV.
    902           *
    903           * @param   pg - A valid NV Flash page.
    904           * @param   offset - A valid offset into the page.
    905           * @param   buf - Pointer to source buffer.
    906           *
    907           * @return  none
    908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    909          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    910          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    911            offset = (offset / HAL_FLASH_WORD_SIZE) +
    912                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    913          
    914            HalFlashWrite(offset, buf, 1);
   \   000005                ; Setup parameters for call to function HalFlashWrite
   \   000005   75..01       MOV       ?V0,#0x1
   \   000008   75..00       MOV       ?V1,#0x0
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   7402         MOV       A,#0x2
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?US_SHR
   \   00001B   E9           MOV       A,R1
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   75..00       MOV       ?V3,#0x0
   \   000021   7409         MOV       A,#0x9
   \   000023   78..         MOV       R0,#?V2
   \   000025   12....       LCALL     ?S_SHL
   \   000028   E5..         MOV       A,?V0
   \   00002A   2400         ADD       A,#0x0
   \   00002C   FA           MOV       R2,A
   \   00002D   E5..         MOV       A,?V1
   \   00002F   35..         ADDC      A,?V3
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000035   02....       LJMP      ?Subroutine0 & 0xFFFF
    915          }
    916          
    917          /*********************************************************************
    918           * @fn      writeWordM
    919           *
    920           * @brief   Writes multiple Flash-WORDs to NV.
    921           *
    922           * @param   pg - A valid NV Flash page.
    923           * @param   offset - A valid offset into the page.
    924           * @param   buf - Pointer to source buffer.
    925           * @param   cnt - Number of 4-byte blocks to write.
    926           *
    927           * @return  none
    928           */
    929          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    930          {
    931            offset = (offset / HAL_FLASH_WORD_SIZE) +
    932                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    933            HalFlashWrite(offset, buf, cnt);
    934          }
    935          
    936          /*********************************************************************
    937           * @fn      writeWordH
    938           *
    939           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    940           *
    941           * @param   pg - A valid NV Flash page.
    942           * @param   offset - A valid offset into the page.
    943           * @param   buf - Pointer to source buffer.
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    948          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    949            uint8 tmp[4];
    950          
    951            tmp[0] = buf[0];
   \   00000A   8C82         MOV       DPL,R4
   \   00000C   8D83         MOV       DPH,R5
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   F0           MOVX      @DPTR,A
    952            tmp[1] = buf[1];
   \   000016   8C82         MOV       DPL,R4
   \   000018   8D83         MOV       DPH,R5
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C0E0         PUSH      A
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
    953            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
    954            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   74FF         MOV       A,#-0x1
   \   000035   F0           MOVX      @DPTR,A
    955          
    956            writeWord( pg, offset, tmp );
   \   000036                ; Setup parameters for call to function writeWord
   \   000036   AC..         MOV       R4,?XSP + 0
   \   000038   AD..         MOV       R5,?XSP + 1
   \   00003A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    957          }
   \   00003D   7404         MOV       A,#0x4
   \   00003F   02....       LJMP      ?Subroutine1 & 0xFFFF
    958          
    959          /*********************************************************************
    960           * @fn      writeBuf
    961           *
    962           * @brief   Writes a data buffer to NV.
    963           *
    964           * @param   dstPg - A valid NV Flash page.
    965           * @param   offset - A valid offset into the page.
    966           * @param   len  - Byte count of the data to write.
    967           * @param   buf  - The data to write.
    968           *
    969           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    972          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V7,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
    973            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   EA           MOV       A,R2
   \   000015   5403         ANL       A,#0x3
   \   000017   F5..         MOV       ?V6,A
    974            uint8 tmp[OSAL_NV_WORD_SIZE];
    975          
    976            if ( rem )
   \   000019   6061         JZ        ??CrossCallReturnLabel_135
    977            {
    978              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   00001B   74FC         MOV       A,#-0x4
   \   00001D   5A           ANL       A,R2
   \   00001E   F5..         MOV       ?V0,A
    979              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000020                ; Setup parameters for call to function HalFlashRead
   \   000020   75..04       MOV       ?V2,#0x4
   \   000023   75..00       MOV       ?V3,#0x0
   \   000026   78..         MOV       R0,#?V2
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   AA..         MOV       R2,?V0
   \   000032   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??writeBuf_0:
   \   000038   EE           MOV       A,R6
   \   000039   4F           ORL       A,R7
   \   00003A   6033         JZ        ??writeBuf_1
    980          
    981              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    982              {
    983                tmp[rem++] = *buf++;
   \   00003C   7414         MOV       A,#0x14
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000044   C0E0         PUSH      A
   \   000046   A8..         MOV       R0,?V6
   \   000048   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00004B   D0E0         POP       A
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   7414         MOV       A,#0x14
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   E8           MOV       A,R0
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   E9           MOV       A,R1
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   05..         INC       ?V6
    984                len--;
   \   000060   EE           MOV       A,R6
   \   000061   24FF         ADD       A,#-0x1
   \   000063   1E           DEC       R6
   \   000064   EF           MOV       A,R7
   \   000065   34FF         ADDC      A,#-0x1
   \   000067   FF           MOV       R7,A
    985              }
   \   000068   E5..         MOV       A,?V6
   \   00006A   C3           CLR       C
   \   00006B   9404         SUBB      A,#0x4
   \   00006D   40C9         JC        ??writeBuf_0
    986          
    987              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_1:
   \   00006F                ; Setup parameters for call to function writeWord
   \   00006F   AC..         MOV       R4,?XSP + 0
   \   000071   AD..         MOV       R5,?XSP + 1
   \   000073   AA..         MOV       R2,?V0
   \   000075   AB..         MOV       R3,?V1
   \   000077   A9..         MOV       R1,?V7
   \   000079   12....       LCALL     ??Subroutine67_0 & 0xFFFF
    988              dstOff += OSAL_NV_WORD_SIZE;
    989            }
    990          
    991            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_135:
   \   00007C   EE           MOV       A,R6
   \   00007D   5403         ANL       A,#0x3
   \   00007F   F5..         MOV       ?V6,A
    992            len /= OSAL_NV_WORD_SIZE;
   \   000081   8E..         MOV       ?V2,R6
   \   000083   8F..         MOV       ?V3,R7
   \   000085   7402         MOV       A,#0x2
   \   000087   78..         MOV       R0,#?V2
   \   000089   12....       LCALL     ?US_SHR
   \   00008C   AE..         MOV       R6,?V2
   \   00008E   AF..         MOV       R7,?V3
    993          
    994            if ( len )
   \   000090   EE           MOV       A,R6
   \   000091   4F           ORL       A,R7
   \   000092   6069         JZ        ??writeBuf_2
    995            {
    996              writeWordM( dstPg, dstOff, buf, len );
   \   000094                ; Setup parameters for call to function HalFlashWrite
   \   000094   78..         MOV       R0,#?V2
   \   000096   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000099   7416         MOV       A,#0x16
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000A1   85....       MOV       ?V2,?V0
   \   0000A4   85....       MOV       ?V3,?V1
   \   0000A7   7402         MOV       A,#0x2
   \   0000A9   78..         MOV       R0,#?V2
   \   0000AB   12....       LCALL     ?US_SHR
   \   0000AE   E5..         MOV       A,?V7
   \   0000B0   F5..         MOV       ?V4,A
   \   0000B2   75..00       MOV       ?V5,#0x0
   \   0000B5   7409         MOV       A,#0x9
   \   0000B7   78..         MOV       R0,#?V4
   \   0000B9   12....       LCALL     ?S_SHL
   \   0000BC   E5..         MOV       A,?V2
   \   0000BE   2400         ADD       A,#0x0
   \   0000C0   FA           MOV       R2,A
   \   0000C1   E5..         MOV       A,?V3
   \   0000C3   35..         ADDC      A,?V5
   \   0000C5   FB           MOV       R3,A
   \   0000C6   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0000C9   7402         MOV       A,#0x2
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
    997              dstOff += OSAL_NV_WORD_SIZE * len;
   \   0000CE   8E..         MOV       ?V2,R6
   \   0000D0   8F..         MOV       ?V3,R7
   \   0000D2   7402         MOV       A,#0x2
   \   0000D4   78..         MOV       R0,#?V2
   \   0000D6   12....       LCALL     ?S_SHL
   \   0000D9   A8..         MOV       R0,?V2
   \   0000DB   A9..         MOV       R1,?V3
   \   0000DD   E5..         MOV       A,?V0
   \   0000DF   28           ADD       A,R0
   \   0000E0   F5..         MOV       ?V0,A
   \   0000E2   E5..         MOV       A,?V1
   \   0000E4   39           ADDC      A,R1
   \   0000E5   F5..         MOV       ?V1,A
    998              buf += OSAL_NV_WORD_SIZE * len;
   \   0000E7   7414         MOV       A,#0x14
   \   0000E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   28           ADD       A,R0
   \   0000EE   F8           MOV       R0,A
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   39           ADDC      A,R1
   \   0000F2   F9           MOV       R1,A
   \   0000F3   7414         MOV       A,#0x14
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   E8           MOV       A,R0
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   E9           MOV       A,R1
   \   0000FC   F0           MOVX      @DPTR,A
    999            }
   1000          
   1001            if ( rem )
   \                     ??writeBuf_2:
   \   0000FD   E5..         MOV       A,?V6
   \   0000FF   6059         JZ        ??writeBuf_3
   1002            {
   1003              uint8 idx = 0;
   \   000101   7E00         MOV       R6,#0x0
   1004              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000103                ; Setup parameters for call to function HalFlashRead
   \   000103   75..04       MOV       ?V2,#0x4
   \   000106   8E..         MOV       ?V3,R6
   \   000108   78..         MOV       R0,#?V2
   \   00010A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010D   7402         MOV       A,#0x2
   \   00010F   12....       LCALL     ?XSTACK_DISP102_8
   \   000112   AA..         MOV       R2,?V0
   \   000114   AB..         MOV       R3,?V1
   \   000116   A9..         MOV       R1,?V7
   \   000118   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00011B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011E   8023         SJMP      ??writeBuf_4
   1005              while ( rem-- )
   1006              {
   1007                tmp[idx++] = *buf++;
   \                     ??writeBuf_5:
   \   000120   7414         MOV       A,#0x14
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   12....       LCALL     ?Subroutine15 & 0xFFFF
   1008              }
   \                     ??CrossCallReturnLabel_21:
   \   000128   C0E0         PUSH      A
   \   00012A   EE           MOV       A,R6
   \   00012B   F8           MOV       R0,A
   \   00012C   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00012F   D0E0         POP       A
   \   000131   F0           MOVX      @DPTR,A
   \   000132   7414         MOV       A,#0x14
   \   000134   12....       LCALL     ?XSTACK_DISP0_8
   \   000137   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00013A   12....       LCALL     ?XSTACK_DISP0_8
   \   00013D   E8           MOV       A,R0
   \   00013E   F0           MOVX      @DPTR,A
   \   00013F   A3           INC       DPTR
   \   000140   E9           MOV       A,R1
   \   000141   F0           MOVX      @DPTR,A
   \   000142   0E           INC       R6
   \                     ??writeBuf_4:
   \   000143   AF..         MOV       R7,?V6
   \   000145   74FF         MOV       A,#-0x1
   \   000147   2F           ADD       A,R7
   \   000148   F5..         MOV       ?V6,A
   \   00014A   04           INC       A
   \   00014B   70D3         JNZ       ??writeBuf_5
   1009              writeWord( dstPg, dstOff, tmp );
   \   00014D                ; Setup parameters for call to function writeWord
   \   00014D   AC..         MOV       R4,?XSP + 0
   \   00014F   AD..         MOV       R5,?XSP + 1
   \   000151   AA..         MOV       R2,?V0
   \   000153   AB..         MOV       R3,?V1
   \   000155   A9..         MOV       R1,?V7
   \   000157   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1010            }
   1011          }
   \                     ??writeBuf_3:
   \   00015A   7404         MOV       A,#0x4
   \   00015C   02....       LJMP      ??Subroutine70_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E582         MOV       A,DPL
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3583         ADDC      A,DPH
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   7414         MOV       A,#0x14
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   \   000003   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2401         ADD       A,#0x1
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   1012          
   1013          /*********************************************************************
   1014           * @fn      xferBuf
   1015           *
   1016           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1017           *
   1018           * @return  none
   1019           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1020          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1021          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V6,R2
   \   000014   8B..         MOV       ?V7,R3
   \   000016   8C..         MOV       ?V3,R4
   \   000018   7415         MOV       A,#0x15
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine22 & 0xFFFF
   1022            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_47:
   \   000020   E5..         MOV       A,?V0
   \   000022   5403         ANL       A,#0x3
   \   000024   F5..         MOV       ?V2,A
   \   000026   7417         MOV       A,#0x17
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FE           MOV       R6,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FF           MOV       R7,A
   1023            uint8 tmp[OSAL_NV_WORD_SIZE];
   1024          
   1025            if ( rem )
   \   000030   E5..         MOV       A,?V2
   \   000032   6069         JZ        ??CrossCallReturnLabel_133
   1026            {
   1027              dstOff -= rem;
   \   000034   F8           MOV       R0,A
   \   000035   C3           CLR       C
   \   000036   E5..         MOV       A,?V0
   \   000038   98           SUBB      A,R0
   \   000039   F5..         MOV       ?V0,A
   \   00003B   E5..         MOV       A,?V1
   \   00003D   9400         SUBB      A,#0x0
   \   00003F   F5..         MOV       ?V1,A
   1028              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000041                ; Setup parameters for call to function HalFlashRead
   \   000041   75..04       MOV       ?V4,#0x4
   \   000044   75..00       MOV       ?V5,#0x0
   \   000047   78..         MOV       R0,#?V4
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7403         MOV       A,#0x3
   \   00004E   12....       LCALL     ?XSTACK_DISP102_8
   \   000051   AA..         MOV       R2,?V0
   \   000053   AB..         MOV       R3,?V1
   \   000055   A9..         MOV       R1,?V3
   \   000057   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??xferBuf_0:
   \   00005D   EE           MOV       A,R6
   \   00005E   4F           ORL       A,R7
   \   00005F   6034         JZ        ??xferBuf_1
   1029          
   1030              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   1031              {
   1032                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   000061                ; Setup parameters for call to function HalFlashRead
   \   000061   75..01       MOV       ?V4,#0x1
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   A8..         MOV       R0,?V2
   \   00006B   7403         MOV       A,#0x3
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
   1033                srcOff++;
   \   00007C   05..         INC       ?V6
   \   00007E   E5..         MOV       A,?V6
   \   000080   7002         JNZ       ??xferBuf_2
   \   000082   05..         INC       ?V7
   1034                rem++;
   \                     ??xferBuf_2:
   \   000084   05..         INC       ?V2
   1035                len--;
   \   000086   EE           MOV       A,R6
   \   000087   24FF         ADD       A,#-0x1
   \   000089   1E           DEC       R6
   \   00008A   EF           MOV       A,R7
   \   00008B   34FF         ADDC      A,#-0x1
   \   00008D   FF           MOV       R7,A
   1036              }
   \   00008E   E5..         MOV       A,?V2
   \   000090   C3           CLR       C
   \   000091   9404         SUBB      A,#0x4
   \   000093   40C8         JC        ??xferBuf_0
   1037          
   1038              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_1:
   \   000095                ; Setup parameters for call to function writeWord
   \   000095   7401         MOV       A,#0x1
   \   000097   12....       LCALL     ?XSTACK_DISP102_8
   \   00009A   12....       LCALL     ?Subroutine37 & 0xFFFF
   1039              dstOff += OSAL_NV_WORD_SIZE;
   1040            }
   1041          
   1042            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_133:
   \   00009D   EE           MOV       A,R6
   \   00009E   5403         ANL       A,#0x3
   \   0000A0   F5..         MOV       ?V2,A
   1043            len /= OSAL_NV_WORD_SIZE;
   \   0000A2   8E..         MOV       ?V4,R6
   \   0000A4   8F..         MOV       ?V5,R7
   \   0000A6   7402         MOV       A,#0x2
   \   0000A8   78..         MOV       R0,#?V4
   \   0000AA   12....       LCALL     ?US_SHR
   \   0000AD   AE..         MOV       R6,?V4
   \   0000AF   AF..         MOV       R7,?V5
   \   0000B1   8032         SJMP      ??CrossCallReturnLabel_134
   1044          
   1045            while ( len-- )
   1046            {
   1047              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_3:
   \   0000B3                ; Setup parameters for call to function HalFlashRead
   \   0000B3   75..04       MOV       ?V4,#0x4
   \   0000B6   75..00       MOV       ?V5,#0x0
   \   0000B9   78..         MOV       R0,#?V4
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   7403         MOV       A,#0x3
   \   0000C0   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C3   AA..         MOV       R2,?V6
   \   0000C5   AB..         MOV       R3,?V7
   \   0000C7   7402         MOV       A,#0x2
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
   1048              srcOff += OSAL_NV_WORD_SIZE;
   \   0000D2   E5..         MOV       A,?V6
   \   0000D4   2404         ADD       A,#0x4
   \   0000D6   F5..         MOV       ?V6,A
   \   0000D8   E4           CLR       A
   \   0000D9   35..         ADDC      A,?V7
   \   0000DB   F5..         MOV       ?V7,A
   1049              writeWord( dstPg, dstOff, tmp );
   \   0000DD                ; Setup parameters for call to function writeWord
   \   0000DD   7401         MOV       A,#0x1
   \   0000DF   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E2   12....       LCALL     ?Subroutine37 & 0xFFFF
   1050              dstOff += OSAL_NV_WORD_SIZE;
   1051            }
   \                     ??CrossCallReturnLabel_134:
   \   0000E5   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000E8   70C9         JNZ       ??xferBuf_3
   1052          
   1053            if ( rem )
   \   0000EA   E5..         MOV       A,?V2
   \   0000EC   605B         JZ        ??xferBuf_4
   1054            {
   1055              uint8 idx = 0;
   \   0000EE   7E00         MOV       R6,#0x0
   1056              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000F0                ; Setup parameters for call to function HalFlashRead
   \   0000F0   75..04       MOV       ?V4,#0x4
   \   0000F3   8E..         MOV       ?V5,R6
   \   0000F5   78..         MOV       R0,#?V4
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FA   7403         MOV       A,#0x3
   \   0000FC   12....       LCALL     ?XSTACK_DISP102_8
   \   0000FF   AA..         MOV       R2,?V0
   \   000101   AB..         MOV       R3,?V1
   \   000103   A9..         MOV       R1,?V3
   \   000105   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000108   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010B   8024         SJMP      ??xferBuf_5
   1057              while ( rem-- )
   1058              {
   1059                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_6:
   \   00010D                ; Setup parameters for call to function HalFlashRead
   \   00010D   75..01       MOV       ?V4,#0x1
   \   000110   78..         MOV       R0,#?V4
   \   000112   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000115   EE           MOV       A,R6
   \   000116   F8           MOV       R0,A
   \   000117   7403         MOV       A,#0x3
   \   000119   12....       LCALL     ?XSTACK_DISP0_8
   \   00011C   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000125   12....       LCALL     ?DEALLOC_XSTACK8
   1060                srcOff++;
   \   000128   05..         INC       ?V6
   \   00012A   E5..         MOV       A,?V6
   \   00012C   7002         JNZ       ??xferBuf_7
   \   00012E   05..         INC       ?V7
   1061                idx++;
   \                     ??xferBuf_7:
   \   000130   0E           INC       R6
   1062              }
   \                     ??xferBuf_5:
   \   000131   AF..         MOV       R7,?V2
   \   000133   74FF         MOV       A,#-0x1
   \   000135   2F           ADD       A,R7
   \   000136   F5..         MOV       ?V2,A
   \   000138   04           INC       A
   \   000139   70D2         JNZ       ??xferBuf_6
   1063              writeWord( dstPg, dstOff, tmp );
   \   00013B                ; Setup parameters for call to function writeWord
   \   00013B   7401         MOV       A,#0x1
   \   00013D   12....       LCALL     ?XSTACK_DISP102_8
   \   000140   AA..         MOV       R2,?V0
   \   000142   AB..         MOV       R3,?V1
   \   000144   A9..         MOV       R1,?V3
   \   000146   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1064            }
   1065          }
   \                     ??xferBuf_4:
   \   000149   7405         MOV       A,#0x5
   \   00014B   80..         SJMP      ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   A9..         MOV       R1,?V3
   \   000006                REQUIRE ??Subroutine67_0
   \   000006                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FD           MOV       R5,A
   \   000008   AA..         MOV       R2,?V6
   \   00000A   AB..         MOV       R3,?V7
   \   00000C   7402         MOV       A,#0x2
   \   00000E   22           RET
   1066          
   1067          /*********************************************************************
   1068           * @fn      writeItem
   1069           *
   1070           * @brief   Writes an item header/data combo to the specified NV page.
   1071           *
   1072           * @param   pg - Valid NV Flash page.
   1073           * @param   id - Valid NV item Id.
   1074           * @param   len  - Byte count of the data to write.
   1075           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1076           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1077           *
   1078           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1079           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1080          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1081          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7408         MOV       A,#0x8
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000012   89..         MOV       ?V0,R1
   \   000014   EC           MOV       A,R4
   \   000015   FE           MOV       R6,A
   \   000016   ED           MOV       A,R5
   \   000017   FF           MOV       R7,A
   1082            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000018   E9           MOV       A,R1
   \   000019   29           ADD       A,R1
   \   00001A   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V2,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V3,A
   1083            uint8 rtrn = FALSE;
   \   000024   75..00       MOV       ?V6,#0x0
   1084            osalNvHdr_t hdr;
   1085          
   1086            hdr.id = id;
   \   000027   7408         MOV       A,#0x8
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   85..82       MOV       DPL,?XSP + 0
   \   000030   85..83       MOV       DPH,?XSP + 1
   \   000033   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   1087            hdr.len = len;
   \                     ??CrossCallReturnLabel_120:
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   EC           MOV       A,R4
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   ED           MOV       A,R5
   \   00003F   F0           MOVX      @DPTR,A
   1088          
   1089            writeWord( pg, offset, (uint8 *)&hdr );
   \   000040                ; Setup parameters for call to function writeWord
   \   000040   AC..         MOV       R4,?XSP + 0
   \   000042   AD..         MOV       R5,?XSP + 1
   \   000044   AA..         MOV       R2,?V2
   \   000046   AB..         MOV       R3,?V3
   \   000048   A9..         MOV       R1,?V0
   \   00004A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1090            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00004D                ; Setup parameters for call to function HalFlashRead
   \   00004D   75..08       MOV       ?V4,#0x8
   \   000050   75..00       MOV       ?V5,#0x0
   \   000053   78..         MOV       R0,#?V4
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP102_8
   \   00005D   AA..         MOV       R2,?V2
   \   00005F   AB..         MOV       R3,?V3
   \   000061   A9..         MOV       R1,?V0
   \   000063   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
   1091          
   1092            if ( (hdr.id == id) && (hdr.len == len) )
   \   000069   85..82       MOV       DPL,?XSP + 0
   \   00006C   85..83       MOV       DPH,?XSP + 1
   \   00006F   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000072   7408         MOV       A,#0x8
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   E0           MOVX      A,@DPTR
   \   000078   68           XRL       A,R0
   \   000079   7003         JNZ       ??writeItem_0
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   69           XRL       A,R1
   \                     ??writeItem_0:
   \   00007E   6003         JZ        $+5
   \   000080   02....       LJMP      ??writeItem_1 & 0xFFFF
   \   000083   7402         MOV       A,#0x2
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   E0           MOVX      A,@DPTR
   \   000089   6E           XRL       A,R6
   \   00008A   7003         JNZ       ??writeItem_2
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   6F           XRL       A,R7
   \                     ??writeItem_2:
   \   00008F   6003         JZ        $+5
   \   000091   02....       LJMP      ??writeItem_1 & 0xFFFF
   1093            {
   1094              if ( flag )
   \   000094   741B         MOV       A,#0x1b
   \   000096   12....       LCALL     ?XSTACK_DISP0_8
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   7003         JNZ       $+5
   \   00009C   02....       LJMP      ??writeItem_3 & 0xFFFF
   \   00009F   7419         MOV       A,#0x19
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F5..         MOV       ?V4,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   F5..         MOV       ?V5,A
   1095              {
   1096                hdr.chk = calcChkB( len, buf );
   \   0000AB   85..82       MOV       DPL,?V4
   \   0000AE   F583         MOV       DPH,A
   \   0000B0   EE           MOV       A,R6
   \   0000B1   F8           MOV       R0,A
   \   0000B2   EF           MOV       A,R7
   \   0000B3   F9           MOV       R1,A
   \   0000B4   EE           MOV       A,R6
   \   0000B5   5403         ANL       A,#0x3
   \   0000B7   F5..         MOV       ?V1,A
   \   0000B9   E582         MOV       A,DPL
   \   0000BB   4583         ORL       A,DPH
   \   0000BD   7015         JNZ       ??writeItem_4
   \   0000BF   EE           MOV       A,R6
   \   0000C0   75F0FF       MOV       B,#-0x1
   \   0000C3   A4           MUL       AB
   \   0000C4   F8           MOV       R0,A
   \   0000C5   AAF0         MOV       R2,B
   \   0000C7   75F0FF       MOV       B,#-0x1
   \   0000CA   EF           MOV       A,R7
   \   0000CB   A4           MUL       AB
   \   0000CC   2A           ADD       A,R2
   \   0000CD   F9           MOV       R1,A
   \   0000CE   E8           MOV       A,R0
   \   0000CF   FA           MOV       R2,A
   \   0000D0   E9           MOV       A,R1
   \   0000D1   FB           MOV       R3,A
   \   0000D2   801F         SJMP      ??writeItem_5
   \                     ??writeItem_4:
   \   0000D4   7A00         MOV       R2,#0x0
   \   0000D6   7B00         MOV       R3,#0x0
   \   0000D8   8009         SJMP      ??writeItem_6
   \                     ??writeItem_7:
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   FC           MOV       R4,A
   \   0000DC   EA           MOV       A,R2
   \   0000DD   2C           ADD       A,R4
   \   0000DE   FA           MOV       R2,A
   \   0000DF   E4           CLR       A
   \   0000E0   3B           ADDC      A,R3
   \   0000E1   FB           MOV       R3,A
   \   0000E2   A3           INC       DPTR
   \                     ??writeItem_6:
   \   0000E3   E8           MOV       A,R0
   \   0000E4   FC           MOV       R4,A
   \   0000E5   E9           MOV       A,R1
   \   0000E6   FD           MOV       R5,A
   \   0000E7   EC           MOV       A,R4
   \   0000E8   24FF         ADD       A,#-0x1
   \   0000EA   18           DEC       R0
   \   0000EB   ED           MOV       A,R5
   \   0000EC   34FF         ADDC      A,#-0x1
   \   0000EE   F9           MOV       R1,A
   \   0000EF   EC           MOV       A,R4
   \   0000F0   4D           ORL       A,R5
   \   0000F1   70E7         JNZ       ??writeItem_7
   \                     ??writeItem_5:
   \   0000F3   E5..         MOV       A,?V1
   \   0000F5   601E         JZ        ??writeItem_8
   \   0000F7   F8           MOV       R0,A
   \   0000F8   7404         MOV       A,#0x4
   \   0000FA   C3           CLR       C
   \   0000FB   98           SUBB      A,R0
   \   0000FC   F8           MOV       R0,A
   \   0000FD   95E0         SUBB      A,0xE0 /* A   */
   \   0000FF   F9           MOV       R1,A
   \   000100   E8           MOV       A,R0
   \   000101   75F0FF       MOV       B,#-0x1
   \   000104   A4           MUL       AB
   \   000105   F8           MOV       R0,A
   \   000106   ACF0         MOV       R4,B
   \   000108   75F0FF       MOV       B,#-0x1
   \   00010B   E9           MOV       A,R1
   \   00010C   A4           MUL       AB
   \   00010D   2C           ADD       A,R4
   \   00010E   F9           MOV       R1,A
   \   00010F   EA           MOV       A,R2
   \   000110   28           ADD       A,R0
   \   000111   FA           MOV       R2,A
   \   000112   EB           MOV       A,R3
   \   000113   39           ADDC      A,R1
   \   000114   FB           MOV       R3,A
   1097          
   1098                offset += OSAL_NV_HDR_SIZE;
   1099                if ( buf != NULL )
   1100                {
   1101                  writeBuf( pg, offset, len, buf );
   1102                }
   1103          
   1104                if ( hdr.chk == calcChkF( pg, offset, len ) )
   1105                {
   1106                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   1107                  {
   1108                    hotItemUpdate(pg, offset, hdr.id);
   1109                    rtrn = TRUE;
   1110                  }
   1111                }
   1112              }
   1113              else
   1114              {
   1115                rtrn = TRUE;
   1116              }
   1117          
   1118              len = OSAL_NV_ITEM_SIZE( hdr.len );
   1119            }
   \                     ??writeItem_8:
   \   000115   7404         MOV       A,#0x4
   \   000117   12....       LCALL     ?XSTACK_DISP0_8
   \   00011A   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00011D   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000120   E5..         MOV       A,?V4
   \   000122   45..         ORL       A,?V5
   \   000124   6017         JZ        ??writeItem_9
   \   000126                ; Setup parameters for call to function writeBuf
   \   000126   78..         MOV       R0,#?V4
   \   000128   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012B   EE           MOV       A,R6
   \   00012C   FC           MOV       R4,A
   \   00012D   EF           MOV       A,R7
   \   00012E   FD           MOV       R5,A
   \   00012F   AA..         MOV       R2,?V2
   \   000131   AB..         MOV       R3,?V3
   \   000133   A9..         MOV       R1,?V0
   \   000135   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   000138   7402         MOV       A,#0x2
   \   00013A   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??writeItem_9:
   \   00013D                ; Setup parameters for call to function calcChkF
   \   00013D   EE           MOV       A,R6
   \   00013E   FC           MOV       R4,A
   \   00013F   EF           MOV       A,R7
   \   000140   FD           MOV       R5,A
   \   000141   AA..         MOV       R2,?V2
   \   000143   AB..         MOV       R3,?V3
   \   000145   A9..         MOV       R1,?V0
   \   000147   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00014A   7404         MOV       A,#0x4
   \   00014C   12....       LCALL     ?XSTACK_DISP0_8
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   68           XRL       A,R0
   \   000151   7003         JNZ       ??writeItem_10
   \   000153   A3           INC       DPTR
   \   000154   E0           MOVX      A,@DPTR
   \   000155   69           XRL       A,R1
   \                     ??writeItem_10:
   \   000156   7028         JNZ       ??writeItem_11
   \   000158                ; Setup parameters for call to function setChk
   \   000158   7404         MOV       A,#0x4
   \   00015A   12....       LCALL     ?XSTACK_DISP0_8
   \   00015D   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000160   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000163   7404         MOV       A,#0x4
   \   000165   12....       LCALL     ?XSTACK_DISP0_8
   \   000168   E0           MOVX      A,@DPTR
   \   000169   68           XRL       A,R0
   \   00016A   7003         JNZ       ??writeItem_12
   \   00016C   A3           INC       DPTR
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   69           XRL       A,R1
   \                     ??writeItem_12:
   \   00016F   700F         JNZ       ??writeItem_11
   \   000171                ; Setup parameters for call to function hotItemUpdate
   \   000171   85..82       MOV       DPL,?XSP + 0
   \   000174   85..83       MOV       DPH,?XSP + 1
   \   000177   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00017A   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \                     ??writeItem_3:
   \   00017D   75..01       MOV       ?V6,#0x1
   \                     ??writeItem_11:
   \   000180   7402         MOV       A,#0x2
   \   000182   12....       LCALL     ?XSTACK_DISP0_8
   \   000185   C3           CLR       C
   \   000186   E0           MOVX      A,@DPTR
   \   000187   94F4         SUBB      A,#-0xc
   \   000189   A3           INC       DPTR
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   94FF         SUBB      A,#-0x1
   \   00018D   4006         JC        ??writeItem_13
   \   00018F   7EFC         MOV       R6,#-0x4
   \   000191   7FFF         MOV       R7,#-0x1
   \   000193   8043         SJMP      ??CrossCallReturnLabel_132
   \                     ??writeItem_13:
   \   000195   7402         MOV       A,#0x2
   \   000197   12....       LCALL     ?XSTACK_DISP0_8
   \   00019A   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00019D   8039         SJMP      ??CrossCallReturnLabel_132
   1120            else
   1121            {
   1122              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   00019F   7402         MOV       A,#0x2
   \   0001A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A4   C3           CLR       C
   \   0001A5   E0           MOVX      A,@DPTR
   \   0001A6   94F4         SUBB      A,#-0xc
   \   0001A8   A3           INC       DPTR
   \   0001A9   E0           MOVX      A,@DPTR
   \   0001AA   94FF         SUBB      A,#-0x1
   \   0001AC   4006         JC        ??writeItem_14
   \   0001AE   7EFC         MOV       R6,#-0x4
   \   0001B0   7FFF         MOV       R7,#-0x1
   \   0001B2   8008         SJMP      ??CrossCallReturnLabel_6
   \                     ??writeItem_14:
   \   0001B4   7402         MOV       A,#0x2
   \   0001B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B9   12....       LCALL     ?Subroutine11 & 0xFFFF
   1123          
   1124              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??CrossCallReturnLabel_6:
   \   0001BC   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   0001BF   F8           MOV       R0,A
   \   0001C0   7408         MOV       A,#0x8
   \   0001C2   99           SUBB      A,R1
   \   0001C3   F9           MOV       R1,A
   \   0001C4   C3           CLR       C
   \   0001C5   E8           MOV       A,R0
   \   0001C6   9E           SUBB      A,R6
   \   0001C7   E9           MOV       A,R1
   \   0001C8   9F           SUBB      A,R7
   \   0001C9   5008         JNC       ??writeItem_15
   1125              {
   1126                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   0001CB   12....       LCALL     ?Subroutine18 & 0xFFFF
   1127              }
   \                     ??CrossCallReturnLabel_160:
   \   0001CE   FE           MOV       R6,A
   \   0001CF   7408         MOV       A,#0x8
   \   0001D1   99           SUBB      A,R1
   \   0001D2   FF           MOV       R7,A
   1128          
   1129              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_15:
   \   0001D3   A8..         MOV       R0,?V0
   \   0001D5   12....       LCALL     ?Subroutine23 & 0xFFFF
   1130            }
   1131            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??CrossCallReturnLabel_132:
   \   0001D8   A8..         MOV       R0,?V0
   \   0001DA   E8           MOV       A,R0
   \   0001DB   28           ADD       A,R0
   \   0001DC   F8           MOV       R0,A
   \   0001DD   E4           CLR       A
   \   0001DE   33           RLC       A
   \   0001DF   F9           MOV       R1,A
   \   0001E0   74..         MOV       A,#(pgOff + 14) & 0xff
   \   0001E2   28           ADD       A,R0
   \   0001E3   F582         MOV       DPL,A
   \   0001E5   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   0001E7   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   1132          
   1133            return rtrn;
   \                     ??CrossCallReturnLabel_130:
   \   0001EA   A9..         MOV       R1,?V6
   \   0001EC   740A         MOV       A,#0xa
   \   0001EE   02....       LJMP      ?Subroutine3 & 0xFFFF
   1134          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   AA..         MOV       R2,?V2
   \   000005   AB..         MOV       R3,?V3
   \   000007   A9..         MOV       R1,?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A8..         MOV       R0,?V0
   \   000002   E8           MOV       A,R0
   \   000003   28           ADD       A,R0
   \   000004                REQUIRE ??Subroutine72_0
   \   000004                ; // Fall through to label ??Subroutine72_0
   1135          
   1136          /*********************************************************************
   1137           * @fn      hotItem
   1138           *
   1139           * @brief   Look for the parameter 'id' in the hot items array.
   1140           *
   1141           * @param   id - A valid NV item Id.
   1142           *
   1143           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1146          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1147            uint8 hotIdx;
   1148          
   1149            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV       R1,#0x0
   1150            {
   1151              if (hotIds[hotIdx] == id)
   \                     ??hotItem_0:
   \   000006   E9           MOV       A,R1
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   FC           MOV       R4,A
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   FD           MOV       R5,A
   \   00000D   74..         MOV       A,#hotIds & 0xff
   \   00000F   2C           ADD       A,R4
   \   000010   F582         MOV       DPL,A
   \   000012   74..         MOV       A,#(hotIds >> 8) & 0xff
   \   000014   3D           ADDC      A,R5
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6A           XRL       A,R2
   \   000019   7003         JNZ       ??hotItem_1
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6B           XRL       A,R3
   \                     ??hotItem_1:
   \   00001E   6007         JZ        ??hotItem_2
   1152              {
   1153                break;
   1154              }
   1155            }
   \   000020   09           INC       R1
   \   000021   E9           MOV       A,R1
   \   000022   C3           CLR       C
   \   000023   9403         SUBB      A,#0x3
   \   000025   40DF         JC        ??hotItem_0
   1156          
   1157            return hotIdx;
   \                     ??hotItem_2:
   \   000027                REQUIRE ?Subroutine5
   \   000027                ; // Fall through to label ?Subroutine5
   1158          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
   1159          
   1160          /*********************************************************************
   1161           * @fn      hotItemUpdate
   1162           *
   1163           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1164           *
   1165           * @param   pg - The new NV page corresponding to the hot item.
   1166           * @param   off - The new NV page offset corresponding to the hot item.
   1167           * @param   id - A valid NV item Id.
   1168           *
   1169           * @return  none
   1170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1171          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1172          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   EC           MOV       A,R4
   \   00000C   FA           MOV       R2,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FB           MOV       R3,A
   1173            uint8 hotIdx = hotItem(id);
   \   00000F                ; Setup parameters for call to function hotItem
   \   00000F   12....       LCALL     ?Subroutine47 & 0xFFFF
   1174          
   1175            if (hotIdx < OSAL_NV_MAX_HOT)
   \                     ??CrossCallReturnLabel_90:
   \   000012   500D         JNC       ??hotItemUpdate_0
   1176            {
   1177              {
   1178                hotPg[hotIdx] = pg;
   \   000014   12....       LCALL     ?Subroutine46 & 0xFFFF
   1179                hotOff[hotIdx] = off;
   1180              }
   1181            }
   \                     ??CrossCallReturnLabel_88:
   \   000017   E5..         MOV       A,?V0
   \   000019   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00001C   EE           MOV       A,R6
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   EF           MOV       A,R7
   \   000020   F0           MOVX      @DPTR,A
   1182          }
   \                     ??hotItemUpdate_0:
   \   000021   02....       LJMP      ??Subroutine62_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000003   E9           MOV       A,R1
   \   000004   F8           MOV       R0,A
   \   000005   C3           CLR       C
   \   000006   9403         SUBB      A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   74..         MOV       A,#hotPg & 0xff
   \   000002   29           ADD       A,R1
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(hotPg >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E9           MOV       A,R1
   \   000001   29           ADD       A,R1
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   74..         MOV       A,#hotOff & 0xff
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   74..         MOV       A,#(hotOff >> 8) & 0xff
   \   00000D   39           ADDC      A,R1
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET
   1183          
   1184          /*********************************************************************
   1185           * @fn      osal_nv_init
   1186           *
   1187           * @brief   Initialize NV service.
   1188           *
   1189           * @param   p - Not used.
   1190           *
   1191           * @return  none
   1192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1193          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1194          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1195            (void)p;  // Suppress Lint warning.
   1196            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL     `??initNV::?relay`; Banked call to: initNV
   1197          }
   \   000007   80..         SJMP      ?Subroutine5
   1198          
   1199          /*********************************************************************
   1200           * @fn      osal_nv_item_init
   1201           *
   1202           * @brief   If the NV item does not already exist, it is created and
   1203           *          initialized with the data passed to the function, if any.
   1204           *          This function must be called before calling osal_nv_read() or
   1205           *          osal_nv_write().
   1206           *
   1207           * @param   id  - Valid NV item Id.
   1208           * @param   len - Item length.
   1209           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1210           *
   1211           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1212           *          SUCCESS        - Id already existed, no action taken.
   1213           *          NV_OPER_FAILED - Failure to find or create Id.
   1214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1215          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1216          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1217            uint16 offset;
   1218          
   1219            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000D                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000D   794E         MOV       R1,#0x4e
   \   00000F   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000012   E9           MOV       A,R1
   \   000013   6036         JZ        ??osal_nv_item_init_0
   1220            {
   1221              return NV_OPER_FAILED;
   1222            }
   1223            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \   000015                ; Setup parameters for call to function findItem
   \   000015   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000018   6010         JZ        ??osal_nv_item_init_1
   1224            {
   1225              // Re-populate the NV hot item data if the corresponding items are already established.
   1226              hotItemUpdate(findPg, offset, id);
   \   00001A                ; Setup parameters for call to function hotItemUpdate
   \   00001A   EE           MOV       A,R6
   \   00001B   FC           MOV       R4,A
   \   00001C   EF           MOV       A,R7
   \   00001D   FD           MOV       R5,A
   \   00001E   90....       MOV       DPTR,#findPg
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1227          
   1228              return SUCCESS;
   \   000026   7900         MOV       R1,#0x0
   \   000028   8023         SJMP      ??osal_nv_item_init_2
   1229            }
   1230            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_1:
   \   00002A                ; Setup parameters for call to function initItem
   \   00002A   740C         MOV       A,#0xc
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000032   AC..         MOV       R4,?V0
   \   000034   AD..         MOV       R5,?V1
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   7901         MOV       R1,#0x1
   \   00003C   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   00003F   7402         MOV       A,#0x2
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044   E9           MOV       A,R1
   \   000045   6004         JZ        ??osal_nv_item_init_0
   1231            {
   1232              return NV_ITEM_UNINIT;
   \   000047   7909         MOV       R1,#0x9
   \   000049   8002         SJMP      ??osal_nv_item_init_2
   1233            }
   1234            else
   1235            {
   1236              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_0:
   \   00004B   790A         MOV       R1,#0xa
   1237            }
   \                     ??osal_nv_item_init_2:
   \   00004D   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   1238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003                REQUIRE ??Subroutine73_0
   \   000003                ; // Fall through to label ??Subroutine73_0
   1239          
   1240          /*********************************************************************
   1241           * @fn      osal_nv_item_len
   1242           *
   1243           * @brief   Get the data length of the item stored in NV memory.
   1244           *
   1245           * @param   id  - Valid NV item Id.
   1246           *
   1247           * @return  Item length, if found; zero otherwise.
   1248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1249          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1250          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1251            osalNvHdr_t hdr;
   1252            uint16 offset;
   1253            uint8 hotIdx;
   1254          
   1255            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000011   5040         JNC       ??osal_nv_item_len_0
   1256            {
   1257              findPg = hotPg[hotIdx];
   \   000013   12....       LCALL     ?Subroutine46 & 0xFFFF
   1258              offset = hotOff[hotIdx];
   1259            }
   \                     ??CrossCallReturnLabel_89:
   \   000016   E0           MOVX      A,@DPTR
   \   000017   90....       MOV       DPTR,#findPg
   \   00001A   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00001D   12....       LCALL     ?Subroutine16 & 0xFFFF
   1260            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   1261            {
   1262              return 0;
   1263            }
   1264          
   1265            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_27:
   \   000020                ; Setup parameters for call to function HalFlashRead
   \   000020   75..08       MOV       ?V0,#0x8
   \   000023   75..00       MOV       ?V1,#0x0
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   EA           MOV       A,R2
   \   000031   24F8         ADD       A,#-0x8
   \   000033   FA           MOV       R2,A
   \   000034   EB           MOV       A,R3
   \   000035   34FF         ADDC      A,#-0x1
   \   000037   FB           MOV       R3,A
   \   000038   90....       MOV       DPTR,#findPg
   \   00003B   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   1266            return hdr.len;
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000049   7408         MOV       A,#0x8
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004E   7F02         MOV       R7,#0x2
   \   000050   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??osal_nv_item_len_0:
   \   000053                ; Setup parameters for call to function findItem
   \   000053   EE           MOV       A,R6
   \   000054   FA           MOV       R2,A
   \   000055   EF           MOV       A,R7
   \   000056   FB           MOV       R3,A
   \   000057   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00005A   8B..         MOV       ?V1,R3
   \   00005C   A9..         MOV       R1,?V1
   \   00005E   EA           MOV       A,R2
   \   00005F   49           ORL       A,R1
   \   000060   70BE         JNZ       ??CrossCallReturnLabel_27
   \   000062   7A00         MOV       R2,#0x0
   \   000064   7B00         MOV       R3,#0x0
   \   000066   80E1         SJMP      ??CrossCallReturnLabel_28
   1267          }
   1268          
   1269          /*********************************************************************
   1270           * @fn      osal_nv_write
   1271           *
   1272           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1273           *          an element of an item by indexing into the item with an offset.
   1274           *
   1275           * @param   id  - Valid NV item Id.
   1276           * @param   ndx - Index offset into item
   1277           * @param   len - Length of data to write.
   1278           * @param  *buf - Data to write.
   1279           *
   1280           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1281           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   740F         MOV       A,#0xf
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000012   8C..         MOV       ?V6,R4
   \   000014   8D..         MOV       ?V7,R5
   1285            uint8 rtrn = SUCCESS;
   \   000016   7402         MOV       A,#0x2
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   1286          
   1287            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00001D                ; Setup parameters for call to function HalAdcCheckVdd
   \   00001D   794E         MOV       R1,#0x4e
   \   00001F   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000022   E9           MOV       A,R1
   \   000023   7003         JNZ       $+5
   \   000025   02....       LJMP      ??osal_nv_write_0 & 0xFFFF
   1288            {
   1289              return NV_OPER_FAILED;
   1290            }
   1291            else if ( len != 0 )
   \   000028   7421         MOV       A,#0x21
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??CrossCallReturnLabel_115 & 0xFFFF
   1292            {
   1293              osalNvHdr_t hdr;
   1294              uint16 origOff, srcOff;
   1295              uint16 cnt, chk;
   1296              uint8 *ptr, srcPg;
   1297          
   1298              origOff = srcOff = findItem( id );
   \   000035                ; Setup parameters for call to function findItem
   \   000035   740F         MOV       A,#0xf
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00003D   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   12....       LCALL     ?Subroutine9 & 0xFFFF
   1299              srcPg = findPg;
   \                     ??CrossCallReturnLabel_126:
   \   000048   90....       MOV       DPTR,#findPg
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   C0E0         PUSH      A
   \   00004E   7401         MOV       A,#0x1
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   D0E0         POP       A
   \   000055   F0           MOVX      @DPTR,A
   1300              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   000056   7403         MOV       A,#0x3
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00005E   7005         JNZ       ??osal_nv_write_1
   1301              {
   1302                return NV_ITEM_UNINIT;
   \   000060   7909         MOV       R1,#0x9
   \   000062   02....       LJMP      ??osal_nv_write_2 & 0xFFFF
   1303              }
   1304          
   1305              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_1:
   \   000065                ; Setup parameters for call to function HalFlashRead
   \   000065   75..08       MOV       ?V0,#0x8
   \   000068   75..00       MOV       ?V1,#0x0
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7409         MOV       A,#0x9
   \   000072   12....       LCALL     ?XSTACK_DISP102_8
   \   000075   7405         MOV       A,#0x5
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   24F8         ADD       A,#-0x8
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   34FF         ADDC      A,#-0x1
   \   000082   FB           MOV       R3,A
   \   000083   7403         MOV       A,#0x3
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   1306              if ( hdr.len < (ndx + len) )
   \   00008E   7409         MOV       A,#0x9
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   C082         PUSH      DPL
   \   000095   C083         PUSH      DPH
   \   000097   7421         MOV       A,#0x21
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00009F   D083         POP       DPH
   \   0000A1   D082         POP       DPL
   \   0000A3   C3           CLR       C
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   98           SUBB      A,R0
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   99           SUBB      A,R1
   \   0000A9   5005         JNC       ??osal_nv_write_3
   1307              {
   1308                return NV_OPER_FAILED;
   \                     ??osal_nv_write_0:
   \   0000AB   790A         MOV       R1,#0xa
   \   0000AD   02....       LJMP      ??osal_nv_write_2 & 0xFFFF
   1309              }
   1310          
   1311              srcOff += ndx;
   \                     ??osal_nv_write_3:
   \   0000B0   7403         MOV       A,#0x3
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   25..         ADD       A,?V6
   \   0000B8   FE           MOV       R6,A
   \   0000B9   A3           INC       DPTR
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   35..         ADDC      A,?V7
   \   0000BD   FF           MOV       R7,A
   1312              ptr = buf;
   \   0000BE   7423         MOV       A,#0x23
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000C6   7405         MOV       A,#0x5
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   E8           MOV       A,R0
   \   0000CC   F0           MOVX      @DPTR,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   E9           MOV       A,R1
   \   0000CF   F0           MOVX      @DPTR,A
   1313              cnt = len;
   \   0000D0   7421         MOV       A,#0x21
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   12....       LCALL     ?Subroutine22 & 0xFFFF
   1314              chk = 0;
   \                     ??CrossCallReturnLabel_48:
   \   0000D8   75..00       MOV       ?V2,#0x0
   \   0000DB   8078         SJMP      ??osal_nv_write_4
   1315              while ( cnt-- )
   1316              {
   1317                uint8 tmp;
   1318                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \                     ??osal_nv_write_5:
   \   0000DD                ; Setup parameters for call to function HalFlashRead
   \   0000DD   75..01       MOV       ?V4,#0x1
   \   0000E0   75..00       MOV       ?V5,#0x0
   \   0000E3   78..         MOV       R0,#?V4
   \   0000E5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E8   7402         MOV       A,#0x2
   \   0000EA   12....       LCALL     ?XSTACK_DISP102_8
   \   0000ED   EE           MOV       A,R6
   \   0000EE   FA           MOV       R2,A
   \   0000EF   EF           MOV       A,R7
   \   0000F0   FB           MOV       R3,A
   \   0000F1   7403         MOV       A,#0x3
   \   0000F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F6   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000F9   12....       LCALL     ?DEALLOC_XSTACK8
   1319                if ( tmp != *ptr )
   \   0000FC   85..82       MOV       DPL,?XSP + 0
   \   0000FF   85..83       MOV       DPH,?XSP + 1
   \   000102   E0           MOVX      A,@DPTR
   \   000103   F9           MOV       R1,A
   \   000104   7405         MOV       A,#0x5
   \   000106   12....       LCALL     ?XSTACK_DISP0_8
   \   000109   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00010C   69           XRL       A,R1
   \   00010D   602F         JZ        ??osal_nv_write_6
   1320                {
   1321                  chk = 1;  // Mark that at least one byte is different.
   \   00010F   75..01       MOV       ?V2,#0x1
   1322                  // Calculate expected checksum after transferring old data and writing new data.
   1323                  hdr.chk -= tmp;
   \   000112   85..82       MOV       DPL,?XSP + 0
   \   000115   85..83       MOV       DPH,?XSP + 1
   \   000118   E0           MOVX      A,@DPTR
   \   000119   F8           MOV       R0,A
   \   00011A   740B         MOV       A,#0xb
   \   00011C   12....       LCALL     ?XSTACK_DISP0_8
   \   00011F   C3           CLR       C
   \   000120   E0           MOVX      A,@DPTR
   \   000121   98           SUBB      A,R0
   \   000122   F0           MOVX      @DPTR,A
   \   000123   A3           INC       DPTR
   \   000124   E0           MOVX      A,@DPTR
   \   000125   9400         SUBB      A,#0x0
   \   000127   F0           MOVX      @DPTR,A
   1324                  hdr.chk += *ptr;
   \   000128   7405         MOV       A,#0x5
   \   00012A   12....       LCALL     ?XSTACK_DISP0_8
   \   00012D   12....       LCALL     ?Subroutine15 & 0xFFFF
   1325                }
   \                     ??CrossCallReturnLabel_23:
   \   000130   F8           MOV       R0,A
   \   000131   740B         MOV       A,#0xb
   \   000133   12....       LCALL     ?XSTACK_DISP0_8
   \   000136   E0           MOVX      A,@DPTR
   \   000137   28           ADD       A,R0
   \   000138   F0           MOVX      @DPTR,A
   \   000139   A3           INC       DPTR
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   3400         ADDC      A,#0x0
   \   00013D   F0           MOVX      @DPTR,A
   1326                srcOff++;
   \                     ??osal_nv_write_6:
   \   00013E   0E           INC       R6
   \   00013F   EE           MOV       A,R6
   \   000140   7001         JNZ       ??osal_nv_write_7
   \   000142   0F           INC       R7
   1327                ptr++;
   \                     ??osal_nv_write_7:
   \   000143   7405         MOV       A,#0x5
   \   000145   12....       LCALL     ?XSTACK_DISP0_8
   \   000148   12....       LCALL     ?Subroutine51 & 0xFFFF
   1328              }
   \                     ??CrossCallReturnLabel_99:
   \   00014B   7405         MOV       A,#0x5
   \   00014D   12....       LCALL     ?XSTACK_DISP0_8
   \   000150   E8           MOV       A,R0
   \   000151   F0           MOVX      @DPTR,A
   \   000152   A3           INC       DPTR
   \   000153   E9           MOV       A,R1
   \   000154   F0           MOVX      @DPTR,A
   \                     ??osal_nv_write_4:
   \   000155   A8..         MOV       R0,?V0
   \   000157   A9..         MOV       R1,?V1
   \   000159   E8           MOV       A,R0
   \   00015A   24FF         ADD       A,#-0x1
   \   00015C   F5..         MOV       ?V0,A
   \   00015E   E9           MOV       A,R1
   \   00015F   34FF         ADDC      A,#-0x1
   \   000161   F5..         MOV       ?V1,A
   \   000163   E8           MOV       A,R0
   \   000164   49           ORL       A,R1
   \   000165   6003         JZ        $+5
   \   000167   02....       LJMP      ??osal_nv_write_5 & 0xFFFF
   1329          
   1330              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \   00016A   E5..         MOV       A,?V2
   \   00016C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00016E   4003         JC        $+5
   \   000170   02....       LJMP      ??CrossCallReturnLabel_115 & 0xFFFF
   1331              {
   1332                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   000173   85..82       MOV       DPL,?XSP + 0
   \   000176   85..83       MOV       DPH,?XSP + 1
   \   000179   E4           CLR       A
   \   00017A   F0           MOVX      @DPTR,A
   1333                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   00017B                ; Setup parameters for call to function initItem
   \   00017B   A8..         MOV       R0,?XSP + 0
   \   00017D   A9..         MOV       R1,?XSP + 1
   \   00017F   88..         MOV       ?V0,R0
   \   000181   89..         MOV       ?V1,R1
   \   000183   78..         MOV       R0,#?V0
   \   000185   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000188   740B         MOV       A,#0xb
   \   00018A   12....       LCALL     ?XSTACK_DISP0_8
   \   00018D   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000190   7411         MOV       A,#0x11
   \   000192   12....       LCALL     ?XSTACK_DISP0_8
   \   000195   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000198   7900         MOV       R1,#0x0
   \   00019A   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   00019D   7402         MOV       A,#0x2
   \   00019F   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A2   E9           MOV       A,R1
   \   0001A3   F5..         MOV       ?V2,A
   1334          
   1335                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   0001A5   7003         JNZ       $+5
   \   0001A7   02....       LJMP      ??osal_nv_write_8 & 0xFFFF
   1336                {
   1337                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   0001AA   7409         MOV       A,#0x9
   \   0001AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AF   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0001B2   4008         JC        ??osal_nv_write_9
   \   0001B4   75..FC       MOV       ?V0,#-0x4
   \   0001B7   75..FF       MOV       ?V1,#-0x1
   \   0001BA   800D         SJMP      ??osal_nv_write_10
   \                     ??osal_nv_write_9:
   \   0001BC   7409         MOV       A,#0x9
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0001C4   F5..         MOV       ?V0,A
   \   0001C6   E9           MOV       A,R1
   \   0001C7   F5..         MOV       ?V1,A
   1338                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_10:
   \   0001C9   12....       LCALL     ?Subroutine29 & 0xFFFF
   1339                  srcOff = origOff;
   1340          
   1341                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1342                   * OSAL_Nv interruptions caused by resets.
   1343                   */
   1344                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \                     ??CrossCallReturnLabel_55:
   \   0001CC   740D         MOV       A,#0xd
   \   0001CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D1   E0           MOVX      A,@DPTR
   \   0001D2   F4           CPL       A
   \   0001D3   7003         JNZ       ??osal_nv_write_11
   \   0001D5   A3           INC       DPTR
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   F4           CPL       A
   \                     ??osal_nv_write_11:
   \   0001D8   7012         JNZ       ??CrossCallReturnLabel_114
   1345                  {
   1346                    setItem( srcPg, srcOff, eNvXfer );
   \   0001DA                ; Setup parameters for call to function setItem
   \   0001DA   7C00         MOV       R4,#0x0
   \   0001DC   7403         MOV       A,#0x3
   \   0001DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E1   12....       LCALL     ?Subroutine16 & 0xFFFF
   1347                  }
   \                     ??CrossCallReturnLabel_31:
   \   0001E4   7401         MOV       A,#0x1
   \   0001E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E9   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   1348          
   1349                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??CrossCallReturnLabel_114:
   \   0001EC                ; Setup parameters for call to function xferBuf
   \   0001EC   78..         MOV       R0,#?V6
   \   0001EE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F1   8E..         MOV       ?V4,R6
   \   0001F3   8F..         MOV       ?V5,R7
   \   0001F5   78..         MOV       R0,#?V4
   \   0001F7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001FA   AC..         MOV       R4,?V2
   \   0001FC   7407         MOV       A,#0x7
   \   0001FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000201   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000204   7405         MOV       A,#0x5
   \   000206   12....       LCALL     ?XSTACK_DISP0_8
   \   000209   E0           MOVX      A,@DPTR
   \   00020A   F9           MOV       R1,A
   \   00020B   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   00020E   7404         MOV       A,#0x4
   \   000210   12....       LCALL     ?DEALLOC_XSTACK8
   1350                  srcOff += ndx;
   1351                  dstOff += ndx;
   \   000213   EE           MOV       A,R6
   \   000214   25..         ADD       A,?V6
   \   000216   FE           MOV       R6,A
   \   000217   EF           MOV       A,R7
   \   000218   35..         ADDC      A,?V7
   \   00021A   FF           MOV       R7,A
   1352          
   1353                  writeBuf( dstPg, dstOff, len, buf );
   \   00021B                ; Setup parameters for call to function writeBuf
   \   00021B   7423         MOV       A,#0x23
   \   00021D   12....       LCALL     ?XSTACK_DISP0_8
   \   000220   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000223   7423         MOV       A,#0x23
   \   000225   12....       LCALL     ?XSTACK_DISP0_8
   \   000228   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00022B   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   00022E   7402         MOV       A,#0x2
   \   000230   12....       LCALL     ?DEALLOC_XSTACK8
   1354                  srcOff += len;
   1355                  dstOff += len;
   1356          
   1357                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   000233                ; Setup parameters for call to function xferBuf
   \   000233   7409         MOV       A,#0x9
   \   000235   12....       LCALL     ?XSTACK_DISP0_8
   \   000238   E0           MOVX      A,@DPTR
   \   000239   C3           CLR       C
   \   00023A   95..         SUBB      A,?V6
   \   00023C   FA           MOV       R2,A
   \   00023D   A3           INC       DPTR
   \   00023E   E0           MOVX      A,@DPTR
   \   00023F   95..         SUBB      A,?V7
   \   000241   FB           MOV       R3,A
   \   000242   7421         MOV       A,#0x21
   \   000244   12....       LCALL     ?XSTACK_DISP0_8
   \   000247   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00024A   EA           MOV       A,R2
   \   00024B   C3           CLR       C
   \   00024C   98           SUBB      A,R0
   \   00024D   F5..         MOV       ?V4,A
   \   00024F   EB           MOV       A,R3
   \   000250   99           SUBB      A,R1
   \   000251   F5..         MOV       ?V5,A
   \   000253   78..         MOV       R0,#?V4
   \   000255   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000258   7423         MOV       A,#0x23
   \   00025A   12....       LCALL     ?XSTACK_DISP0_8
   \   00025D   E0           MOVX      A,@DPTR
   \   00025E   2E           ADD       A,R6
   \   00025F   F5..         MOV       ?V4,A
   \   000261   A3           INC       DPTR
   \   000262   E0           MOVX      A,@DPTR
   \   000263   3F           ADDC      A,R7
   \   000264   F5..         MOV       ?V5,A
   \   000266   78..         MOV       R0,#?V4
   \   000268   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00026B   AC..         MOV       R4,?V2
   \   00026D   7407         MOV       A,#0x7
   \   00026F   12....       LCALL     ?XSTACK_DISP0_8
   \   000272   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000275   7425         MOV       A,#0x25
   \   000277   12....       LCALL     ?XSTACK_DISP0_8
   \   00027A   E0           MOVX      A,@DPTR
   \   00027B   28           ADD       A,R0
   \   00027C   FA           MOV       R2,A
   \   00027D   A3           INC       DPTR
   \   00027E   E0           MOVX      A,@DPTR
   \   00027F   39           ADDC      A,R1
   \   000280   FB           MOV       R3,A
   \   000281   7405         MOV       A,#0x5
   \   000283   12....       LCALL     ?XSTACK_DISP0_8
   \   000286   E0           MOVX      A,@DPTR
   \   000287   F9           MOV       R1,A
   \   000288   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   00028B   7404         MOV       A,#0x4
   \   00028D   12....       LCALL     ?DEALLOC_XSTACK8
   1358          
   1359                  // Calculate and write the new checksum.
   1360                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   000290   12....       LCALL     ?Subroutine29 & 0xFFFF
   1361          
   1362                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \                     ??CrossCallReturnLabel_56:
   \   000293                ; Setup parameters for call to function calcChkF
   \   000293   7409         MOV       A,#0x9
   \   000295   12....       LCALL     ?XSTACK_DISP0_8
   \   000298   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00029B   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   00029E   8A..         MOV       ?V0,R2
   \   0002A0   8B..         MOV       ?V1,R3
   \   0002A2   A8..         MOV       R0,?V0
   \   0002A4   A9..         MOV       R1,?V1
   \   0002A6   740B         MOV       A,#0xb
   \   0002A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AB   E0           MOVX      A,@DPTR
   \   0002AC   68           XRL       A,R0
   \   0002AD   7003         JNZ       ??osal_nv_write_12
   \   0002AF   A3           INC       DPTR
   \   0002B0   E0           MOVX      A,@DPTR
   \   0002B1   69           XRL       A,R1
   \                     ??osal_nv_write_12:
   \   0002B2   702E         JNZ       ??osal_nv_write_8
   1363                  {
   1364                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   0002B4                ; Setup parameters for call to function setChk
   \   0002B4   740B         MOV       A,#0xb
   \   0002B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B9   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0002BC   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   0002BF   8A..         MOV       ?V0,R2
   \   0002C1   8B..         MOV       ?V1,R3
   \   0002C3   A8..         MOV       R0,?V0
   \   0002C5   A9..         MOV       R1,?V1
   \   0002C7   740B         MOV       A,#0xb
   \   0002C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002CC   E0           MOVX      A,@DPTR
   \   0002CD   68           XRL       A,R0
   \   0002CE   7003         JNZ       ??osal_nv_write_13
   \   0002D0   A3           INC       DPTR
   \   0002D1   E0           MOVX      A,@DPTR
   \   0002D2   69           XRL       A,R1
   \                     ??osal_nv_write_13:
   \   0002D3   700D         JNZ       ??osal_nv_write_8
   1365                    {
   1366                      rtrn = NV_OPER_FAILED;
   1367                    }
   1368                    else
   1369                    {
   1370                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \   0002D5                ; Setup parameters for call to function hotItemUpdate
   \   0002D5   7407         MOV       A,#0x7
   \   0002D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DA   12....       LCALL     ?Subroutine12 & 0xFFFF
   1371                    }
   1372                  }
   1373                  else
   1374                  {
   1375                    rtrn = NV_OPER_FAILED;
   1376                  }
   1377                }
   \                     ??CrossCallReturnLabel_10:
   \   0002DD   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \   0002E0   8008         SJMP      ??osal_nv_write_14
   1378                else
   1379                {
   1380                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_8:
   \   0002E2   7402         MOV       A,#0x2
   \   0002E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E7   740A         MOV       A,#0xa
   \   0002E9   F0           MOVX      @DPTR,A
   1381                }
   1382          
   1383                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_write_14:
   \   0002EA   85..82       MOV       DPL,?XSP + 0
   \   0002ED   85..83       MOV       DPH,?XSP + 1
   \   0002F0   E0           MOVX      A,@DPTR
   \   0002F1   6030         JZ        ??osal_nv_write_15
   1384                {
   1385                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1386                   * page and writing the new value failed, then the compaction must be aborted.
   1387                   */
   1388                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   0002F3   7401         MOV       A,#0x1
   \   0002F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F8   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0002FB   700F         JNZ       ??osal_nv_write_16
   \   0002FD   7402         MOV       A,#0x2
   \   0002FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000302   E0           MOVX      A,@DPTR
   \   000303   640A         XRL       A,#0xa
   \   000305   7005         JNZ       ??osal_nv_write_16
   1389                  {
   1390                    erasePage( pgRes );
   \   000307                ; Setup parameters for call to function erasePage
   \   000307   12....       LCALL     ?Subroutine28 & 0xFFFF
   1391                  }
   \                     ??CrossCallReturnLabel_118:
   \   00030A   803C         SJMP      ??CrossCallReturnLabel_115
   1392                  else
   1393                  {
   1394                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_16:
   \   00030C                ; Setup parameters for call to function setPageUse
   \   00030C   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00030F                ; Setup parameters for call to function erasePage
   \   00030F   85..82       MOV       DPL,?XSP + 0
   \   000312   85..83       MOV       DPH,?XSP + 1
   \   000315   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000318   85..82       MOV       DPL,?XSP + 0
   \   00031B   85..83       MOV       DPH,?XSP + 1
   \   00031E   E0           MOVX      A,@DPTR
   \   00031F   90....       MOV       DPTR,#pgRes
   \   000322   F0           MOVX      @DPTR,A
   1395                  }
   1396                }
   1397          
   1398                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1399                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1400                 */
   1401                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_15:
   \   000323   7401         MOV       A,#0x1
   \   000325   12....       LCALL     ?XSTACK_DISP0_8
   \   000328   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00032B   601B         JZ        ??CrossCallReturnLabel_115
   \   00032D   7402         MOV       A,#0x2
   \   00032F   12....       LCALL     ?XSTACK_DISP0_8
   \   000332   E0           MOVX      A,@DPTR
   \   000333   640A         XRL       A,#0xa
   \   000335   6011         JZ        ??CrossCallReturnLabel_115
   1402                {
   1403                  setItem( srcPg, origOff, eNvZero );
   \   000337                ; Setup parameters for call to function setItem
   \   000337   7C01         MOV       R4,#0x1
   \   000339   7403         MOV       A,#0x3
   \   00033B   12....       LCALL     ?XSTACK_DISP0_8
   \   00033E   12....       LCALL     ?Subroutine16 & 0xFFFF
   1404                }
   1405              }
   1406            }
   \                     ??CrossCallReturnLabel_33:
   \   000341   EC           MOV       A,R4
   \   000342   12....       LCALL     ?XSTACK_DISP0_8
   \   000345   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   1407          
   1408            return rtrn;
   \                     ??CrossCallReturnLabel_115:
   \   000348   7402         MOV       A,#0x2
   \   00034A   12....       LCALL     ?XSTACK_DISP0_8
   \   00034D   E0           MOVX      A,@DPTR
   \   00034E   F9           MOV       R1,A
   \                     ??osal_nv_write_2:
   \   00034F   7411         MOV       A,#0x11
   \   000351   02....       LJMP      ??Subroutine70_0 & 0xFFFF
   1409          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   25..         ADD       A,?V6
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   35..         ADDC      A,?V7
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A8..         MOV       R0,?V2
   \   000002   E8           MOV       A,R0
   \   000003   28           ADD       A,R0
   \   000004   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000007   E0           MOVX      A,@DPTR
   \   000008   C3           CLR       C
   \   000009   95..         SUBB      A,?V0
   \   00000B   FE           MOV       R6,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   95..         SUBB      A,?V1
   \   000010   FF           MOV       R7,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   E0           MOVX      A,@DPTR
   \   000009   68           XRL       A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   EE           MOV       A,R6
   \   000004   FA           MOV       R2,A
   \   000005   EF           MOV       A,R7
   \   000006   FB           MOV       R3,A
   \   000007   A9..         MOV       R1,?V2
   \   000009   22           RET
   1410          
   1411          /*********************************************************************
   1412           * @fn      osal_nv_read
   1413           *
   1414           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1415           *          an element of an item by indexing into the item with an offset.
   1416           *          Read data is copied into *buf.
   1417           *
   1418           * @param   id  - Valid NV item Id.
   1419           * @param   ndx - Index offset into item
   1420           * @param   len - Length of data to read.
   1421           * @param  *buf - Data is read into this buffer.
   1422           *
   1423           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1424           *          Otherwise, NV_OPER_FAILED for failure.
   1425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1426          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1427          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   1428            uint16 offset;
   1429            uint8 hotIdx;
   1430          
   1431            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000D                ; Setup parameters for call to function hotItem
   \   00000D   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000010   E9           MOV       A,R1
   \   000011   F8           MOV       R0,A
   \   000012   7410         MOV       A,#0x10
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FE           MOV       R6,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FF           MOV       R7,A
   \   00001C   7412         MOV       A,#0x12
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F5..         MOV       ?V3,A
   \   000028   E9           MOV       A,R1
   \   000029   C3           CLR       C
   \   00002A   9403         SUBB      A,#0x3
   \   00002C   5029         JNC       ??osal_nv_read_0
   1432            {
   1433              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   00002E   E9           MOV       A,R1
   \   00002F   F5..         MOV       ?V0,A
   \   000031                ; Setup parameters for call to function HalFlashRead
   \   000031   8E..         MOV       ?V6,R6
   \   000033   8F..         MOV       ?V7,R7
   \   000035   78..         MOV       R0,#?V6
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   AC..         MOV       R4,?V2
   \   00003C   AD..         MOV       R5,?V3
   \   00003E   12....       LCALL     ?Subroutine55 & 0xFFFF
   1434              return SUCCESS;
   1435            }
   \                     ??CrossCallReturnLabel_103:
   \   000041   E0           MOVX      A,@DPTR
   \   000042   25..         ADD       A,?V4
   \   000044   FA           MOV       R2,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   35..         ADDC      A,?V5
   \   000049   FB           MOV       R3,A
   \   00004A   74..         MOV       A,#hotPg & 0xff
   \   00004C   25..         ADD       A,?V0
   \   00004E   F582         MOV       DPL,A
   \   000050   E4           CLR       A
   \   000051   34..         ADDC      A,#(hotPg >> 8) & 0xff
   \   000053   F583         MOV       DPH,A
   \   000055   8025         SJMP      ??osal_nv_read_1
   1436          
   1437            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   000057                ; Setup parameters for call to function findItem
   \   000057   AA..         MOV       R2,?V0
   \   000059   AB..         MOV       R3,?V1
   \   00005B   12....       LCALL     ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00005E   7004         JNZ       ??osal_nv_read_2
   1438            {
   1439              return NV_OPER_FAILED;
   \   000060   790A         MOV       R1,#0xa
   \   000062   8020         SJMP      ??osal_nv_read_3
   1440            }
   1441            else
   1442            {
   1443              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_2:
   \   000064                ; Setup parameters for call to function HalFlashRead
   \   000064   8E..         MOV       ?V0,R6
   \   000066   8F..         MOV       ?V1,R7
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   AC..         MOV       R4,?V2
   \   00006F   AD..         MOV       R5,?V3
   \   000071   EA           MOV       A,R2
   \   000072   25..         ADD       A,?V4
   \   000074   FA           MOV       R2,A
   \   000075   EB           MOV       A,R3
   \   000076   35..         ADDC      A,?V5
   \   000078   FB           MOV       R3,A
   \   000079   90....       MOV       DPTR,#findPg
   \                     ??osal_nv_read_1:
   \   00007C   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00007F   12....       LCALL     ?DEALLOC_XSTACK8
   1444              return SUCCESS;
   \   000082   7900         MOV       R1,#0x0
   1445            }
   \                     ??osal_nv_read_3:
   \   000084   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   1446          }
   1447          
   1448          /*********************************************************************
   1449           * @fn      osal_nv_delete
   1450           *
   1451           * @brief   Delete item from NV. This function will fail if the length
   1452           *          parameter does not match the length of the item in NV.
   1453           *
   1454           * @param   id  - Valid NV item Id.
   1455           * @param   len - Length of item to delete.
   1456           *
   1457           * @return  SUCCESS if item was deleted,
   1458           *          NV_ITEM_UNINIT if item did not exist in NV,
   1459           *          NV_BAD_ITEM_LEN if length parameter not correct,
   1460           *          NV_OPER_FAILED if attempted deletion failed.
   1461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1462          uint8 osal_nv_delete( uint16 id, uint16 len )
   \                     osal_nv_delete:
   1463          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   1464            uint16 length;
   1465            uint16 offset;
   1466          
   1467            offset = findItem( id );
   \   00000D                ; Setup parameters for call to function findItem
   \   00000D   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   1468            if ( offset == OSAL_NV_ITEM_NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   7004         JNZ       ??osal_nv_delete_0
   1469            {
   1470              // NV item does not exist
   1471              return NV_ITEM_UNINIT;
   \   000018   7909         MOV       R1,#0x9
   \   00001A   8029         SJMP      ??osal_nv_delete_1
   1472            }
   1473          
   1474            length = osal_nv_item_len( id );
   1475            if ( length != len )
   \                     ??osal_nv_delete_0:
   \   00001C                ; Setup parameters for call to function osal_nv_item_len
   \   00001C   EE           MOV       A,R6
   \   00001D   FA           MOV       R2,A
   \   00001E   EF           MOV       A,R7
   \   00001F   FB           MOV       R3,A
   \   000020   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000023   E5..         MOV       A,?V2
   \   000025   6A           XRL       A,R2
   \   000026   7003         JNZ       ??osal_nv_delete_2
   \   000028   E5..         MOV       A,?V3
   \   00002A   6B           XRL       A,R3
   \                     ??osal_nv_delete_2:
   \   00002B   6004         JZ        ??osal_nv_delete_3
   1476            {
   1477              // NV item has different length
   1478              return NV_BAD_ITEM_LEN;
   \   00002D   790C         MOV       R1,#0xc
   \   00002F   8014         SJMP      ??osal_nv_delete_1
   1479            }
   1480          
   1481            // Set item header ID to zero to 'delete' the item
   1482            setItem( findPg, offset, eNvZero );
   \                     ??osal_nv_delete_3:
   \   000031                ; Setup parameters for call to function setItem
   \   000031   7C01         MOV       R4,#0x1
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   12....       LCALL     ?Subroutine27 & 0xFFFF
   1483          
   1484            // Verify that item has been removed
   1485            offset = findItem( id );
   1486            if ( offset != OSAL_NV_ITEM_NULL )
   \                     ??CrossCallReturnLabel_113:
   \   00003A                ; Setup parameters for call to function findItem
   \   00003A   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00003D   6004         JZ        ??osal_nv_delete_4
   1487            {
   1488              // Still there
   1489              return NV_OPER_FAILED;
   \   00003F   790A         MOV       R1,#0xa
   \   000041   8002         SJMP      ??osal_nv_delete_1
   1490            }
   1491            else
   1492            {
   1493              // Yes, it's gone
   1494              return SUCCESS;
   \                     ??osal_nv_delete_4:
   \   000043   7900         MOV       R1,#0x0
   1495            }
   \                     ??osal_nv_delete_1:
   \   000045   02....       LJMP      ?Subroutine4 & 0xFFFF
   1496          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setPageUse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??erasePage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??compactPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??findItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setChk::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setChk

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcChkF::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWord::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWordH::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??xferBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItemUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItemUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_len::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_write::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_read::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_delete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_delete
   1497          
   1498          /*********************************************************************
   1499           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     54   calcChkF
        0     21   -> HalFlashRead
      0     56   compactPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> erasePage
        0     26   -> hotItemUpdate
        0     26   -> setChk
        0     26   -> setItem
        0     26   -> setPageUse
        0     29   -> writeItem
        0     30   -> xferBuf
      0     42   erasePage
        0      9   -> HalFlashErase
      0     45   findItem
        0     12   -> initPage
      2     18   hotItem
      1     42   hotItemUpdate
        0      9   -> hotItem
      1     64   initItem
        0     28   -> HalFlashRead
        0     26   -> compactPage
        0     26   -> erasePage
        0     26   -> setPageUse
        0     29   -> writeItem
        0     26   -> writeWordH
      2     22   initNV
        0     22   -> HalFlashRead
        0     20   -> compactPage
        0     20   -> erasePage
        0     20   -> initPage
        0     20   -> setPageUse
      0     48   initPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> findItem
        0     26   -> setItem
      0     14   osal_nv_delete
        0     14   -> findItem
        0     14   -> osal_nv_item_len
        0     14   -> setItem
      2      0   osal_nv_init
        2      0   -> initNV
      0     16   osal_nv_item_init
        0     12   -> HalAdcCheckVdd
        0     12   -> findItem
        0     12   -> hotItemUpdate
        0     14   -> initItem
      0     34   osal_nv_item_len
        0     20   -> HalFlashRead
        0     18   -> findItem
        0     18   -> hotItem
      0     22   osal_nv_read
        0     18   -> HalFlashRead
        0     16   -> findItem
        0     16   -> hotItem
      2     41   osal_nv_write
        0     33   -> HalAdcCheckVdd
        0     35   -> HalFlashRead
        0     33   -> calcChkF
        0     33   -> erasePage
        0     33   -> findItem
        0     33   -> hotItemUpdate
        0     35   -> initItem
        0     33   -> setChk
        0     33   -> setItem
        0     33   -> setPageUse
        0     35   -> writeBuf
        0     37   -> xferBuf
      0     49   setChk
        0     16   -> HalFlashRead
        0     14   -> writeWordH
      0     57   setItem
        0     24   -> HalFlashRead
        0     22   -> writeWord
      0     50   setPageUse
        0     17   -> writeWord
      1     57   writeBuf
        0     22   -> HalFlashRead
        0     22   -> HalFlashWrite
        0     20   -> writeWord
      0     56   writeItem
        0     27   -> HalFlashRead
        0     25   -> calcChkF
        0     25   -> hotItemUpdate
        0     25   -> setChk
        0     27   -> writeBuf
        0     25   -> writeWord
      0     39   writeWord
        0     14   -> HalFlashWrite
      1     39   writeWordH
        0     13   -> writeWord
      1     60   xferBuf
        0     23   -> HalFlashRead
        0     21   -> writeWord


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ??Subroutine58_0
       3  ??Subroutine59_0
       5  ??Subroutine60_0
       6  ??Subroutine61_0
       5  ??Subroutine62_0
       6  ??Subroutine63_0
       5  ??Subroutine64_0
       8  ??Subroutine65_0
      11  ??Subroutine66_0
       7  ??Subroutine67_0
       1  ??Subroutine68_0
       6  ??Subroutine69_0
       3  ??Subroutine70_0
       5  ??Subroutine71_0
      10  ??Subroutine72_0
       1  ??Subroutine73_0
       6  ??Subroutine74_0
       2  ?Subroutine0
       3  ?Subroutine1
       1  ?Subroutine10
      10  ?Subroutine11
      10  ?Subroutine12
      13  ?Subroutine13
       6  ?Subroutine14
       5  ?Subroutine15
       6  ?Subroutine16
       7  ?Subroutine17
       4  ?Subroutine18
       9  ?Subroutine19
       2  ?Subroutine2
      10  ?Subroutine20
       4  ?Subroutine21
       8  ?Subroutine22
      13  ?Subroutine23
       6  ?Subroutine24
      16  ?Subroutine25
      11  ?Subroutine26
       3  ?Subroutine27
       3  ?Subroutine28
      18  ?Subroutine29
       8  ?Subroutine3
       4  ?Subroutine30
      10  ?Subroutine31
      11  ?Subroutine32
       1  ?Subroutine33
       4  ?Subroutine34
      15  ?Subroutine35
      17  ?Subroutine36
       6  ?Subroutine37
      17  ?Subroutine38
       6  ?Subroutine39
       5  ?Subroutine4
       4  ?Subroutine40
      12  ?Subroutine41
      12  ?Subroutine42
       3  ?Subroutine43
      12  ?Subroutine44
      15  ?Subroutine45
      11  ?Subroutine46
       9  ?Subroutine47
      13  ?Subroutine48
       6  ?Subroutine49
       7  ?Subroutine5
       6  ?Subroutine50
      10  ?Subroutine51
       9  ?Subroutine52
      15  ?Subroutine53
      11  ?Subroutine54
      17  ?Subroutine55
      12  ?Subroutine56
      12  ?Subroutine57
       5  ?Subroutine6
       7  ?Subroutine7
      12  ?Subroutine8
       1  ?Subroutine9
   12288  _nvBuf
     130  calcChkF
       6  calcChkF::?relay
     525  compactPage
       6  compactPage::?relay
      29  erasePage
       6  erasePage::?relay
      64  findItem
       6  findItem::?relay
       1  findPg
       6  hotIds
      39  hotItem
       6  hotItem::?relay
      36  hotItemUpdate
       6  hotItemUpdate::?relay
       6  hotOff
       3  hotPg
     352  initItem
       6  initItem::?relay
     284  initNV
       6  initNV::?relay
     422  initPage
       6  initPage::?relay
      72  osal_nv_delete
       6  osal_nv_delete::?relay
       9  osal_nv_init
       6  osal_nv_init::?relay
      80  osal_nv_item_init
       6  osal_nv_item_init::?relay
     104  osal_nv_item_len
       6  osal_nv_item_len::?relay
     135  osal_nv_read
       6  osal_nv_read::?relay
     852  osal_nv_write
       6  osal_nv_write::?relay
      12  pgLost
      12  pgOff
       1  pgRes
      82  setChk
       6  setChk::?relay
     118  setItem
       6  setItem::?relay
      53  setPageUse
       6  setPageUse::?relay
     351  writeBuf
       6  writeBuf::?relay
     497  writeItem
       6  writeItem::?relay
      56  writeWord
       6  writeWord::?relay
      66  writeWordH
       6  writeWordH::?relay
     333  xferBuf
       6  xferBuf::?relay

 
  5 282 bytes in segment BANKED_CODE
    138 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
    138 bytes of CODE     memory
      6 bytes of CONST    memory
  5 282 bytes of HUGECODE memory
 12 323 bytes of XDATA    memory

Errors: none
Warnings: none
